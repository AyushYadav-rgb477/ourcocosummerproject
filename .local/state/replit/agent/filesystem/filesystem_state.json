{"file_contents":{"app.py":{"content":"import os\nimport logging\nfrom flask import Flask\nfrom flask_sqlalchemy import SQLAlchemy\nfrom flask_cors import CORS\nfrom sqlalchemy.orm import DeclarativeBase\nfrom werkzeug.middleware.proxy_fix import ProxyFix\n\n# Configure logging\nlogging.basicConfig(level=logging.DEBUG)\n\nclass Base(DeclarativeBase):\n    pass\n\ndb = SQLAlchemy(model_class=Base)\n\n# Create the app\napp = Flask(__name__, static_folder='static')\napp.secret_key = os.environ.get(\"SESSION_SECRET\")\napp.wsgi_app = ProxyFix(app.wsgi_app, x_proto=1, x_host=1)\n\n# Enable CORS for API endpoints\nCORS(app, resources={r\"/api/*\": {\"origins\": \"*\"}})\n\n# Configure the database\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = os.environ.get(\"DATABASE_URL\")\napp.config[\"SQLALCHEMY_ENGINE_OPTIONS\"] = {\n    \"pool_recycle\": 300,\n    \"pool_pre_ping\": True,\n}\napp.config[\"SQLALCHEMY_TRACK_MODIFICATIONS\"] = False\n\n# Initialize the app with the extension\ndb.init_app(app)\n\nwith app.app_context():\n    # Import models to ensure tables are created\n    import models  # noqa: F401\n    db.create_all()\n    logging.info(\"Database tables created successfully\")\n","size_bytes":1093},"main.py":{"content":"from app import app\nimport routes  # noqa: F401\n\nif __name__ == \"__main__\":\n    app.run(host=\"0.0.0.0\", port=5000, debug=True)\n","size_bytes":127},"models.py":{"content":"from datetime import datetime\nfrom app import db\nfrom werkzeug.security import generate_password_hash, check_password_hash\n\nclass User(db.Model):\n    __tablename__ = 'users'\n    \n    id = db.Column(db.Integer, primary_key=True)\n    username = db.Column(db.String(80), unique=True, nullable=False)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    full_name = db.Column(db.String(200), nullable=False)\n    college = db.Column(db.String(200), nullable=False)\n    password_hash = db.Column(db.String(256), nullable=False)\n    bio = db.Column(db.Text, nullable=True)\n    skills = db.Column(db.Text, nullable=True)\n    profile_image = db.Column(db.Text, nullable=True)  # Store base64 image or URL\n    phone = db.Column(db.String(20), nullable=True)\n    location = db.Column(db.String(200), nullable=True)\n    title = db.Column(db.String(200), nullable=True)\n    twitter = db.Column(db.String(255), nullable=True)\n    linkedin = db.Column(db.String(255), nullable=True)\n    github = db.Column(db.String(255), nullable=True)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    \n    # Relationships\n    projects = db.relationship('Project', backref='owner', lazy=True, cascade='all, delete-orphan')\n    comments = db.relationship('Comment', backref='author', lazy=True, cascade='all, delete-orphan')\n    votes = db.relationship('Vote', backref='user', lazy=True, cascade='all, delete-orphan')\n    collaborations = db.relationship('Collaboration', backref='collaborator', lazy=True, cascade='all, delete-orphan')\n    donations = db.relationship('Donation', backref='donor', lazy=True, cascade='all, delete-orphan')\n    discussions = db.relationship('Discussion', backref='author', lazy=True, cascade='all, delete-orphan')\n    discussion_replies = db.relationship('DiscussionReply', backref='author', lazy=True, cascade='all, delete-orphan')\n    discussion_likes = db.relationship('DiscussionLike', backref='user', lazy=True, cascade='all, delete-orphan')\n    \n    def set_password(self, password):\n        self.password_hash = generate_password_hash(password)\n    \n    def check_password(self, password):\n        return check_password_hash(self.password_hash, password)\n    \n    def to_dict(self):\n        return {\n            'id': self.id,\n            'username': self.username,\n            'email': self.email,\n            'full_name': self.full_name,\n            'college': self.college,\n            'bio': self.bio,\n            'skills': self.skills,\n            'profile_image': self.profile_image,\n            'phone': self.phone,\n            'location': self.location,\n            'title': self.title,\n            'twitter': self.twitter,\n            'linkedin': self.linkedin,\n            'github': self.github,\n            'created_at': self.created_at.isoformat()\n        }\n\nclass Project(db.Model):\n    __tablename__ = 'projects'\n    \n    id = db.Column(db.Integer, primary_key=True)\n    title = db.Column(db.String(200), nullable=False)\n    description = db.Column(db.Text, nullable=False)\n    category = db.Column(db.String(100), nullable=False)\n    funding_goal = db.Column(db.Float, default=0.0)\n    current_funding = db.Column(db.Float, default=0.0)\n    status = db.Column(db.String(50), default='active')  # active, completed, paused\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)\n    \n    # Foreign Keys\n    user_id = db.Column(db.Integer, db.ForeignKey('users.id'), nullable=False)\n    \n    # Relationships\n    comments = db.relationship('Comment', backref='project', lazy=True, cascade='all, delete-orphan')\n    votes = db.relationship('Vote', backref='project', lazy=True, cascade='all, delete-orphan')\n    collaborations = db.relationship('Collaboration', backref='project', lazy=True, cascade='all, delete-orphan')\n    donations = db.relationship('Donation', backref='project', lazy=True, cascade='all, delete-orphan')\n    attachments = db.relationship('ProjectAttachment', backref='project', lazy=True, cascade='all, delete-orphan')\n    \n    def get_vote_count(self):\n        return Vote.query.filter_by(project_id=self.id, is_upvote=True).count()\n    \n    def get_collaboration_count(self):\n        return Collaboration.query.filter_by(project_id=self.id).count()\n    \n    def get_comment_count(self):\n        return Comment.query.filter_by(project_id=self.id).count()\n    \n    def to_dict(self, current_user_id=None):\n        owner_data = None\n        if hasattr(self, 'owner') and self.owner:\n            owner_data = self.owner.to_dict()\n        \n        return {\n            'id': self.id,\n            'title': self.title,\n            'description': self.description,\n            'category': self.category,\n            'funding_goal': self.funding_goal,\n            'current_funding': self.current_funding,\n            'status': self.status,\n            'created_at': self.created_at.isoformat(),\n            'updated_at': self.updated_at.isoformat(),\n            'owner': owner_data,\n            'vote_count': self.get_vote_count(),\n            'collaboration_count': self.get_collaboration_count(),\n            'comment_count': self.get_comment_count(),\n            'attachments': [attachment.to_dict() for attachment in self.attachments] if hasattr(self, 'attachments') else [],\n            'can_edit': current_user_id == self.user_id if current_user_id else False\n        }\n\nclass Comment(db.Model):\n    __tablename__ = 'comments'\n    \n    id = db.Column(db.Integer, primary_key=True)\n    content = db.Column(db.Text, nullable=False)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)\n    \n    # Foreign Keys\n    user_id = db.Column(db.Integer, db.ForeignKey('users.id'), nullable=False)\n    project_id = db.Column(db.Integer, db.ForeignKey('projects.id'), nullable=False)\n    \n    def get_reaction_count(self, reaction_type):\n        \"\"\"Get count of reactions of specific type for this comment\"\"\"\n        return len([r for r in self.reactions if r.reaction_type == reaction_type])\n    \n    def get_user_reaction(self, user_id):\n        \"\"\"Get user's reaction type on this comment (if any)\"\"\"\n        for reaction in self.reactions:\n            if reaction.user_id == user_id:\n                return reaction.reaction_type\n        return None\n    \n    def to_dict(self, user_id=None):\n        author_data = None\n        if hasattr(self, 'author') and self.author:\n            author_data = self.author.to_dict()\n            \n        result = {\n            'id': self.id,\n            'content': self.content,\n            'created_at': self.created_at.isoformat(),\n            'updated_at': self.updated_at.isoformat() if hasattr(self, 'updated_at') and self.updated_at else self.created_at.isoformat(),\n            'author': author_data,\n            'like_count': self.get_reaction_count('like'),\n            'heart_count': self.get_reaction_count('heart'),\n            'can_edit': user_id == self.user_id if user_id else False\n        }\n        \n        # Include user's current reaction if user_id provided\n        if user_id:\n            result['user_reaction'] = self.get_user_reaction(user_id)\n            \n        return result\n\nclass Vote(db.Model):\n    __tablename__ = 'votes'\n    \n    id = db.Column(db.Integer, primary_key=True)\n    is_upvote = db.Column(db.Boolean, nullable=False, default=True)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    \n    # Foreign Keys\n    user_id = db.Column(db.Integer, db.ForeignKey('users.id'), nullable=False)\n    project_id = db.Column(db.Integer, db.ForeignKey('projects.id'), nullable=False)\n    \n    # Ensure one vote per user per project\n    __table_args__ = (db.UniqueConstraint('user_id', 'project_id', name='unique_user_project_vote'),)\n\nclass Collaboration(db.Model):\n    __tablename__ = 'collaborations'\n    \n    id = db.Column(db.Integer, primary_key=True)\n    message = db.Column(db.Text, nullable=True)\n    status = db.Column(db.String(50), default='pending')  # pending, accepted, rejected\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    \n    # Foreign Keys\n    user_id = db.Column(db.Integer, db.ForeignKey('users.id'), nullable=False)\n    project_id = db.Column(db.Integer, db.ForeignKey('projects.id'), nullable=False)\n    \n    # Ensure one collaboration request per user per project\n    __table_args__ = (db.UniqueConstraint('user_id', 'project_id', name='unique_user_project_collab'),)\n    \n    def to_dict(self):\n        collaborator_data = None\n        if hasattr(self, 'collaborator') and self.collaborator:\n            collaborator_data = self.collaborator.to_dict()\n            \n        return {\n            'id': self.id,\n            'message': self.message,\n            'status': self.status,\n            'created_at': self.created_at.isoformat(),\n            'collaborator': collaborator_data\n        }\n\nclass Donation(db.Model):\n    __tablename__ = 'donations'\n    \n    id = db.Column(db.Integer, primary_key=True)\n    amount = db.Column(db.Float, nullable=False)\n    message = db.Column(db.Text, nullable=True)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    \n    # Foreign Keys\n    user_id = db.Column(db.Integer, db.ForeignKey('users.id'), nullable=False)\n    project_id = db.Column(db.Integer, db.ForeignKey('projects.id'), nullable=False)\n    \n    def to_dict(self):\n        donor_data = None\n        if hasattr(self, 'donor') and self.donor:\n            donor_data = self.donor.to_dict()\n            \n        return {\n            'id': self.id,\n            'amount': self.amount,\n            'message': self.message,\n            'created_at': self.created_at.isoformat(),\n            'donor': donor_data\n        }\n\nclass Discussion(db.Model):\n    __tablename__ = 'discussions'\n    \n    id = db.Column(db.Integer, primary_key=True)\n    title = db.Column(db.String(200), nullable=False)\n    content = db.Column(db.Text, nullable=False)\n    category = db.Column(db.String(100), nullable=False)\n    tags = db.Column(db.Text, nullable=True)  # Store as comma-separated string\n    media_type = db.Column(db.String(20), nullable=True)  # 'image', 'video', or None\n    media_url = db.Column(db.Text, nullable=True)  # Store base64 data or URL\n    media_filename = db.Column(db.String(255), nullable=True)  # Original filename\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)\n    \n    # Foreign Keys\n    user_id = db.Column(db.Integer, db.ForeignKey('users.id'), nullable=False)\n    \n    # Relationships\n    replies = db.relationship('DiscussionReply', backref='discussion', lazy=True, cascade='all, delete-orphan')\n    likes = db.relationship('DiscussionLike', backref='discussion', lazy=True, cascade='all, delete-orphan')\n    \n    def get_like_count(self):\n        return DiscussionLike.query.filter_by(discussion_id=self.id).count()\n    \n    def get_reply_count(self):\n        return DiscussionReply.query.filter_by(discussion_id=self.id).count()\n    \n    def is_liked_by_user(self, user_id):\n        return DiscussionLike.query.filter_by(discussion_id=self.id, user_id=user_id).first() is not None\n    \n    def to_dict(self, current_user_id=None):\n        tags_list = [tag.strip() for tag in self.tags.split(',')] if self.tags else []\n        author_data = None\n        if hasattr(self, 'author') and self.author:\n            author_data = self.author.to_dict()\n            \n        return {\n            'id': self.id,\n            'title': self.title,\n            'content': self.content,\n            'category': self.category,\n            'tags': tags_list,\n            'media_type': self.media_type,\n            'media_url': self.media_url,\n            'media_filename': self.media_filename,\n            'created_at': self.created_at.isoformat(),\n            'updated_at': self.updated_at.isoformat(),\n            'author': author_data,\n            'like_count': self.get_like_count(),\n            'reply_count': self.get_reply_count(),\n            'is_liked': self.is_liked_by_user(current_user_id) if current_user_id else False,\n            'likes': self.get_like_count(),\n            'replies': self.get_reply_count(),\n            'can_edit': current_user_id == self.user_id if current_user_id else False\n        }\n\nclass DiscussionReply(db.Model):\n    __tablename__ = 'discussion_replies'\n    \n    id = db.Column(db.Integer, primary_key=True)\n    content = db.Column(db.Text, nullable=False)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)\n    \n    # Foreign Keys\n    user_id = db.Column(db.Integer, db.ForeignKey('users.id'), nullable=False)\n    discussion_id = db.Column(db.Integer, db.ForeignKey('discussions.id'), nullable=False)\n    parent_reply_id = db.Column(db.Integer, db.ForeignKey('discussion_replies.id'), nullable=True)  # For nested replies\n    \n    # Relationships\n    reactions = db.relationship('ReplyReaction', backref='reply', lazy=True, cascade='all, delete-orphan')\n    nested_replies = db.relationship('DiscussionReply', backref=db.backref('parent_reply', remote_side=[id]), lazy=True)\n    \n    def get_reaction_count(self, reaction_type):\n        return ReplyReaction.query.filter_by(reply_id=self.id, reaction_type=reaction_type).count()\n    \n    def is_reacted_by_user(self, user_id, reaction_type):\n        return ReplyReaction.query.filter_by(reply_id=self.id, user_id=user_id, reaction_type=reaction_type).first() is not None\n    \n    def to_dict(self, current_user_id=None):\n        author_data = None\n        if hasattr(self, 'author') and self.author:\n            author_data = self.author.to_dict()\n            \n        # Handle nested replies safely\n        nested_replies_list = []\n        try:\n            if hasattr(self, 'nested_replies') and self.nested_replies:\n                nested_replies_list = [nested.to_dict(current_user_id) for nested in self.nested_replies]\n        except Exception:\n            nested_replies_list = []\n            \n        return {\n            'id': self.id,\n            'content': self.content,\n            'created_at': self.created_at.isoformat(),\n            'updated_at': self.updated_at.isoformat() if hasattr(self, 'updated_at') and self.updated_at else self.created_at.isoformat(),\n            'author': author_data,\n            'likes': self.get_reaction_count('like'),\n            'hearts': self.get_reaction_count('heart'),\n            'parent_reply_id': self.parent_reply_id,\n            'nested_replies': nested_replies_list,\n            'can_edit': current_user_id == self.user_id if current_user_id else False,\n            'user_reactions': {\n                'like': self.is_reacted_by_user(current_user_id, 'like') if current_user_id else False,\n                'heart': self.is_reacted_by_user(current_user_id, 'heart') if current_user_id else False,\n            } if current_user_id else {}\n        }\n\nclass DiscussionLike(db.Model):\n    __tablename__ = 'discussion_likes'\n    \n    id = db.Column(db.Integer, primary_key=True)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    \n    # Foreign Keys\n    user_id = db.Column(db.Integer, db.ForeignKey('users.id'), nullable=False)\n    discussion_id = db.Column(db.Integer, db.ForeignKey('discussions.id'), nullable=False)\n    \n    # Ensure one like per user per discussion\n    __table_args__ = (db.UniqueConstraint('user_id', 'discussion_id', name='unique_user_discussion_like'),)\n\nclass ReplyReaction(db.Model):\n    __tablename__ = 'reply_reactions'\n    \n    id = db.Column(db.Integer, primary_key=True)\n    reaction_type = db.Column(db.String(20), nullable=False)  # 'like', 'heart'\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    \n    # Foreign Keys\n    user_id = db.Column(db.Integer, db.ForeignKey('users.id'), nullable=False)\n    reply_id = db.Column(db.Integer, db.ForeignKey('discussion_replies.id'), nullable=False)\n    \n    # Ensure one reaction per user per reply per type\n    __table_args__ = (db.UniqueConstraint('user_id', 'reply_id', 'reaction_type', name='unique_user_reply_reaction'),)\n\nclass Notification(db.Model):\n    __tablename__ = 'notifications'\n    \n    id = db.Column(db.Integer, primary_key=True)\n    type = db.Column(db.String(50), nullable=False)  # comment, like, collaboration, donation, etc.\n    title = db.Column(db.String(200), nullable=False)\n    message = db.Column(db.Text, nullable=False)\n    is_read = db.Column(db.Boolean, default=False)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    \n    # Foreign Keys\n    user_id = db.Column(db.Integer, db.ForeignKey('users.id'), nullable=False)  # recipient\n    related_user_id = db.Column(db.Integer, db.ForeignKey('users.id'), nullable=True)  # actor (who caused the notification)\n    project_id = db.Column(db.Integer, db.ForeignKey('projects.id'), nullable=True)\n    \n    # Relationships\n    recipient = db.relationship('User', foreign_keys=[user_id], backref='received_notifications')\n    actor = db.relationship('User', foreign_keys=[related_user_id], backref='sent_notifications')\n    related_project = db.relationship('Project', backref='notifications')\n    \n    def to_dict(self):\n        return {\n            'id': self.id,\n            'type': self.type,\n            'title': self.title,\n            'message': self.message,\n            'is_read': self.is_read,\n            'created_at': self.created_at.isoformat(),\n            'actor': self.actor.to_dict() if self.actor else None,\n            'project': self.related_project.to_dict() if self.related_project else None\n        }\n\nclass CommentReaction(db.Model):\n    __tablename__ = 'comment_reactions'\n    \n    id = db.Column(db.Integer, primary_key=True)\n    reaction_type = db.Column(db.String(20), nullable=False)  # 'like', 'heart'\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    \n    # Foreign Keys\n    user_id = db.Column(db.Integer, db.ForeignKey('users.id'), nullable=False)\n    comment_id = db.Column(db.Integer, db.ForeignKey('comments.id'), nullable=False)\n    \n    # Relationships\n    user = db.relationship('User', backref='comment_reactions')\n    comment = db.relationship('Comment', backref='reactions')\n    \n    # Ensure one reaction per user per comment (they can change reaction type)\n    __table_args__ = (db.UniqueConstraint('user_id', 'comment_id', name='unique_user_comment_reaction'),)\n\nclass CommentReply(db.Model):\n    __tablename__ = 'comment_replies'\n    \n    id = db.Column(db.Integer, primary_key=True)\n    content = db.Column(db.Text, nullable=False)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    \n    # Foreign Keys\n    user_id = db.Column(db.Integer, db.ForeignKey('users.id'), nullable=False)\n    comment_id = db.Column(db.Integer, db.ForeignKey('comments.id'), nullable=False)\n    \n    # Relationships\n    author = db.relationship('User', backref='comment_replies')\n    comment = db.relationship('Comment', backref='replies')\n    \n    def to_dict(self):\n        author_data = None\n        if hasattr(self, 'author') and self.author:\n            author_data = self.author.to_dict()\n            \n        return {\n            'id': self.id,\n            'content': self.content,\n            'created_at': self.created_at.isoformat(),\n            'author': author_data\n        }\n\n\n# Project Attachment model for file uploads\nclass ProjectAttachment(db.Model):\n    __tablename__ = 'project_attachments'\n    \n    id = db.Column(db.Integer, primary_key=True)\n    filename = db.Column(db.String(255), nullable=False)\n    original_filename = db.Column(db.String(255), nullable=False)\n    file_size = db.Column(db.Integer, nullable=False)  # Size in bytes\n    file_type = db.Column(db.String(100), nullable=False)  # MIME type\n    file_path = db.Column(db.String(500), nullable=False)  # Path to stored file\n    uploaded_at = db.Column(db.DateTime, default=datetime.utcnow)\n    \n    # Foreign Keys\n    project_id = db.Column(db.Integer, db.ForeignKey('projects.id'), nullable=False)\n    user_id = db.Column(db.Integer, db.ForeignKey('users.id'), nullable=False)\n    \n    def to_dict(self):\n        return {\n            'id': self.id,\n            'filename': self.filename,\n            'original_filename': self.original_filename,\n            'file_size': self.file_size,\n            'file_type': self.file_type,\n            'uploaded_at': self.uploaded_at.isoformat(),\n            'user_id': self.user_id\n        }\n\n\nclass TeamChat(db.Model):\n    __tablename__ = 'team_chats'\n    \n    id = db.Column(db.Integer, primary_key=True)\n    message = db.Column(db.Text, nullable=False)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    \n    # Foreign Keys\n    project_id = db.Column(db.Integer, db.ForeignKey('projects.id'), nullable=False)\n    user_id = db.Column(db.Integer, db.ForeignKey('users.id'), nullable=False)\n    \n    # Relationships\n    project = db.relationship('Project', backref='chat_messages')\n    author = db.relationship('User', backref='chat_messages')\n    \n    def to_dict(self):\n        return {\n            'id': self.id,\n            'message': self.message,\n            'created_at': self.created_at.isoformat(),\n            'author': self.author.to_dict() if hasattr(self, 'author') and self.author else None\n        }\n","size_bytes":21494},"pyproject.toml":{"content":"[project]\nname = \"repl-nix-workspace\"\nversion = \"0.1.0\"\ndescription = \"Add your description here\"\nrequires-python = \">=3.11\"\ndependencies = [\n    \"email-validator>=2.2.0\",\n    \"flask-dance>=7.1.0\",\n    \"flask>=3.1.1\",\n    \"flask-sqlalchemy>=3.1.1\",\n    \"gunicorn>=23.0.0\",\n    \"oauthlib>=3.3.1\",\n    \"psycopg2-binary>=2.9.10\",\n    \"pyjwt>=2.10.1\",\n    \"flask-login>=0.6.3\",\n    \"flask-cors>=6.0.1\",\n    \"bcrypt>=4.3.0\",\n    \"sqlalchemy>=2.0.42\",\n    \"werkzeug>=3.1.3\",\n]\n","size_bytes":471},"replit.md":{"content":"# CollabFund - Student Collaboration and Funding Platform\n\n## Overview\n\nCollabFund is a web-based platform designed for college students to share their creative projects, secure funding, and collaborate with peers. The platform enables students to showcase innovative ideas, connect with potential collaborators, and receive financial support for their projects.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Technology Stack**: Static HTML/CSS/JavaScript frontend served by Flask\n- **Design Pattern**: Multi-page application with separate HTML files for different sections\n- **UI Framework**: Custom CSS with Font Awesome and Bootstrap Icons for visual elements\n- **Navigation**: Single-page application feel with JavaScript-driven navigation and dynamic content loading\n\n### Backend Architecture\n- **Framework**: Flask (Python web framework)\n- **Structure**: Modular design with separate files for app configuration, models, and routes\n- **API Design**: RESTful API endpoints under `/api/*` prefix with CORS enabled\n- **Session Management**: Flask sessions with configurable secret key\n\n### Database Architecture\n- **ORM**: SQLAlchemy with Flask-SQLAlchemy extension\n- **Database**: PostgreSQL (configurable via DATABASE_URL environment variable)\n- **Schema Design**: Relational model with proper foreign key relationships and cascading deletes\n\n## Key Components\n\n### User Management System\n- **Authentication**: Username/password-based authentication with secure password hashing using Werkzeug\n- **User Model**: Comprehensive user profiles with personal info, contact details, social links, and professional information\n- **Extended Profile Fields**: Phone, location, professional title, Twitter, LinkedIn, GitHub integration (August 2025)\n- **Session Handling**: Server-side session management for maintaining user state\n\n### Project Management System\n- **Project Model**: Core entity storing project details including title, description, category, funding goals, and status\n- **Project States**: Active, completed, and paused project statuses\n- **Funding Tracking**: Current funding vs. funding goal tracking\n\n### Collaboration Features\n- **Comments System**: User-generated comments on projects with author relationships\n- **Voting System**: User voting mechanism for project popularity\n- **Collaboration Tracking**: Many-to-many relationships between users and projects\n- **Donation System**: Financial contribution tracking between users and projects\n\n### Frontend Pages\n- **Landing Page**: Hero section with typewriter effect and feature showcase\n- **Authentication Pages**: Separate login and registration forms with modern UI\n- **Browse Page**: Project discovery with filtering and search capabilities with edit/delete functionality\n- **Dashboard**: User-specific project management and collaboration overview\n- **Discussion Page**: Community discussions with category filtering, search, and full CRUD functionality\n- **Profile Page**: Redesigned sidebar layout with profile info on left, content on right (August 2025)\n\n### Edit/Delete Functionality (August 2025)\n- **Complete CRUD Operations**: Full edit and delete functionality implemented across all content types\n- **Projects**: Users can edit and delete their own projects with ownership verification\n- **Comments**: Project comments can be edited and deleted by their authors\n- **Discussions**: Full discussion management with edit, delete, and category-based filtering\n- **Discussion Replies**: Nested reply system with edit/delete capabilities and reaction features\n- **Ownership Security**: Backend verification ensures users can only modify their own content\n- **UI Integration**: Hover-based edit/delete overlays with modern CSS styling\n\n## Data Flow\n\n### Authentication Flow\n1. User submits credentials via login form\n2. Flask backend validates credentials against database\n3. Session is created and stored server-side\n4. Frontend JavaScript checks authentication status and updates UI accordingly\n\n### Project Management Flow\n1. Authenticated users create projects via dashboard\n2. Projects are stored in database with owner relationships\n3. Projects appear in browse section for discovery\n4. Users can interact with projects through comments, votes, and collaboration requests\n\n### Funding Flow\n1. Users discover projects through browse functionality\n2. Donation system tracks financial contributions\n3. Project funding progress is updated in real-time\n4. Project owners can monitor funding status through dashboard\n\n## External Dependencies\n\n### Frontend Libraries\n- **Font Awesome 6.5.0**: Icon library for consistent visual elements\n- **Bootstrap Icons 1.11.3**: Additional icon set for UI components\n\n### Backend Dependencies\n- **Flask**: Core web framework\n- **Flask-SQLAlchemy**: Database ORM integration\n- **Flask-CORS**: Cross-origin resource sharing support\n- **Werkzeug**: Security utilities for password hashing and proxy handling\n\n### Database\n- **PostgreSQL**: Primary database system with connection pooling and health checks\n- **SQLAlchemy**: Database abstraction layer with declarative models\n\n## Deployment Strategy\n\n### Environment Configuration\n- **Database**: Configurable via DATABASE_URL environment variable with fallback to local PostgreSQL\n- **Security**: SESSION_SECRET environment variable for session encryption\n- **Development**: Debug mode enabled with hot reloading\n\n### Server Configuration\n- **WSGI**: ProxyFix middleware for proper header handling behind reverse proxies\n- **Static Files**: Flask serves static assets (HTML, CSS, JS) from `/static` directory\n- **CORS**: Enabled for `/api/*` endpoints to support frontend-backend separation\n\n### Database Management\n- **Schema Creation**: Automatic table creation on application startup\n- **Connection Management**: Connection pooling with 300-second recycle time and pre-ping health checks\n- **Model Relationships**: Proper foreign key constraints with cascading delete operations\n\n### Scalability Considerations\n- **Session Storage**: Server-side sessions (may need external session store for scaling)\n- **Static Assets**: Served directly by Flask (consider CDN for production)\n- **Database Connections**: Connection pooling configured for concurrent users\n\n## Recent Changes (August 2025)\n\n### Navbar-Inspired Glass Morphism Design System (August 2025)\n- **Implementation**: Applied consistent glass morphism design across all platform pages\n- **Design Elements**: \n  - Glass morphism backgrounds with backdrop-filter blur(20px)\n  - Consistent RGBA transparencies (0.95 opacity for cards, 0.05 for sections)\n  - Enhanced hover effects with deeper shadows and transforms\n  - Rounded corners (20px border-radius) throughout\n  - Subtle border highlights with rgba transparency\n- **Logo Enhancement**: Updated CollabFund logo to maintain white color consistency\n- **Text Contrast**: Ensured proper color contrast - white text on gradient backgrounds, dark text on light cards\n- **Impact**: Unified visual experience with modern glass morphism aesthetics across browse, discussion, profile, dashboard, donate, login, and register pages\n\n## Recent Changes (August 2025)\n\n### Fixed Notification System\n- **Issue**: Mark as read functionality was not working properly\n- **Solution**: Implemented dedicated Notification model with proper persistence\n- **Impact**: Users can now mark notifications as read, mark all as read, and clear notifications\n\n### Enhanced Team Management  \n- **Issue**: Team members were not displayed when collaboration requests were accepted\n- **Solution**: Created comprehensive team API that shows accepted collaborators grouped by project\n- **Impact**: Users can see their team members organized by project with roles clearly defined\n\n### Project-Based Team Chat\n- **Issue**: No communication mechanism between team members\n- **Solution**: Implemented project-specific chat system using TeamChat model\n- **Impact**: Team members can now communicate within project context, messages are persistent and properly attributed\n\n### Profile Page Redirection\n- **Issue**: View Profile button redirected to current user's profile instead of collaborator's profile\n- **Solution**: Fixed URL parameter from 'user' to 'user_id' to match profile page implementation\n- **Impact**: Users can now correctly view other team members' profiles when clicking \"View Profile\"\n\n### Enhanced Chat Interface\n- **Issue**: Modal-based chat was limiting and not user-friendly for team collaboration\n- **Solution**: Replaced modal with sliding right-side chat sidebar showing all team participants\n- **Impact**: Improved user experience with persistent chat, participant visibility, and keyboard support\n\n### Team Chat Notification System (August 2025)\n- **Feature**: Added red notification indicators for team chat messages similar to existing notification system\n- **Implementation**: When team members send messages, notifications are created for all other project collaborators\n- **Backend Changes**: Modified team chat endpoint to create notifications with type 'team_chat' for all team members except sender\n- **Frontend Changes**: Added notification count refresh after sending messages and proper team_chat icon display\n- **User Experience**: Users now receive red notification badges when team members send messages, improving team communication awareness\n\n### File Upload System for Projects (August 2025)\n- **Feature**: Added comprehensive file attachment system to project creation\n- **Implementation**: New ProjectAttachment model with drag-and-drop interface supporting images, documents, and videos\n- **Storage**: Files stored in organized directory structure under static/uploads/projects/\n- **Validation**: File type checking, size limits (10MB), and duplicate prevention\n- **Impact**: Users can now attach supporting files to their projects including documentation, images, and video demonstrations\n\n### Comprehensive CRUD Operations (August 2025)\n- **Feature**: Added complete edit/delete functionality for all user-generated content\n- **Projects**: Users can edit and delete their own projects with modal-based forms and confirmation dialogs\n- **Discussions**: Discussion owners can edit titles, content, categories, and tags, or delete entire discussions\n- **Comments**: Inline editing and deletion for comments on both projects and discussions\n- **Security**: Proper permission checking ensures users can only modify their own content\n- **UI Enhancement**: Subtle action buttons that appear on hover with consistent styling across all content types\n- **User Experience**: Confirmation dialogs for destructive actions and success/error messaging for all operations\n\n### Comprehensive Discussion System (August 2025)\n- **Feature**: Full-featured discussion platform for project ideas, questions, and community interaction\n- **Discussion Creation**: Rich form with categories, tags, content, and image upload capabilities\n- **Content Categories**: 8 predefined categories including General, Project Ideas, Questions, Collaboration, Showcase, Feedback, Resources, and Announcements\n- **Image Support**: Users can attach images to discussions with drag-and-drop interface and base64 encoding\n- **Search and Filtering**: Real-time search by title/content, category filtering, and sorting by recent/popular/most commented\n- **Interaction Features**: Like/heart reactions, comments, nested replies, and sharing functionality\n- **Complete CRUD**: Full edit/delete capabilities for discussions, comments, and replies with ownership verification\n- **Modal Interface**: Detailed discussion view with comment thread in responsive modal design\n- **Navigation Integration**: Discussion links added to all pages with active state highlighting\n- **API Architecture**: RESTful endpoints with proper authentication, validation, and error handling","size_bytes":11894},"routes.py":{"content":"import os\nfrom datetime import datetime\nfrom flask import request, jsonify, send_from_directory, session\nfrom app import app, db\nfrom models import User, Project, Comment, Vote, Collaboration, Donation, Discussion, DiscussionReply, DiscussionLike, ReplyReaction, Notification, TeamChat, CommentReaction, ProjectAttachment\nfrom sqlalchemy import desc, func\n\n# Helper function to create notifications\ndef create_notification(user_id, type, title, message, related_user_id=None, project_id=None):\n    try:\n        notification = Notification()\n        notification.user_id = user_id\n        notification.type = type\n        notification.title = title\n        notification.message = message\n        notification.related_user_id = related_user_id\n        notification.project_id = project_id\n        db.session.add(notification)\n        db.session.commit()\n    except Exception as e:\n        db.session.rollback()\n        print(f\"Error creating notification: {e}\")\n\n# Serve static HTML files\n@app.route('/')\ndef index():\n    return send_from_directory('static', 'index.html')\n\n@app.route('/login.html')\ndef login_page():\n    return send_from_directory('static', 'login.html')\n\n@app.route('/register.html')\ndef register_page():\n    return send_from_directory('static', 'register.html')\n\n@app.route('/dashboard.html')\ndef dashboard_page():\n    return send_from_directory('static', 'dashboard.html')\n\n@app.route('/browse.html')\ndef browse_page():\n    return send_from_directory('static', 'browse.html')\n\n@app.route('/discussion.html')\ndef discussion_page():\n    return send_from_directory('static', 'discussion.html')\n\n@app.route('/profile.html')\ndef profile_page():\n    return send_from_directory('static', 'profile.html')\n\n@app.route('/donate.html')\ndef donate_page():\n    return send_from_directory('static', 'donate.html')\n\n# Serve CSS and JS files\n@app.route('/styles.css')\ndef styles():\n    return send_from_directory('static', 'styles.css')\n\n@app.route('/login.css')\ndef login_css():\n    return send_from_directory('static', 'login.css')\n\n@app.route('/register.css')\ndef register_css():\n    return send_from_directory('static', 'register.css')\n\n@app.route('/dashboard.css')\ndef dashboard_css():\n    return send_from_directory('static', 'dashboard.css')\n\n@app.route('/browse.css')\ndef browse_css():\n    return send_from_directory('static', 'browse.css')\n\n@app.route('/discussion.css')\ndef discussion_css():\n    return send_from_directory('static', 'discussion.css')\n\n@app.route('/profile.css')\ndef profile_css():\n    return send_from_directory('static', 'profile.css')\n\n@app.route('/donate.css')\ndef donate_css():\n    return send_from_directory('static', 'donate.css')\n\n@app.route('/js/<path:filename>')\ndef js_files(filename):\n    return send_from_directory('static/js', filename)\n\n# Authentication APIs\n@app.route('/api/register', methods=['POST'])\ndef register():\n    try:\n        data = request.get_json()\n        \n        # Validate required fields\n        required_fields = ['username', 'email', 'fullName', 'college', 'password']\n        for field in required_fields:\n            if not data.get(field):\n                return jsonify({'error': f'{field} is required'}), 400\n        \n        # Check if user already exists\n        if User.query.filter_by(username=data['username']).first():\n            return jsonify({'error': 'Username already exists'}), 400\n        \n        if User.query.filter_by(email=data['email']).first():\n            return jsonify({'error': 'Email already exists'}), 400\n        \n        # Create new user\n        user = User()\n        user.username = data['username']\n        user.email = data['email']\n        user.full_name = data['fullName']\n        user.college = data['college']\n        user.set_password(data['password'])\n        \n        db.session.add(user)\n        db.session.commit()\n        \n        # Set session\n        session['user_id'] = user.id\n        session['username'] = user.username\n        \n        return jsonify({\n            'message': 'Registration successful',\n            'user': user.to_dict()\n        }), 201\n        \n    except Exception as e:\n        db.session.rollback()\n        return jsonify({'error': str(e)}), 500\n\n@app.route('/api/login', methods=['POST'])\ndef login():\n    try:\n        data = request.get_json()\n        \n        if not data.get('username') or not data.get('password'):\n            return jsonify({'error': 'Username and password are required'}), 400\n        \n        user = User.query.filter_by(username=data['username']).first()\n        \n        if user and user.check_password(data['password']):\n            session['user_id'] = user.id\n            session['username'] = user.username\n            \n            return jsonify({\n                'message': 'Login successful',\n                'user': user.to_dict()\n            }), 200\n        else:\n            return jsonify({'error': 'Invalid username or password'}), 401\n            \n    except Exception as e:\n        return jsonify({'error': str(e)}), 500\n\n@app.route('/api/logout', methods=['POST'])\ndef logout():\n    session.clear()\n    return jsonify({'message': 'Logout successful'}), 200\n\n@app.route('/api/user', methods=['GET'])\ndef get_current_user():\n    user_id = session.get('user_id')\n    if not user_id:\n        return jsonify({'error': 'Not authenticated'}), 401\n    \n    user = User.query.get(user_id)\n    if not user:\n        return jsonify({'error': 'User not found'}), 404\n    \n    return jsonify({'user': user.to_dict()}), 200\n\n# Project APIs\n@app.route('/api/projects', methods=['GET'])\ndef get_projects():\n    try:\n        # Get query parameters\n        sort_by = request.args.get('sort', 'recent')  # recent, popular, funding\n        category = request.args.get('category', '')\n        page = int(request.args.get('page', 1))\n        per_page = int(request.args.get('per_page', 10))\n        \n        # Build query\n        query = Project.query\n        \n        if category:\n            query = query.filter(Project.category == category)\n        \n        # Apply sorting\n        if sort_by == 'popular':\n            # Sort by vote count (subquery)\n            vote_counts = db.session.query(\n                Vote.project_id,\n                func.count(Vote.id).label('vote_count')\n            ).filter(Vote.is_upvote == True).group_by(Vote.project_id).subquery()\n            \n            query = query.outerjoin(vote_counts, Project.id == vote_counts.c.project_id)\\\n                         .order_by(desc(vote_counts.c.vote_count))\n        elif sort_by == 'funding':\n            query = query.order_by(desc(Project.current_funding))\n        else:  # recent\n            query = query.order_by(desc(Project.created_at))\n        \n        # Paginate\n        paginated = query.paginate(page=page, per_page=per_page, error_out=False)\n        user_id = session.get('user_id')\n        projects = [project.to_dict(user_id) for project in paginated.items]\n        \n        return jsonify({\n            'projects': projects,\n            'total': paginated.total,\n            'pages': paginated.pages,\n            'current_page': page\n        }), 200\n        \n    except Exception as e:\n        return jsonify({'error': str(e)}), 500\n\n@app.route('/api/projects', methods=['POST'])\ndef create_project():\n    try:\n        user_id = session.get('user_id')\n        if not user_id:\n            return jsonify({'error': 'Authentication required'}), 401\n        \n        # Handle both JSON and multipart form data\n        if request.is_json:\n            data = request.get_json()\n            files = []\n        else:\n            data = request.form.to_dict()\n            files = request.files.getlist('files')\n        \n        # Validate required fields\n        required_fields = ['title', 'description', 'category']\n        for field in required_fields:\n            if not data.get(field):\n                return jsonify({'error': f'{field} is required'}), 400\n        \n        # Validate minimum word count for description\n        description_words = data['description'].strip().split()\n        if len(description_words) < 50:\n            return jsonify({'error': 'Project description must be at least 50 words. Please provide more details about your project idea.'}), 400\n        \n        project = Project()\n        project.title = data['title']\n        project.description = data['description']\n        project.category = data['category']\n        project.funding_goal = float(data.get('fundingGoal', 0))\n        project.user_id = user_id\n        \n        db.session.add(project)\n        db.session.flush()  # Get project ID without committing\n        \n        # Handle file uploads\n        if files:\n            import os\n            from werkzeug.utils import secure_filename\n            \n            # Create uploads directory if it doesn't exist\n            upload_dir = os.path.join('static', 'uploads', 'projects', str(project.id))\n            os.makedirs(upload_dir, exist_ok=True)\n            \n            for file in files:\n                if file and file.filename:\n                    # Secure the filename\n                    filename = secure_filename(file.filename)\n                    timestamp = str(int(datetime.now().timestamp()))\n                    unique_filename = f\"{timestamp}_{filename}\"\n                    \n                    # Save the file\n                    file_path = os.path.join(upload_dir, unique_filename)\n                    file.save(file_path)\n                    \n                    # Create attachment record\n                    attachment = ProjectAttachment()\n                    attachment.filename = unique_filename\n                    attachment.original_filename = file.filename\n                    attachment.file_size = os.path.getsize(file_path)\n                    attachment.file_type = file.content_type or 'application/octet-stream'\n                    attachment.file_path = file_path.replace('static/', '')  # Store relative path\n                    attachment.project_id = project.id\n                    attachment.user_id = user_id\n                    \n                    db.session.add(attachment)\n        \n        db.session.commit()\n        \n        return jsonify({\n            'message': 'Project created successfully',\n            'project': project.to_dict(user_id)\n        }), 201\n        \n    except Exception as e:\n        db.session.rollback()\n        return jsonify({'error': str(e)}), 500\n\n@app.route('/api/projects/<int:project_id>', methods=['PUT'])\ndef update_project(project_id):\n    try:\n        user_id = session.get('user_id')\n        if not user_id:\n            return jsonify({'error': 'Authentication required'}), 401\n        \n        project = Project.query.get_or_404(project_id)\n        \n        # Check if user owns the project\n        if project.user_id != user_id:\n            return jsonify({'error': 'Permission denied'}), 403\n        \n        data = request.get_json()\n        \n        # Validate required fields\n        required_fields = ['title', 'description', 'category']\n        for field in required_fields:\n            if not data.get(field):\n                return jsonify({'error': f'{field} is required'}), 400\n        \n        # Update project fields\n        project.title = data['title']\n        project.description = data['description']\n        project.category = data['category']\n        project.funding_goal = float(data.get('fundingGoal', project.funding_goal))\n        project.updated_at = datetime.utcnow()\n        \n        db.session.commit()\n        \n        return jsonify({\n            'message': 'Project updated successfully',\n            'project': project.to_dict(user_id)\n        }), 200\n        \n    except Exception as e:\n        db.session.rollback()\n        return jsonify({'error': str(e)}), 500\n\n@app.route('/api/projects/<int:project_id>', methods=['DELETE'])\ndef delete_project(project_id):\n    try:\n        user_id = session.get('user_id')\n        if not user_id:\n            return jsonify({'error': 'Authentication required'}), 401\n        \n        project = Project.query.get_or_404(project_id)\n        \n        # Check if user owns the project\n        if project.user_id != user_id:\n            return jsonify({'error': 'Permission denied'}), 403\n        \n        # Delete associated files\n        import os\n        upload_dir = os.path.join('static', 'uploads', 'projects', str(project.id))\n        if os.path.exists(upload_dir):\n            import shutil\n            shutil.rmtree(upload_dir)\n        \n        db.session.delete(project)\n        db.session.commit()\n        \n        return jsonify({'message': 'Project deleted successfully'}), 200\n        \n    except Exception as e:\n        db.session.rollback()\n        return jsonify({'error': str(e)}), 500\n\n\n# Serve uploaded files\n@app.route('/uploads/<path:filename>')\ndef uploaded_file(filename):\n    return send_from_directory('static/uploads', filename)\n\n@app.route('/api/projects/<int:project_id>', methods=['GET'])\ndef get_project(project_id):\n    try:\n        user_id = session.get('user_id')\n        project = Project.query.get_or_404(project_id)\n        return jsonify({'project': project.to_dict(user_id)}), 200\n    except Exception as e:\n        return jsonify({'error': str(e)}), 500\n\n# Vote APIs\n@app.route('/api/projects/<int:project_id>/vote', methods=['POST'])\ndef vote_project(project_id):\n    try:\n        user_id = session.get('user_id')\n        if not user_id:\n            return jsonify({'error': 'Authentication required'}), 401\n        \n        project = Project.query.get_or_404(project_id)\n        \n        # Check if user already voted\n        existing_vote = Vote.query.filter_by(user_id=user_id, project_id=project_id).first()\n        \n        if existing_vote:\n            # Toggle vote or remove it\n            if existing_vote.is_upvote:\n                db.session.delete(existing_vote)\n                action = 'removed'\n            else:\n                existing_vote.is_upvote = True\n                action = 'updated'\n        else:\n            # Create new upvote\n            vote = Vote()\n            vote.user_id = user_id\n            vote.project_id = project_id\n            vote.is_upvote = True\n            db.session.add(vote)\n            action = 'added'\n            \n            # Create notification for project owner (only for new votes)\n            voter = User.query.get(user_id)\n            if voter and project.user_id != user_id:\n                create_notification(\n                    user_id=project.user_id,\n                    type='vote',\n                    title='Project Liked',\n                    message=f'{voter.full_name} liked your project \"{project.title}\"',\n                    related_user_id=user_id,\n                    project_id=project.id\n                )\n        \n        db.session.commit()\n        \n        return jsonify({\n            'message': f'Vote {action} successfully',\n            'vote_count': project.get_vote_count()\n        }), 200\n        \n    except Exception as e:\n        db.session.rollback()\n        return jsonify({'error': str(e)}), 500\n\n# Comment APIs\n@app.route('/api/projects/<int:project_id>/comments', methods=['GET'])\ndef get_comments(project_id):\n    try:\n        user_id = session.get('user_id')  # Get current user for reaction info\n        comments = Comment.query.filter_by(project_id=project_id)\\\n                               .order_by(desc(Comment.created_at)).all()\n        return jsonify({\n            'comments': [comment.to_dict(user_id) for comment in comments]\n        }), 200\n    except Exception as e:\n        return jsonify({'error': str(e)}), 500\n\n@app.route('/api/projects/<int:project_id>/comments', methods=['POST'])\ndef add_comment(project_id):\n    try:\n        user_id = session.get('user_id')\n        if not user_id:\n            return jsonify({'error': 'Authentication required'}), 401\n        \n        data = request.get_json()\n        if not data.get('content'):\n            return jsonify({'error': 'Content is required'}), 400\n        \n        comment = Comment()\n        comment.content = data['content']\n        comment.user_id = user_id\n        comment.project_id = project_id\n        \n        db.session.add(comment)\n        db.session.commit()\n        \n        # Create notification for project owner\n        project = Project.query.get(project_id)\n        commenter = User.query.get(user_id)\n        if project and commenter and project.user_id != user_id:\n            create_notification(\n                user_id=project.user_id,\n                type='comment',\n                title='New Comment',\n                message=f'{commenter.full_name} commented on your project \"{project.title}\"',\n                related_user_id=user_id,\n                project_id=project.id\n            )\n        \n        return jsonify({\n            'message': 'Comment added successfully',\n            'comment': comment.to_dict(user_id)\n        }), 201\n        \n    except Exception as e:\n        db.session.rollback()\n        return jsonify({'error': str(e)}), 500\n\n@app.route('/api/comments/<int:comment_id>', methods=['PUT'])\ndef update_comment(comment_id):\n    try:\n        user_id = session.get('user_id')\n        if not user_id:\n            return jsonify({'error': 'Authentication required'}), 401\n        \n        comment = Comment.query.get_or_404(comment_id)\n        \n        # Check if user owns the comment\n        if comment.user_id != user_id:\n            return jsonify({'error': 'Permission denied'}), 403\n        \n        data = request.get_json()\n        content = data.get('content', '').strip()\n        \n        if not content:\n            return jsonify({'error': 'Comment content is required'}), 400\n        \n        comment.content = content\n        comment.updated_at = datetime.utcnow()\n        \n        db.session.commit()\n        \n        return jsonify({\n            'message': 'Comment updated successfully',\n            'comment': comment.to_dict(user_id)\n        }), 200\n        \n    except Exception as e:\n        db.session.rollback()\n        return jsonify({'error': str(e)}), 500\n\n@app.route('/api/comments/<int:comment_id>', methods=['DELETE'])\ndef delete_comment(comment_id):\n    try:\n        user_id = session.get('user_id')\n        if not user_id:\n            return jsonify({'error': 'Authentication required'}), 401\n        \n        comment = Comment.query.get_or_404(comment_id)\n        \n        # Check if user owns the comment\n        if comment.user_id != user_id:\n            return jsonify({'error': 'Permission denied'}), 403\n        \n        db.session.delete(comment)\n        db.session.commit()\n        \n        return jsonify({'message': 'Comment deleted successfully'}), 200\n        \n    except Exception as e:\n        db.session.rollback()\n        return jsonify({'error': str(e)}), 500\n\n# Comment reaction APIs (for project comments)\n@app.route('/api/comment/<int:comment_id>/reaction', methods=['POST'])\ndef toggle_comment_reaction(comment_id):\n    try:\n        user_id = session.get('user_id')\n        if not user_id:\n            return jsonify({'error': 'Authentication required'}), 401\n        \n        data = request.get_json()\n        reaction_type = data.get('reaction_type')\n        \n        if reaction_type not in ['like', 'heart']:\n            return jsonify({'error': 'Invalid reaction type'}), 400\n        \n        comment = Comment.query.get_or_404(comment_id)\n        \n        # Check if user already has any reaction on this comment\n        existing_reaction = CommentReaction.query.filter_by(user_id=user_id, comment_id=comment_id).first()\n        \n        if existing_reaction:\n            if existing_reaction.reaction_type == reaction_type:\n                # Same reaction - remove it\n                db.session.delete(existing_reaction)\n                user_reacted = False\n                action = 'removed'\n            else:\n                # Different reaction - change it\n                existing_reaction.reaction_type = reaction_type\n                user_reacted = True\n                action = 'changed'\n        else:\n            # No existing reaction - add new one\n            reaction = CommentReaction()\n            reaction.user_id = user_id\n            reaction.comment_id = comment_id\n            reaction.reaction_type = reaction_type\n            db.session.add(reaction)\n            user_reacted = True\n            action = 'added'\n        \n        db.session.commit()\n        \n        return jsonify({\n            'message': f'Reaction {action} successfully',\n            'like_count': comment.get_reaction_count('like'),\n            'heart_count': comment.get_reaction_count('heart'),\n            'user_reaction': comment.get_user_reaction(user_id)\n        }), 200\n        \n    except Exception as e:\n        db.session.rollback()\n        return jsonify({'error': str(e)}), 500\n\n\n\n# Collaboration APIs\n@app.route('/api/projects/<int:project_id>/collaborate', methods=['POST'])\ndef request_collaboration(project_id):\n    try:\n        user_id = session.get('user_id')\n        if not user_id:\n            return jsonify({'error': 'Authentication required'}), 401\n        \n        project = Project.query.get_or_404(project_id)\n        \n        # Check if user is project owner\n        if project.user_id == user_id:\n            return jsonify({'error': 'Cannot collaborate on your own project'}), 400\n        \n        # Check if collaboration request already exists\n        existing_collab = Collaboration.query.filter_by(\n            user_id=user_id, project_id=project_id\n        ).first()\n        \n        if existing_collab:\n            return jsonify({'error': 'Collaboration request already exists'}), 400\n        \n        data = request.get_json()\n        collaboration = Collaboration()\n        collaboration.user_id = user_id\n        collaboration.project_id = project_id\n        collaboration.message = data.get('message', '')\n        \n        db.session.add(collaboration)\n        db.session.commit()\n        \n        # Create notification for project owner\n        requester = User.query.get(user_id)\n        if requester:\n            create_notification(\n                user_id=project.user_id,\n                type='collaboration',\n                title='New Collaboration Request',\n                message=f'{requester.full_name} wants to collaborate on \"{project.title}\"',\n                related_user_id=user_id,\n                project_id=project.id\n            )\n        \n        return jsonify({\n            'message': 'Collaboration request sent successfully',\n            'collaboration': collaboration.to_dict()\n        }), 201\n        \n    except Exception as e:\n        db.session.rollback()\n        return jsonify({'error': str(e)}), 500\n\n# Donation APIs\n@app.route('/api/projects/<int:project_id>/donate', methods=['POST'])\ndef donate_to_project(project_id):\n    try:\n        user_id = session.get('user_id')\n        if not user_id:\n            return jsonify({'error': 'Authentication required'}), 401\n        \n        project = Project.query.get_or_404(project_id)\n        data = request.get_json()\n        \n        amount = float(data.get('amount', 0))\n        if amount <= 0:\n            return jsonify({'error': 'Invalid donation amount'}), 400\n        \n        donation = Donation()\n        donation.user_id = user_id\n        donation.project_id = project_id\n        donation.amount = amount\n        donation.message = data.get('message', '')\n        \n        # Update project funding\n        project.current_funding += amount\n        \n        db.session.add(donation)\n        db.session.commit()\n        \n        # Create notification for project owner\n        donor = User.query.get(user_id)\n        if donor and project.user_id != user_id:\n            create_notification(\n                user_id=project.user_id,\n                type='donation',\n                title='New Donation Received',\n                message=f'{donor.full_name} donated ${amount:.2f} to your project \"{project.title}\"',\n                related_user_id=user_id,\n                project_id=project.id\n            )\n        \n        return jsonify({\n            'message': 'Donation successful',\n            'donation': donation.to_dict(),\n            'new_funding': project.current_funding\n        }), 201\n        \n    except Exception as e:\n        db.session.rollback()\n        return jsonify({'error': str(e)}), 500\n\n# Dashboard APIs\n@app.route('/api/dashboard/stats', methods=['GET'])\ndef get_dashboard_stats():\n    try:\n        user_id = session.get('user_id')\n        if not user_id:\n            return jsonify({'error': 'Authentication required'}), 401\n        \n        user_projects = Project.query.filter_by(user_id=user_id).all()\n        total_funding = sum(project.current_funding for project in user_projects)\n        total_votes = sum(project.get_vote_count() for project in user_projects)\n        total_collaborations = Collaboration.query.filter_by(user_id=user_id).count()\n        \n        return jsonify({\n            'total_projects': len(user_projects),\n            'total_funding': total_funding,\n            'total_votes': total_votes,\n            'total_collaborations': total_collaborations,\n            'projects': [project.to_dict() for project in user_projects]\n        }), 200\n        \n    except Exception as e:\n        return jsonify({'error': str(e)}), 500\n\n# Discussion APIs\n@app.route('/api/discussions', methods=['GET'])\ndef get_discussions():\n    try:\n        # Get query parameters\n        sort_by = request.args.get('sort', 'recent')  # recent, popular\n        category = request.args.get('category', '')\n        search = request.args.get('search', '')\n        page = int(request.args.get('page', 1))\n        per_page = int(request.args.get('per_page', 10))\n        \n        # Build query\n        query = Discussion.query\n        \n        if category:\n            query = query.filter(Discussion.category == category)\n        \n        if search:\n            query = query.filter(Discussion.title.contains(search) | Discussion.content.contains(search))\n        \n        # Apply sorting\n        if sort_by == 'popular':\n            # Sort by like count (subquery)\n            like_counts = db.session.query(\n                DiscussionLike.discussion_id,\n                func.count(DiscussionLike.id).label('like_count')\n            ).group_by(DiscussionLike.discussion_id).subquery()\n            \n            query = query.outerjoin(like_counts, Discussion.id == like_counts.c.discussion_id)\\\n                         .order_by(desc(like_counts.c.like_count))\n        else:  # recent\n            query = query.order_by(desc(Discussion.created_at))\n        \n        # Paginate\n        paginated = query.paginate(page=page, per_page=per_page, error_out=False)\n        user_id = session.get('user_id')\n        discussions = [discussion.to_dict(user_id) for discussion in paginated.items]\n        \n        return jsonify({\n            'discussions': discussions,\n            'total': paginated.total,\n            'pages': paginated.pages,\n            'current_page': page\n        }), 200\n        \n    except Exception as e:\n        return jsonify({'error': str(e)}), 500\n\n@app.route('/api/discussions/<int:discussion_id>/like', methods=['POST'])\ndef toggle_discussion_like(discussion_id):\n    if 'user_id' not in session:\n        return jsonify({'error': 'Not authenticated'}), 401\n    \n    try:\n        user_id = session['user_id']\n        \n        # Check if user already liked this discussion\n        existing_like = DiscussionLike.query.filter_by(\n            discussion_id=discussion_id,\n            user_id=user_id\n        ).first()\n        \n        if existing_like:\n            # Unlike - remove the like\n            db.session.delete(existing_like)\n            liked = False\n        else:\n            # Like - add new like\n            new_like = DiscussionLike(\n                discussion_id=discussion_id,\n                user_id=user_id\n            )\n            db.session.add(new_like)\n            liked = True\n            \n            # Create notification for discussion owner\n            discussion = Discussion.query.get(discussion_id)\n            liker = User.query.get(user_id)\n            if discussion and liker and discussion.user_id != user_id:\n                create_notification(\n                    user_id=discussion.user_id,\n                    type='like',\n                    title='Discussion Liked',\n                    message=f'{liker.full_name} liked your discussion \"{discussion.title}\"',\n                    related_user_id=user_id,\n                    project_id=None\n                )\n        \n        db.session.commit()\n        \n        # Get updated like count\n        like_count = DiscussionLike.query.filter_by(discussion_id=discussion_id).count()\n        \n        return jsonify({\n            'liked': liked,\n            'like_count': like_count\n        }), 200\n        \n    except Exception as e:\n        db.session.rollback()\n        return jsonify({'error': str(e)}), 500\n\n@app.route('/api/discussions', methods=['POST'])\ndef create_discussion():\n    try:\n        user_id = session.get('user_id')\n        if not user_id:\n            return jsonify({'error': 'Authentication required'}), 401\n        \n        data = request.get_json()\n        \n        # Validate required fields\n        required_fields = ['title', 'content', 'category']\n        for field in required_fields:\n            if not data.get(field):\n                return jsonify({'error': f'{field} is required'}), 400\n        \n        discussion = Discussion()\n        discussion.title = data['title']\n        discussion.content = data['content']\n        discussion.category = data['category']\n        discussion.tags = ','.join(data.get('tags', []))\n        discussion.user_id = user_id\n        \n        # Handle media upload\n        if data.get('media_data') and data.get('media_type'):\n            discussion.media_type = data['media_type']\n            discussion.media_url = data['media_data']  # Store base64 data\n            discussion.media_filename = data.get('media_filename', 'uploaded_file')\n        \n        db.session.add(discussion)\n        db.session.commit()\n        \n        return jsonify({\n            'message': 'Discussion created successfully',\n            'discussion': discussion.to_dict(user_id)\n        }), 201\n        \n    except Exception as e:\n        db.session.rollback()\n        return jsonify({'error': str(e)}), 500\n\n@app.route('/api/discussions/<int:discussion_id>', methods=['PUT'])\ndef update_discussion(discussion_id):\n    try:\n        user_id = session.get('user_id')\n        if not user_id:\n            return jsonify({'error': 'Authentication required'}), 401\n        \n        discussion = Discussion.query.get_or_404(discussion_id)\n        \n        # Check if user owns the discussion\n        if discussion.user_id != user_id:\n            return jsonify({'error': 'Permission denied'}), 403\n        \n        data = request.get_json()\n        \n        # Validate required fields\n        required_fields = ['title', 'content', 'category']\n        for field in required_fields:\n            if not data.get(field):\n                return jsonify({'error': f'{field} is required'}), 400\n        \n        # Update discussion fields\n        discussion.title = data['title']\n        discussion.content = data['content']\n        discussion.category = data['category']\n        discussion.tags = ','.join(data.get('tags', []))\n        discussion.updated_at = datetime.utcnow()\n        \n        db.session.commit()\n        \n        return jsonify({\n            'message': 'Discussion updated successfully',\n            'discussion': discussion.to_dict(user_id)\n        }), 200\n        \n    except Exception as e:\n        db.session.rollback()\n        return jsonify({'error': str(e)}), 500\n\n@app.route('/api/discussions/<int:discussion_id>', methods=['DELETE'])\ndef delete_discussion(discussion_id):\n    try:\n        user_id = session.get('user_id')\n        if not user_id:\n            return jsonify({'error': 'Authentication required'}), 401\n        \n        discussion = Discussion.query.get_or_404(discussion_id)\n        \n        # Check if user owns the discussion\n        if discussion.user_id != user_id:\n            return jsonify({'error': 'Permission denied'}), 403\n        \n        db.session.delete(discussion)\n        db.session.commit()\n        \n        return jsonify({'message': 'Discussion deleted successfully'}), 200\n        \n    except Exception as e:\n        db.session.rollback()\n        return jsonify({'error': str(e)}), 500\n\n@app.route('/api/discussions/<int:discussion_id>', methods=['GET'])\ndef get_discussion(discussion_id):\n    try:\n        user_id = session.get('user_id')\n        discussion = Discussion.query.get_or_404(discussion_id)\n        \n        return jsonify({\n            'discussion': discussion.to_dict(user_id)\n        }), 200\n        \n    except Exception as e:\n        return jsonify({'error': str(e)}), 500\n\n\n\n@app.route('/api/discussions/<int:discussion_id>/replies', methods=['GET'])\ndef get_discussion_replies(discussion_id):\n    try:\n        user_id = session.get('user_id')\n        # Only get top-level replies (parent_reply_id is None)\n        replies = DiscussionReply.query.filter_by(discussion_id=discussion_id, parent_reply_id=None)\\\n                                     .order_by(desc(DiscussionReply.created_at)).all()\n        return jsonify({\n            'replies': [reply.to_dict(user_id) for reply in replies]\n        }), 200\n    except Exception as e:\n        return jsonify({'error': str(e)}), 500\n\n@app.route('/api/discussions/<int:discussion_id>/replies', methods=['POST'])\ndef add_discussion_reply(discussion_id):\n    try:\n        user_id = session.get('user_id')\n        if not user_id:\n            return jsonify({'error': 'Authentication required'}), 401\n        \n        data = request.get_json()\n        if not data.get('content'):\n            return jsonify({'error': 'Content is required'}), 400\n        \n        reply = DiscussionReply()\n        reply.content = data['content']\n        reply.user_id = user_id\n        reply.discussion_id = discussion_id\n        \n        db.session.add(reply)\n        db.session.commit()\n        \n        # Create notification for discussion owner\n        discussion = Discussion.query.get(discussion_id)\n        replier = User.query.get(user_id)\n        if discussion and replier and discussion.user_id != user_id:\n            create_notification(\n                user_id=discussion.user_id,\n                type='reply',\n                title='New Discussion Reply',\n                message=f'{replier.full_name} replied to your discussion \"{discussion.title}\"',\n                related_user_id=user_id,\n                project_id=None\n            )\n        \n        return jsonify({\n            'message': 'Reply added successfully',\n            'reply': reply.to_dict(user_id)\n        }), 201\n        \n    except Exception as e:\n        db.session.rollback()\n        return jsonify({'error': str(e)}), 500\n\n# Reply reaction APIs\n@app.route('/api/reply/<int:reply_id>/reaction', methods=['POST'])\ndef toggle_reply_reaction(reply_id):\n    try:\n        user_id = session.get('user_id')\n        if not user_id:\n            return jsonify({'error': 'Authentication required'}), 401\n        \n        data = request.get_json()\n        reaction_type = data.get('reaction_type')\n        \n        if reaction_type not in ['like', 'heart']:\n            return jsonify({'error': 'Invalid reaction type'}), 400\n        \n        reply = DiscussionReply.query.get_or_404(reply_id)\n        \n        # Check if user already reacted with this type\n        existing_reaction = ReplyReaction.query.filter_by(\n            user_id=user_id, \n            reply_id=reply_id, \n            reaction_type=reaction_type\n        ).first()\n        \n        if existing_reaction:\n            # Remove reaction\n            db.session.delete(existing_reaction)\n            user_reacted = False\n            action = 'removed'\n        else:\n            # Add reaction\n            reaction = ReplyReaction()\n            reaction.user_id = user_id\n            reaction.reply_id = reply_id\n            reaction.reaction_type = reaction_type\n            db.session.add(reaction)\n            user_reacted = True\n            action = 'added'\n        \n        db.session.commit()\n        \n        return jsonify({\n            'message': f'Reaction {action} successfully',\n            'count': reply.get_reaction_count(reaction_type),\n            'user_reacted': user_reacted\n        }), 200\n        \n    except Exception as e:\n        db.session.rollback()\n        return jsonify({'error': str(e)}), 500\n\n# Discussion Reply Edit and Delete APIs\n@app.route('/api/replies/<int:reply_id>', methods=['PUT'])\ndef update_discussion_reply(reply_id):\n    try:\n        user_id = session.get('user_id')\n        if not user_id:\n            return jsonify({'error': 'Authentication required'}), 401\n        \n        reply = DiscussionReply.query.get_or_404(reply_id)\n        \n        # Check if user owns the reply\n        if reply.user_id != user_id:\n            return jsonify({'error': 'Permission denied'}), 403\n        \n        data = request.get_json()\n        content = data.get('content', '').strip()\n        \n        if not content:\n            return jsonify({'error': 'Reply content is required'}), 400\n        \n        reply.content = content\n        reply.updated_at = datetime.utcnow()\n        \n        db.session.commit()\n        \n        return jsonify({\n            'message': 'Reply updated successfully',\n            'reply': reply.to_dict(user_id)\n        }), 200\n        \n    except Exception as e:\n        db.session.rollback()\n        return jsonify({'error': str(e)}), 500\n\n@app.route('/api/replies/<int:reply_id>', methods=['DELETE'])\ndef delete_discussion_reply(reply_id):\n    try:\n        user_id = session.get('user_id')\n        if not user_id:\n            return jsonify({'error': 'Authentication required'}), 401\n        \n        reply = DiscussionReply.query.get_or_404(reply_id)\n        \n        # Check if user owns the reply\n        if reply.user_id != user_id:\n            return jsonify({'error': 'Permission denied'}), 403\n        \n        db.session.delete(reply)\n        db.session.commit()\n        \n        return jsonify({'message': 'Reply deleted successfully'}), 200\n        \n    except Exception as e:\n        db.session.rollback()\n        return jsonify({'error': str(e)}), 500\n\n# Nested reply APIs\n@app.route('/api/reply/<int:parent_reply_id>/replies', methods=['POST'])\ndef add_nested_reply(parent_reply_id):\n    try:\n        user_id = session.get('user_id')\n        if not user_id:\n            return jsonify({'error': 'Authentication required'}), 401\n        \n        data = request.get_json()\n        if not data.get('content'):\n            return jsonify({'error': 'Content is required'}), 400\n        \n        parent_reply = DiscussionReply.query.get_or_404(parent_reply_id)\n        \n        nested_reply = DiscussionReply()\n        nested_reply.content = data['content']\n        nested_reply.user_id = user_id\n        nested_reply.discussion_id = parent_reply.discussion_id\n        nested_reply.parent_reply_id = parent_reply_id\n        \n        db.session.add(nested_reply)\n        db.session.commit()\n        \n        return jsonify({\n            'message': 'Nested reply added successfully',\n            'reply': nested_reply.to_dict(user_id)\n        }), 201\n        \n    except Exception as e:\n        db.session.rollback()\n        return jsonify({'error': str(e)}), 500\n\n@app.route('/api/discussions/stats', methods=['GET'])\ndef get_discussion_stats():\n    try:\n        # Ideas shared count = number of discussion posts (total discussions)\n        ideas_shared = Discussion.query.count()\n        \n        # Community members = unique users who have posted discussions\n        community_members = db.session.query(Discussion.user_id).distinct().count()\n        \n        # Active discussions = total number of replies across all discussions\n        active_discussions = DiscussionReply.query.count()\n        \n        return jsonify({\n            'totalDiscussions': active_discussions,  # Active discussions (replies count)\n            'activeMembers': community_members,       # Community members (unique posters)\n            'ideasShared': ideas_shared              # Ideas shared (total discussion posts)\n        }), 200\n    except Exception as e:\n        return jsonify({'error': str(e)}), 500\n\n# Discussion Comment API endpoints (renamed to avoid conflicts)\n@app.route('/api/discussions/<int:discussion_id>/comments', methods=['GET'])\ndef get_discussion_comments(discussion_id):\n    try:\n        user_id = session.get('user_id')\n        # Get top-level replies (comments) for this discussion\n        comments = DiscussionReply.query.filter_by(discussion_id=discussion_id, parent_reply_id=None)\\\n                                      .order_by(DiscussionReply.created_at).all()\n        return jsonify({\n            'comments': [comment.to_dict(user_id) for comment in comments]\n        }), 200\n    except Exception as e:\n        return jsonify({'error': str(e)}), 500\n\n@app.route('/api/discussions/<int:discussion_id>/comments', methods=['POST'])\ndef add_discussion_comment(discussion_id):\n    try:\n        user_id = session.get('user_id')\n        if not user_id:\n            return jsonify({'error': 'Authentication required'}), 401\n        \n        data = request.get_json()\n        if not data.get('content'):\n            return jsonify({'error': 'Content is required'}), 400\n        \n        comment = DiscussionReply()\n        comment.content = data['content']\n        comment.user_id = user_id\n        comment.discussion_id = discussion_id\n        # No parent_reply_id means it's a top-level comment\n        \n        db.session.add(comment)\n        db.session.commit()\n        \n        return jsonify({\n            'message': 'Comment added successfully',\n            'comment': comment.to_dict(user_id)\n        }), 201\n        \n    except Exception as e:\n        db.session.rollback()\n        return jsonify({'error': str(e)}), 500\n\n@app.route('/api/discussion-comments/<int:comment_id>', methods=['PUT'])\ndef update_discussion_comment(comment_id):\n    try:\n        user_id = session.get('user_id')\n        if not user_id:\n            return jsonify({'error': 'Authentication required'}), 401\n        \n        comment = DiscussionReply.query.get_or_404(comment_id)\n        \n        # Check if user owns the comment\n        if comment.user_id != user_id:\n            return jsonify({'error': 'Permission denied'}), 403\n        \n        data = request.get_json()\n        content = data.get('content', '').strip()\n        \n        if not content:\n            return jsonify({'error': 'Comment content is required'}), 400\n        \n        comment.content = content\n        comment.updated_at = datetime.utcnow()\n        \n        db.session.commit()\n        \n        return jsonify({\n            'message': 'Comment updated successfully',\n            'comment': comment.to_dict(user_id)\n        }), 200\n        \n    except Exception as e:\n        db.session.rollback()\n        return jsonify({'error': str(e)}), 500\n\n@app.route('/api/discussion-comments/<int:comment_id>', methods=['DELETE'])\ndef delete_discussion_comment(comment_id):\n    try:\n        user_id = session.get('user_id')\n        if not user_id:\n            return jsonify({'error': 'Authentication required'}), 401\n        \n        comment = DiscussionReply.query.get_or_404(comment_id)\n        \n        # Check if user owns the comment\n        if comment.user_id != user_id:\n            return jsonify({'error': 'Permission denied'}), 403\n        \n        db.session.delete(comment)\n        db.session.commit()\n        \n        return jsonify({'message': 'Comment deleted successfully'}), 200\n        \n    except Exception as e:\n        db.session.rollback()\n        return jsonify({'error': str(e)}), 500\n\n@app.route('/api/discussion-comments/<int:comment_id>/react', methods=['POST'])\ndef toggle_discussion_comment_reaction(comment_id):\n    try:\n        user_id = session.get('user_id')\n        if not user_id:\n            return jsonify({'error': 'Authentication required'}), 401\n        \n        data = request.get_json()\n        reaction_type = data.get('reaction_type', 'like')\n        \n        comment = DiscussionReply.query.get_or_404(comment_id)\n        \n        # Check if user already reacted with this type\n        existing_reaction = ReplyReaction.query.filter_by(\n            user_id=user_id, \n            reply_id=comment_id, \n            reaction_type=reaction_type\n        ).first()\n        \n        if existing_reaction:\n            # Remove reaction\n            db.session.delete(existing_reaction)\n            user_reacted = False\n        else:\n            # Add reaction\n            reaction = ReplyReaction()\n            reaction.user_id = user_id\n            reaction.reply_id = comment_id\n            reaction.reaction_type = reaction_type\n            db.session.add(reaction)\n            user_reacted = True\n        \n        db.session.commit()\n        \n        return jsonify({\n            'reacted': user_reacted,\n            'reaction_count': comment.get_reaction_count(reaction_type)\n        }), 200\n        \n    except Exception as e:\n        db.session.rollback()\n        return jsonify({'error': str(e)}), 500\n\n@app.route('/api/discussion-comments/<int:comment_id>/replies', methods=['POST'])\ndef add_discussion_comment_reply(comment_id):\n    try:\n        user_id = session.get('user_id')\n        if not user_id:\n            return jsonify({'error': 'Authentication required'}), 401\n        \n        data = request.get_json()\n        if not data.get('content'):\n            return jsonify({'error': 'Content is required'}), 400\n        \n        parent_comment = DiscussionReply.query.get_or_404(comment_id)\n        \n        reply = DiscussionReply()\n        reply.content = data['content']\n        reply.user_id = user_id\n        reply.discussion_id = parent_comment.discussion_id\n        reply.parent_reply_id = comment_id\n        \n        db.session.add(reply)\n        db.session.commit()\n        \n        return jsonify({\n            'message': 'Reply added successfully',\n            'reply': reply.to_dict(user_id)\n        }), 201\n        \n    except Exception as e:\n        db.session.rollback()\n        return jsonify({'error': str(e)}), 500\n\n# Profile API endpoints\n@app.route('/api/profile', methods=['PUT'])\ndef update_profile():\n    try:\n        user_id = session.get('user_id')\n        if not user_id:\n            return jsonify({'error': 'Authentication required'}), 401\n        \n        user = User.query.get(user_id)\n        if not user:\n            return jsonify({'error': 'User not found'}), 404\n        \n        data = request.get_json()\n        \n        # Update user fields\n        if 'full_name' in data:\n            user.full_name = data['full_name']\n        if 'email' in data:\n            # Check if email is already taken by another user\n            existing_user = User.query.filter_by(email=data['email']).first()\n            if existing_user and existing_user.id != user_id:\n                return jsonify({'error': 'Email already taken'}), 400\n            user.email = data['email']\n        if 'college' in data:\n            user.college = data['college']\n        if 'bio' in data:\n            user.bio = data['bio']\n        if 'skills' in data:\n            user.skills = data['skills']\n        if 'profile_image' in data:\n            user.profile_image = data['profile_image']\n        if 'phone' in data:\n            user.phone = data['phone']\n        if 'location' in data:\n            user.location = data['location']\n        if 'title' in data:\n            user.title = data['title']\n        if 'twitter' in data:\n            user.twitter = data['twitter']\n        if 'linkedin' in data:\n            user.linkedin = data['linkedin']\n        if 'github' in data:\n            user.github = data['github']\n        \n        db.session.commit()\n        \n        return jsonify({\n            'message': 'Profile updated successfully',\n            'user': user.to_dict()\n        }), 200\n        \n    except Exception as e:\n        db.session.rollback()\n        return jsonify({'error': str(e)}), 500\n\n@app.route('/api/users/<int:user_id>/profile', methods=['GET'])\ndef get_user_profile(user_id):\n    try:\n        user = User.query.get(user_id)\n        if not user:\n            return jsonify({'error': 'User not found'}), 404\n        \n        # Get user's projects\n        user_projects = Project.query.filter_by(user_id=user_id).order_by(desc(Project.created_at)).all()\n        \n        # Get user stats\n        total_funding = sum(project.current_funding for project in user_projects)\n        total_votes = sum(project.get_vote_count() for project in user_projects)\n        total_collaborations = Collaboration.query.filter_by(user_id=user_id).count()\n        \n        profile_data = user.to_dict()\n        profile_data.update({\n            'total_projects': len(user_projects),\n            'total_funding': total_funding,\n            'total_votes': total_votes,\n            'total_collaborations': total_collaborations,\n            'projects': [project.to_dict() for project in user_projects]\n        })\n        \n        return jsonify({'profile': profile_data}), 200\n        \n    except Exception as e:\n        return jsonify({'error': str(e)}), 500\n\n@app.route('/api/users', methods=['GET'])\ndef get_users():\n    try:\n        search = request.args.get('search', '')\n        page = int(request.args.get('page', 1))\n        per_page = int(request.args.get('per_page', 20))\n        \n        query = User.query\n        \n        if search:\n            query = query.filter(\n                User.full_name.contains(search) |\n                User.username.contains(search) |\n                User.college.contains(search)\n            )\n        \n        # Paginate results\n        paginated = query.paginate(page=page, per_page=per_page, error_out=False)\n        users = [user.to_dict() for user in paginated.items]\n        \n        return jsonify({\n            'users': users,\n            'total': paginated.total,\n            'pages': paginated.pages,\n            'current_page': page\n        }), 200\n        \n    except Exception as e:\n        return jsonify({'error': str(e)}), 500\n\n@app.route('/api/dashboard/user-collaborations', methods=['GET'])\ndef get_user_collaborations_sent():\n    try:\n        user_id = session.get('user_id')\n        if not user_id:\n            return jsonify({'error': 'Authentication required'}), 401\n        \n        # Get collaborations requested by the user\n        collaborations = db.session.query(\n            Collaboration,\n            Project.title.label('project_title'),\n            User.full_name.label('owner_name')\n        ).join(\n            Project, Collaboration.project_id == Project.id\n        ).join(\n            User, Project.user_id == User.id\n        ).filter(\n            Collaboration.user_id == user_id\n        ).all()\n        \n        collab_list = []\n        for collab, project_title, owner_name in collaborations:\n            collab_dict = {\n                'id': collab.id,\n                'message': collab.message,\n                'status': collab.status,\n                'created_at': collab.created_at.isoformat(),\n                'project_title': project_title,\n                'owner_name': owner_name\n            }\n            collab_list.append(collab_dict)\n        \n        return jsonify({\n            'collaborations': collab_list\n        }), 200\n        \n    except Exception as e:\n        return jsonify({'error': str(e)}), 500\n\n@app.route('/api/dashboard/user-donations', methods=['GET'])\ndef get_user_donations():\n    try:\n        user_id = session.get('user_id')\n        if not user_id:\n            return jsonify({'error': 'Authentication required'}), 401\n        \n        # Get donations made by the user\n        donations = db.session.query(\n            Donation,\n            Project.title.label('project_title'),\n            User.full_name.label('owner_name')\n        ).join(\n            Project, Donation.project_id == Project.id\n        ).join(\n            User, Project.user_id == User.id\n        ).filter(\n            Donation.user_id == user_id\n        ).order_by(desc(Donation.created_at)).all()\n        \n        donations_list = []\n        for donation, project_title, owner_name in donations:\n            donation_dict = {\n                'id': donation.id,\n                'amount': donation.amount,\n                'message': donation.message,\n                'created_at': donation.created_at.isoformat(),\n                'project_title': project_title,\n                'owner_name': owner_name\n            }\n            donations_list.append(donation_dict)\n        \n        return jsonify({\n            'donations': donations_list\n        }), 200\n        \n    except Exception as e:\n        return jsonify({'error': str(e)}), 500\n\n@app.route('/api/dashboard/user-activity', methods=['GET'])\ndef get_user_activity():\n    try:\n        user_id = session.get('user_id')\n        if not user_id:\n            return jsonify({'error': 'Authentication required'}), 401\n        \n        activities = []\n        \n        # Recent projects created\n        recent_projects = Project.query.filter_by(user_id=user_id)\\\n            .order_by(desc(Project.created_at)).limit(5).all()\n        \n        for project in recent_projects:\n            activities.append({\n                'type': 'project_created',\n                'text': f'Created new project \"{project.title}\"',\n                'time': project.created_at.isoformat(),\n                'project_id': project.id\n            })\n        \n        # Recent collaborations\n        recent_collabs = db.session.query(\n            Collaboration, Project.title\n        ).join(\n            Project, Collaboration.project_id == Project.id\n        ).filter(\n            Collaboration.user_id == user_id\n        ).order_by(desc(Collaboration.created_at)).limit(5).all()\n        \n        for collab, project_title in recent_collabs:\n            activities.append({\n                'type': 'collaboration',\n                'text': f'Requested collaboration on \"{project_title}\"',\n                'time': collab.created_at.isoformat(),\n                'status': collab.status\n            })\n        \n        # Recent donations\n        recent_donations = db.session.query(\n            Donation, Project.title\n        ).join(\n            Project, Donation.project_id == Project.id\n        ).filter(\n            Donation.user_id == user_id\n        ).order_by(desc(Donation.created_at)).limit(5).all()\n        \n        for donation, project_title in recent_donations:\n            activities.append({\n                'type': 'donation',\n                'text': f'Donated ${donation.amount:.2f} to \"{project_title}\"',\n                'time': donation.created_at.isoformat(),\n                'amount': donation.amount\n            })\n        \n        # Recent votes\n        recent_votes = db.session.query(\n            Vote, Project.title\n        ).join(\n            Project, Vote.project_id == Project.id\n        ).filter(\n            Vote.user_id == user_id,\n            Vote.is_upvote == True\n        ).order_by(desc(Vote.created_at)).limit(5).all()\n        \n        for vote, project_title in recent_votes:\n            activities.append({\n                'type': 'vote',\n                'text': f'Voted for \"{project_title}\"',\n                'time': vote.created_at.isoformat()\n            })\n        \n        # Recent comments\n        recent_comments = db.session.query(\n            Comment, Project.title\n        ).join(\n            Project, Comment.project_id == Project.id\n        ).filter(\n            Comment.user_id == user_id\n        ).order_by(desc(Comment.created_at)).limit(5).all()\n        \n        for comment, project_title in recent_comments:\n            activities.append({\n                'type': 'comment',\n                'text': f'Commented on \"{project_title}\"',\n                'time': comment.created_at.isoformat()\n            })\n        \n        # Sort all activities by time (newest first)\n        activities.sort(key=lambda x: x['time'], reverse=True)\n        \n        # Return only the 10 most recent activities\n        return jsonify({\n            'activities': activities[:10]\n        }), 200\n        \n    except Exception as e:\n        return jsonify({'error': str(e)}), 500\n\n# Collaboration management for dashboard\n@app.route('/api/collaborations', methods=['GET'])\ndef get_user_collaborations():\n    try:\n        user_id = session.get('user_id')\n        if not user_id:\n            return jsonify({'error': 'Authentication required'}), 401\n        \n        # Get collaborations for projects owned by the user with user and project details\n        collaborations = db.session.query(\n            Collaboration,\n            Project.title.label('project_title'),\n            User.full_name.label('requester_name'),\n            User.username.label('requester_username'),\n            User.email.label('requester_email')\n        ).join(\n            Project, Collaboration.project_id == Project.id\n        ).join(\n            User, Collaboration.user_id == User.id\n        ).filter(\n            Project.user_id == user_id\n        ).order_by(desc(Collaboration.created_at)).all()\n        \n        collab_list = []\n        for collab, project_title, requester_name, requester_username, requester_email in collaborations:\n            collab_dict = {\n                'id': collab.id,\n                'message': collab.message,\n                'status': collab.status,\n                'created_at': collab.created_at.isoformat(),\n                'project': {\n                    'title': project_title\n                },\n                'requester': {\n                    'full_name': requester_name,\n                    'username': requester_username,\n                    'email': requester_email\n                }\n            }\n            collab_list.append(collab_dict)\n        \n        return jsonify({\n            'collaborations': collab_list\n        }), 200\n        \n    except Exception as e:\n        return jsonify({'error': str(e)}), 500\n\n@app.route('/api/collaborations/<int:collab_id>/accept', methods=['POST'])\ndef accept_collaboration(collab_id):\n    try:\n        user_id = session.get('user_id')\n        if not user_id:\n            return jsonify({'error': 'Authentication required'}), 401\n        \n        collaboration = Collaboration.query.get_or_404(collab_id)\n        \n        # Check if user owns the project\n        if collaboration.project.user_id != user_id:\n            return jsonify({'error': 'Unauthorized'}), 403\n        \n        collaboration.status = 'accepted'\n        db.session.commit()\n        \n        # Create notification for the collaborator\n        requester = User.query.get(collaboration.user_id)\n        project = Project.query.get(collaboration.project_id)\n        if requester and project:\n            create_notification(\n                user_id=collaboration.user_id,\n                type='collaboration',\n                title='Collaboration Accepted',\n                message=f'Your collaboration request for \"{project.title}\" has been accepted!',\n                related_user_id=user_id,\n                project_id=project.id\n            )\n        \n        return jsonify({\n            'message': 'Collaboration request accepted',\n            'collaboration': collaboration.to_dict()\n        }), 200\n        \n    except Exception as e:\n        db.session.rollback()\n        return jsonify({'error': str(e)}), 500\n\n@app.route('/api/collaborations/<int:collab_id>/reject', methods=['POST'])\ndef reject_collaboration(collab_id):\n    try:\n        user_id = session.get('user_id')\n        if not user_id:\n            return jsonify({'error': 'Authentication required'}), 401\n        \n        collaboration = Collaboration.query.get_or_404(collab_id)\n        \n        # Check if user owns the project\n        if collaboration.project.user_id != user_id:\n            return jsonify({'error': 'Unauthorized'}), 403\n        \n        collaboration.status = 'rejected'\n        db.session.commit()\n        \n        return jsonify({\n            'message': 'Collaboration request rejected',\n            'collaboration': collaboration.to_dict()\n        }), 200\n        \n    except Exception as e:\n        db.session.rollback()\n        return jsonify({'error': str(e)}), 500\n\n# Notification APIs for dashboard\n@app.route('/api/notifications', methods=['GET'])\ndef get_notifications():\n    try:\n        user_id = session.get('user_id')\n        if not user_id:\n            return jsonify({'error': 'Authentication required'}), 401\n        \n        # Get notifications from database\n        notifications = Notification.query.filter_by(user_id=user_id)\\\n            .order_by(desc(Notification.created_at))\\\n            .limit(50).all()\n        \n        # Count unread notifications\n        unread_count = Notification.query.filter_by(user_id=user_id, is_read=False).count()\n        \n        return jsonify({\n            'notifications': [n.to_dict() for n in notifications],\n            'unread_count': unread_count\n        }), 200\n        \n    except Exception as e:\n        return jsonify({'error': str(e)}), 500\n\n@app.route('/api/notifications/count', methods=['GET'])\ndef get_notification_count():\n    try:\n        user_id = session.get('user_id')\n        if not user_id:\n            return jsonify({'error': 'Authentication required'}), 401\n        \n        # Count unread notifications from database\n        count = Notification.query.filter_by(user_id=user_id, is_read=False).count()\n        \n        return jsonify({'unread_count': min(count, 99)}), 200  # Cap at 99\n        \n    except Exception as e:\n        return jsonify({'error': str(e)}), 500\n\n@app.route('/api/notifications/<int:notification_id>/read', methods=['POST'])\ndef mark_notification_read(notification_id):\n    try:\n        user_id = session.get('user_id')\n        if not user_id:\n            return jsonify({'error': 'Authentication required'}), 401\n        \n        # Find and mark notification as read\n        notification = Notification.query.filter_by(id=notification_id, user_id=user_id).first()\n        if notification:\n            notification.is_read = True\n            db.session.commit()\n        \n        return jsonify({'message': 'Notification marked as read'}), 200\n        \n    except Exception as e:\n        db.session.rollback()\n        return jsonify({'error': str(e)}), 500\n\n@app.route('/api/notifications/mark-all-read', methods=['POST'])\ndef mark_all_notifications_read():\n    try:\n        user_id = session.get('user_id')\n        if not user_id:\n            return jsonify({'error': 'Authentication required'}), 401\n        \n        # Mark all notifications as read for this user\n        Notification.query.filter_by(user_id=user_id, is_read=False).update({'is_read': True})\n        db.session.commit()\n        \n        return jsonify({'message': 'All notifications marked as read'}), 200\n        \n    except Exception as e:\n        db.session.rollback()\n        return jsonify({'error': str(e)}), 500\n\n@app.route('/api/notifications/clear-all', methods=['DELETE'])\ndef clear_all_notifications():\n    try:\n        user_id = session.get('user_id')\n        if not user_id:\n            return jsonify({'error': 'Authentication required'}), 401\n        \n        # Delete all notifications for this user\n        Notification.query.filter_by(user_id=user_id).delete()\n        db.session.commit()\n        \n        return jsonify({'message': 'All notifications cleared'}), 200\n        \n    except Exception as e:\n        db.session.rollback()\n        return jsonify({'error': str(e)}), 500\n\n# Homepage stats API with accurate donation totals\n@app.route('/api/homepage/stats', methods=['GET'])\ndef get_homepage_stats():\n    try:\n        total_projects = Project.query.count()\n        total_users = User.query.count()\n        # Total funding = sum of all project funding goals (what users set as their goals)\n        total_funding = db.session.query(func.sum(Project.funding_goal)).scalar() or 0\n        \n        return jsonify({\n            'totalProjects': total_projects,\n            'totalUsers': total_users,\n            'totalFunding': total_funding\n        }), 200\n    except Exception as e:\n        return jsonify({'error': str(e)}), 500\n\n# Get user's team members (accepted collaborations)\n@app.route('/api/user/team', methods=['GET'])\ndef get_user_team():\n    try:\n        user_id = session.get('user_id')\n        if not user_id:\n            return jsonify({'error': 'Authentication required'}), 401\n        \n        # Get all projects owned by the user\n        owned_projects = Project.query.filter_by(user_id=user_id).all()\n        \n        # Get all accepted collaborations for these projects\n        team_members = []\n        for project in owned_projects:\n            collaborations = Collaboration.query.filter_by(\n                project_id=project.id,\n                status='accepted'\n            ).all()\n            \n            for collab in collaborations:\n                team_member = {\n                    'project_id': project.id,\n                    'project_title': project.title,\n                    'user': collab.collaborator.to_dict(),\n                    'collaboration_date': collab.created_at.isoformat()\n                }\n                team_members.append(team_member)\n        \n        # Also get projects where current user is a collaborator\n        user_collaborations = Collaboration.query.filter_by(\n            user_id=user_id,\n            status='accepted'\n        ).all()\n        \n        for collab in user_collaborations:\n            team_member = {\n                'project_id': collab.project.id,\n                'project_title': collab.project.title,\n                'user': collab.project.owner.to_dict(),\n                'collaboration_date': collab.created_at.isoformat(),\n                'is_owner': True\n            }\n            team_members.append(team_member)\n        \n        return jsonify({'team_members': team_members}), 200\n        \n    except Exception as e:\n        return jsonify({'error': str(e)}), 500\n\n# Team Chat APIs\n@app.route('/api/projects/<int:project_id>/chat', methods=['GET'])\ndef get_project_chat(project_id):\n    try:\n        user_id = session.get('user_id')\n        if not user_id:\n            return jsonify({'error': 'Authentication required'}), 401\n        \n        # Check if user has access to this project (owner or collaborator)\n        project = Project.query.get_or_404(project_id)\n        is_owner = project.user_id == user_id\n        is_collaborator = Collaboration.query.filter_by(\n            project_id=project_id,\n            user_id=user_id,\n            status='accepted'\n        ).first() is not None\n        \n        if not (is_owner or is_collaborator):\n            return jsonify({'error': 'Access denied'}), 403\n        \n        # Get chat messages for this project\n        messages = TeamChat.query.filter_by(project_id=project_id)\\\n            .order_by(TeamChat.created_at.asc()).all()\n        \n        return jsonify({\n            'messages': [msg.to_dict() for msg in messages],\n            'project': project.to_dict()\n        }), 200\n        \n    except Exception as e:\n        return jsonify({'error': str(e)}), 500\n\n@app.route('/api/projects/<int:project_id>/chat', methods=['POST'])\ndef send_chat_message(project_id):\n    try:\n        user_id = session.get('user_id')\n        if not user_id:\n            return jsonify({'error': 'Authentication required'}), 401\n        \n        data = request.get_json()\n        if not data.get('message'):\n            return jsonify({'error': 'Message is required'}), 400\n        \n        # Check if user has access to this project (owner or collaborator)\n        project = Project.query.get_or_404(project_id)\n        is_owner = project.user_id == user_id\n        is_collaborator = Collaboration.query.filter_by(\n            project_id=project_id,\n            user_id=user_id,\n            status='accepted'\n        ).first() is not None\n        \n        if not (is_owner or is_collaborator):\n            return jsonify({'error': 'Access denied'}), 403\n        \n        # Create new chat message\n        chat_message = TeamChat()\n        chat_message.project_id = project_id\n        chat_message.user_id = user_id\n        chat_message.message = data['message']\n        \n        db.session.add(chat_message)\n        db.session.commit()\n        \n        # Get current user for notification\n        sender = User.query.get(user_id)\n        \n        # Get all team members (owner + collaborators) except the sender\n        team_members = []\n        \n        # Add project owner if not the sender\n        if project.user_id != user_id:\n            team_members.append(project.user_id)\n        \n        # Add accepted collaborators who aren't the sender\n        collaborators = Collaboration.query.filter_by(\n            project_id=project_id,\n            status='accepted'\n        ).filter(Collaboration.user_id != user_id).all()\n        \n        for collab in collaborators:\n            team_members.append(collab.user_id)\n        \n        # Create notifications for all team members\n        for member_id in team_members:\n            create_notification(\n                user_id=member_id,\n                type='team_chat',\n                title='New Team Message',\n                message=f'{sender.username} sent a message in {project.title}',\n                related_user_id=user_id,\n                project_id=project_id\n            )\n        \n        return jsonify({\n            'message': 'Message sent successfully',\n            'chat_message': chat_message.to_dict()\n        }), 201\n        \n    except Exception as e:\n        db.session.rollback()\n        return jsonify({'error': str(e)}), 500\n\n@app.route('/api/projects/<int:project_id>/participants', methods=['GET'])\ndef get_project_participants(project_id):\n    try:\n        user_id = session.get('user_id')\n        if not user_id:\n            return jsonify({'error': 'Authentication required'}), 401\n        \n        # Check if user has access to this project (owner or collaborator)\n        project = Project.query.get_or_404(project_id)\n        is_owner = project.user_id == user_id\n        is_collaborator = Collaboration.query.filter_by(\n            project_id=project_id,\n            user_id=user_id,\n            status='accepted'\n        ).first() is not None\n        \n        if not (is_owner or is_collaborator):\n            return jsonify({'error': 'Access denied'}), 403\n        \n        # Get all participants (owner + accepted collaborators)\n        participants = []\n        \n        # Add project owner\n        owner = User.query.get(project.user_id)\n        if owner:\n            participants.append({\n                'user': owner.to_dict(),\n                'is_owner': True,\n                'joined_at': project.created_at.isoformat() if project.created_at else None\n            })\n        \n        # Add accepted collaborators\n        collaborators = Collaboration.query.filter_by(\n            project_id=project_id,\n            status='accepted'\n        ).join(User).all()\n        \n        for collab in collaborators:\n            participants.append({\n                'user': collab.user.to_dict(),\n                'is_owner': False,\n                'joined_at': collab.created_at.isoformat() if collab.created_at else None\n            })\n        \n        return jsonify({\n            'participants': participants,\n            'project': project.to_dict()\n        }), 200\n        \n    except Exception as e:\n        return jsonify({'error': str(e)}), 500\n        \n        user_id = session['user_id']\n        \n        # Get accepted collaborations where user is either requester or project owner\n        accepted_collabs = db.session.query(Collaboration).join(Project).join(User, User.id == Project.owner_id).filter(\n            ((Collaboration.user_id == user_id) | (Project.owner_id == user_id)) &\n            (Collaboration.status == 'accepted')\n        ).all()\n        \n        team_members = set()\n        \n        for collab in accepted_collabs:\n            if collab.user_id == user_id:\n                # User is the collaborator, add project owner to team\n                owner = User.query.get(collab.project.owner_id)\n                if owner:\n                    team_members.add(owner)\n            else:\n                # User is the project owner, add collaborator to team\n                collaborator = User.query.get(collab.user_id)\n                if collaborator:\n                    team_members.add(collaborator)\n        \n        team_data = [{\n            'id': member.id,\n            'username': member.username,\n            'full_name': member.full_name,\n            'email': member.email,\n            'college': member.college\n        } for member in team_members]\n        \n        return jsonify({'team_members': team_data}), 200\n    \n    except Exception as e:\n        return jsonify({'error': str(e)}), 500\n\n# Project details API\n@app.route('/api/projects/<int:project_id>', methods=['GET'])\ndef get_project_details(project_id):\n    try:\n        user_id = session.get('user_id')\n        if not user_id:\n            return jsonify({'error': 'Authentication required'}), 401\n        \n        # Get project with owner information\n        project = db.session.query(Project).filter_by(id=project_id).first()\n        if not project:\n            return jsonify({'error': 'Project not found'}), 404\n        \n        # Check if user owns this project or has access\n        if project.user_id != user_id:\n            return jsonify({'error': 'Access denied'}), 403\n        \n        # Get additional stats\n        vote_count = Vote.query.filter_by(project_id=project_id, is_upvote=True).count()\n        comment_count = Comment.query.filter_by(project_id=project_id).count()\n        collaboration_count = Collaboration.query.filter_by(project_id=project_id, status='accepted').count()\n        current_funding = db.session.query(func.sum(Donation.amount)).filter_by(project_id=project_id).scalar() or 0\n        \n        project_data = {\n            'id': project.id,\n            'title': project.title,\n            'description': project.description,\n            'category': project.category,\n            'status': project.status,\n            'funding_goal': project.funding_goal,\n            'current_funding': current_funding,\n            'created_at': project.created_at.isoformat(),\n            'vote_count': vote_count,\n            'comment_count': comment_count,\n            'collaboration_count': collaboration_count\n        }\n        \n        return jsonify({'project': project_data}), 200\n        \n    except Exception as e:\n        return jsonify({'error': str(e)}), 500\n\n\n","size_bytes":75070},"attached_assets/login_1753862293330.css":{"content":"/* LOGIN PAGE STYLING */\r\nbody {\r\n  margin: 0;\r\n  font-family: 'Segoe UI', sans-serif;\r\n  background: linear-gradient(to right, #6a11cb, #b16cea);\r\n}\r\n\r\n/* Login Wrapper */\r\n.login-wrapper {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  padding: 5rem 1rem;\r\n}\r\n\r\n/* Login Card */\r\n.login-box {\r\n  background: #fff;\r\n  padding: 2.5rem;\r\n  border-radius: 20px;\r\n  max-width: 400px;\r\n  width: 100%;\r\n  text-align: center;\r\n  box-shadow: 0 12px 30px rgba(0, 0, 0, 0.15);\r\n}\r\n\r\n/* Icon Top */\r\n.login-icon {\r\n  background: linear-gradient(to right, #6a11cb, #2575fc);\r\n  color: white;\r\n  font-size: 1.6rem;\r\n  width: 50px;\r\n  height: 50px;\r\n  border-radius: 50%;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  margin: 0 auto 1rem;\r\n}\r\n\r\n.login-box h2 {\r\n  margin: 0.5rem 0;\r\n  font-size: 1.5rem;\r\n  color: #222;\r\n}\r\n\r\n.login-box p {\r\n  color: #666;\r\n  margin-bottom: 1.5rem;\r\n}\r\n\r\n/* Input Group */\r\n.input-group {\r\n  position: relative;\r\n  margin-bottom: 1rem;\r\n}\r\n\r\n.input-group i {\r\n  position: absolute;\r\n  left: 15px;\r\n  top: 50%;\r\n  transform: translateY(-50%);\r\n  color: #888;\r\n  font-size: 0.95rem;\r\n}\r\n\r\n.input-group input {\r\n  width: 90%;\r\n  padding: 0.6rem 0.5rem 0.5rem 2.2rem;\r\n  border: 1px solid #ddd;\r\n  border-radius: 8px;\r\n  font-size: 0.95rem;\r\n  transition: border 0.3s;\r\n}\r\n\r\n.input-group input:focus {\r\n  border-color: #6a11cb;\r\n  outline: none;\r\n}\r\n\r\n/* Checkbox */\r\n.checkbox-row {\r\n  text-align: left;\r\n  margin: 1rem 0;\r\n}\r\n\r\n.checkbox-row label {\r\n  font-size: 0.9rem;\r\n  color: #444;\r\n  cursor: pointer;\r\n}\r\n\r\nform button {\r\n  background: linear-gradient(to right, #6a11cb, #2575fc);\r\n  color: white;\r\n  padding: 0.65rem 1.3rem;\r\n  border: none;\r\n  border-radius: 10px;\r\n  font-size: 1rem;\r\n  cursor: pointer;\r\n  transition: all 0.3s ease;\r\n  display: inline-flex;\r\n  align-items: center;\r\n  gap: 8px;\r\n  margin-top: 1rem;\r\n}\r\n\r\nform button:hover {\r\n  background: linear-gradient(to right, #4b00a8, #1a57e2);\r\n}\r\n\r\n/* Signup link */\r\n.signup-link {\r\n  margin-top: 1rem;\r\n  font-size: 0.9rem;\r\n  color: #555;\r\n}\r\n\r\n.signup-link a {\r\n  color: #6a11cb;\r\n  text-decoration: none;\r\n}\r\n\r\n.signup-link a:hover {\r\n  text-decoration: underline;\r\n}\r\n","size_bytes":2216},"attached_assets/register_1753862293331.css":{"content":"body {\r\n  margin: 0;\r\n  font-family: 'Segoe UI', sans-serif;\r\n  background: linear-gradient(to right, #6a11cb, #b16cea);\r\n}\r\n\r\n/* Main wrapper */\r\n.register-wrapper {\r\n  display: flex;\r\n  justify-content: center;\r\n  padding: 4rem 1rem;\r\n}\r\n\r\n.register-box {\r\n  background: #fff;\r\n  padding: 3rem 2rem;\r\n  border-radius: 16px;\r\n  width: 100%;\r\n  max-width: 700px;\r\n  box-shadow: 0 12px 30px rgba(0, 0, 0, 0.1);\r\n  text-align: center;\r\n}\r\n\r\n.register-icon {\r\n  background: linear-gradient(to right, #6a11cb, #2575fc);\r\n  color: white;\r\n  font-size: 1.5rem;\r\n  width: 50px;\r\n  height: 50px;\r\n  border-radius: 50%;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  margin: 0 auto 1rem;\r\n}\r\n\r\n.register-box h2 {\r\n  margin: 0.5rem 0;\r\n  font-size: 1.8rem;\r\n  color: #222;\r\n}\r\n\r\n.register-box p {\r\n  color: #555;\r\n  margin-bottom: 2rem;\r\n}\r\n\r\n/* Form layout */\r\nform {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 1.5rem;\r\n}\r\n\r\n.form-row {\r\n  display: flex;\r\n  gap: 1.5rem;\r\n  justify-content: center;\r\n  flex-wrap: wrap;\r\n}\r\n\r\n.input-icon {\r\n  position: relative;\r\n  width: 100%;\r\n  max-width: 300px;\r\n}\r\n\r\n.input-icon i {\r\n  position: absolute;\r\n  top: 50%;\r\n  left: 14px;\r\n  transform: translateY(-50%);\r\n  color: #aaa;\r\n}\r\n\r\n.input-icon input {\r\n  padding: 0.7rem 1rem 0.7rem 2.5rem;\r\n  font-size: 1rem;\r\n  width: 80%;\r\n  border: 1px solid #ccc;\r\n  border-radius: 8px;\r\n  transition: border 0.3s;\r\n}\r\n\r\n.input-icon input:focus {\r\n  border-color: #6a11cb;\r\n  outline: none;\r\n}\r\n\r\n/* Checkbox section */\r\n.checkbox-row {\r\n  display: flex;\r\n  justify-content: center;\r\n  margin-top: 0.5rem;\r\n  font-size: 0.9rem;\r\n}\r\n\r\n.checkbox-row label {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 0.5rem;\r\n}\r\n\r\n.checkbox-row input[type=\"checkbox\"] {\r\n  transform: scale(1.2);\r\n}\r\n\r\n.checkbox-row a {\r\n  color: #6a11cb;\r\n  text-decoration: none;\r\n}\r\n\r\n.checkbox-row a:hover {\r\n  text-decoration: underline;\r\n}\r\n.checkbox-row span{\r\n    color: black;\r\n}\r\n\r\n/* Submit Button */\r\n.submit-btn-container {\r\n  text-align: center;\r\n  margin-top: 1rem;\r\n}\r\n\r\nform button {\r\n  background: linear-gradient(to right, #6a11cb, #2575fc);\r\n  color: white;\r\n  padding: 0.9rem 1.5rem;\r\n  border: none;\r\n  border-radius: 10px;\r\n  font-size: 1rem;\r\n  cursor: pointer;\r\n  transition: background 0.3s;\r\n  display: inline-flex;\r\n  align-items: center;\r\n  gap: 8px;\r\n  width: 100%;\r\n  max-width: 300px;\r\n  justify-content: center;\r\n}\r\n\r\nform button:hover {\r\n  background: linear-gradient(to right, #4b00a8, #1a57e2);\r\n}\r\n\r\n/* Responsive */\r\n@media (max-width: 768px) {\r\n  .form-row {\r\n    flex-direction: column;\r\n    align-items: center;\r\n  }\r\n\r\n  .input-icon {\r\n    max-width: 100%;\r\n  }\r\n\r\n  form button {\r\n    max-width: 100%;\r\n  }\r\n}\r\n","size_bytes":2736},"attached_assets/styles_1753862293331.css":{"content":"/* Reset & Base */\r\nbody {\r\n  margin: 0;\r\n  font-family: 'Segoe UI', sans-serif;\r\n  background: linear-gradient(to right, #6a11cb, #b16cea);\r\n  color: white;\r\n}\r\n\r\n/* Navbar */\r\n.navbar {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  padding: 1rem 4rem;\r\n  background-color: rgba(255, 255, 255, 0.08);\r\n  backdrop-filter: blur(8px);\r\n  /* position: sticky; */\r\n  top: 0;\r\n  z-index: 1000;\r\n}\r\n\r\n.nav-left {\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n.logo {\r\n  display: flex;\r\n  align-items: center;\r\n  font-size: 1.4rem;\r\n  font-weight: bold;\r\n  color: white;\r\n  margin-right: 2rem;\r\n  text-decoration: none;\r\n}\r\n\r\n.logo a {\r\n  text-decoration: none;\r\n  color: white;\r\n}\r\n\r\n.logo i {\r\n  margin-right: 8px;\r\n  color: white;\r\n}\r\n\r\n.nav-links a {\r\n  margin: 0 1rem;\r\n  text-decoration: none;\r\n  color: white;\r\n  font-weight: 500;\r\n  display: inline-flex;\r\n  align-items: center;\r\n  font-size: 1rem;\r\n  transition: color 0.3s ease;\r\n}\r\n\r\n.nav-links a i {\r\n  margin-right: 8px;\r\n  font-size: 1.1rem;\r\n}\r\n\r\n/* Right side: Login & Register */\r\n.nav-right {\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n.login-btn,\r\n.register-btn {\r\n  text-decoration: none;\r\n  color: white;\r\n  font-weight: 500;\r\n  padding: 0.5rem 1rem;\r\n  border-radius: 6px;\r\n  transition: all 0.3s ease;\r\n  margin-left: 0.5rem;\r\n  font-size: 1rem;\r\n  display: inline-flex;\r\n  align-items: center;\r\n}\r\n\r\n.login-btn i,\r\n.register-btn i {\r\n  margin-right: 6px;\r\n  \r\n}\r\n\r\n.register-btn {\r\n  border: 1px solid white;\r\n}\r\n\r\n.register-btn:hover {\r\n  background-color: white;\r\n  color: #6a11cb;\r\n\r\n}\r\n\r\n.login-btn:hover {\r\n  color: yellow;\r\n}\r\n\r\n.nav-links a:hover {\r\n  color: yellow;\r\n}\r\n\r\n/* HERO SECTION */\r\n.hero {\r\n  /* padding: 3rem 1rem; */\r\n  color: white;\r\n  text-align: center;\r\n}\r\n\r\n.hero-text h1 {\r\n  font-size: 2.8rem;\r\n  font-weight: bold;\r\n  min-height: 60px;\r\n  margin-bottom: 1rem;\r\n  letter-spacing: 1px;\r\n}\r\n\r\n.hero-text p {\r\n  font-size: 1.1rem;\r\n  max-width: 700px;\r\n  margin: 0 auto 2rem auto;\r\n  color: #f0f0f0;\r\n}\r\n\r\n.cta-buttons {\r\n  margin: 2rem 0;\r\n}\r\n\r\n.btn-primary, .btn-outline {\r\n  padding: 0.8rem 1.5rem;\r\n  margin: 0.5rem;\r\n  font-weight: bold;\r\n  font-size: 2.5rem;\r\n  border-radius: 8px;\r\n  cursor: pointer;\r\n  border: none;\r\n  display: inline-flex;\r\n  align-items: center;\r\n}\r\n\r\n.fa-rocket:before {\r\n    content: \"\\f135\";\r\n    color: white;\r\n}\r\n\r\n.btn-primary {\r\n  background: linear-gradient(to right, #6a11cb, #2575fc);\r\n  color: white;\r\n  border: none;\r\n  padding: 0.8rem 1.5rem;\r\n  margin: 0.5rem;\r\n  font-weight: bold;\r\n  font-size: 1rem;\r\n  border-radius: 8px;\r\n  cursor: pointer;\r\n  display: inline-flex;\r\n  align-items: center;\r\n  transition: all 0.3s ease;\r\n  box-shadow: 0 4px 14px rgba(0, 0, 0, 0.2);\r\n}\r\n\r\n.btn-primary a{\r\n  text-decoration: none;\r\n  color: white;\r\n}\r\n\r\n.fa-user-graduate:before {\r\n    content: \"\\f501\";\r\n    color: white;\r\n}\r\n\r\n.fa-dollar-sign:before, .fa-dollar:before, .fa-usd:before {\r\n    content: \"\\24\";\r\n    color: white;\r\n}\r\n\r\n.btn-primary:hover {\r\n  background: linear-gradient(to right, #5a01a7, #1b5dff);\r\n  transform: translateY(-2px);\r\n  box-shadow: 0 6px 18px rgba(0, 0, 0, 0.3);\r\n}\r\n\r\n\r\n.btn-outline {\r\n  background: transparent;\r\n  color: white;\r\n  border: 2px solid white;\r\n  padding: 0.8rem 1.5rem;\r\n  margin: 0.5rem;\r\n  font-weight: bold;\r\n  font-size: 1rem;\r\n  border-radius: 8px;\r\n  cursor: pointer;\r\n  display: inline-flex;\r\n  align-items: center;\r\n  transition: all 0.3s ease;\r\n}\r\n\r\n/* Hover Effect */\r\n.btn-outline:hover {\r\n  background-color: white;\r\n  color: #6a11cb;\r\n  transform: translateY(-2px);\r\n  box-shadow: 0 6px 18px rgba(0, 0, 0, 0.15);\r\n}\r\n\r\n\r\n.btn-primary i,\r\n.btn-outline i {\r\n  margin-right: 8px;\r\n}\r\n\r\n.features {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  justify-content: center;\r\n  margin: 3rem auto 2rem;\r\n  gap: 2rem;\r\n}\r\n\r\n.feature-card {\r\n  background: white;\r\n  color: #222;\r\n  border-radius: 16px;\r\n  padding: 1.5rem;\r\n  width: 230px;\r\n  text-align: center;\r\n  box-shadow: 0 8px 20px rgba(0, 0, 0, 0.1);\r\n  animation: float 3s ease-in-out infinite;\r\n}\r\n\r\n.feature-card i {\r\n  font-size: 2.2rem;\r\n  color: #0e2ecb;\r\n  margin-bottom: 1rem;\r\n}\r\n\r\n.feature-card h3 {\r\n  font-size: 1.2rem;\r\n  color: #1c1c1c;\r\n  margin-bottom: 0.5rem;\r\n}\r\n\r\n.feature-card p {\r\n  font-size: 0.95rem;\r\n  color: #555;\r\n  font-weight: 500;\r\n}\r\n\r\n/* Floating Animation */\r\n@keyframes float {\r\n  0% {\r\n    transform: translateY(0);\r\n  }\r\n  50% {\r\n    transform: translateY(-10px);\r\n  }\r\n  100% {\r\n    transform: translateY(0);\r\n  }\r\n}\r\n\r\n.feature-card:hover {\r\n  transform: scale(1.03);\r\n  transition: 0.3s ease;\r\n  box-shadow: 0 12px 24px rgba(0, 0, 0, 0.2);\r\n}\r\n\r\n\r\n.stats {\r\n  margin-top: 3rem;\r\n  display: flex;\r\n  justify-content: center;\r\n  gap: 2.5rem;\r\n  flex-wrap: wrap;\r\n  text-align: center;\r\n}\r\n\r\n.stat-card {\r\n  color: white;\r\n  padding: 2.5rem;\r\n  min-width: 160px;\r\n}\r\n\r\n.stat-card i {\r\n  font-size: 2rem;\r\n  margin-bottom: 0.5rem;\r\n  color: #ffd700;\r\n}\r\n\r\n.stat-card h3 {\r\n  font-size: 1.8rem;\r\n  margin: 0.3rem 0;\r\n  color: #fff;\r\n}\r\n\r\n.stat-card p {\r\n  font-size: 1rem;\r\n  color: #f0f0f0;\r\n  font-weight: 500;\r\n}\r\n\r\n.why-collabfund {\r\n  /* background: linear-gradient(to right, #a1c4fd, #c2e9fb); same light blue */\r\n  background-color: white;\r\n  text-align: center;\r\n  padding: 2rem 2rem;\r\n  color: #1c1c1c;\r\n}\r\n\r\n.why-collabfund h2 {\r\n  font-size: 2rem;\r\n  margin-bottom: 0.5rem;\r\n  font-weight: bold;\r\n}\r\n\r\n.why-collabfund p {\r\n  font-size: 1.1rem;\r\n  color: #444;\r\n  margin-bottom: 3rem;\r\n}\r\n\r\n/* Grid Layout */\r\n.why-grid {\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));\r\n  gap: 2rem;\r\n  max-width: 1200px;\r\n  margin: 0 auto;\r\n}\r\n\r\n/* Individual Card */\r\n.why-card {\r\n  background: white;\r\n  padding: 2rem 1.5rem;\r\n  border-radius: 16px;\r\n  box-shadow: 0 8px 20px rgba(0, 0, 0, 0.08);\r\n  text-align: center;\r\n  transition: 0.3s ease;\r\n  border: 2px solid transparent;\r\n}\r\n\r\n.why-card:hover {\r\n  transform: translateY(-6px);\r\n  box-shadow: 0 12px 25px rgba(0, 0, 0, 0.1);\r\n  border-color: #6a11cb;\r\n  \r\n}\r\n\r\n.icon-circle {\r\n  background: linear-gradient(to right, #6a11cb, #2575fc);\r\n  color: white;\r\n  width: 60px;\r\n  height: 60px;\r\n  border-radius: 50%;\r\n  margin: 0 auto 1rem auto;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  font-size: 1.6rem;\r\n}\r\n\r\n.why-card h3 {\r\n  font-size: 1.1rem;\r\n  margin-bottom: 0.6rem;\r\n  color: #1c1c1c;\r\n}\r\n\r\n.why-card p {\r\n  font-size: 0.95rem;\r\n  color: #555;\r\n}\r\n\r\n/* Launch CTA Section */\r\n.launch-section {\r\n  background: linear-gradient(to right, #6a11cb, #2575fc);\r\n  padding: 0rem 2rem;\r\n  color: white;\r\n}\r\n\r\n.launch-content {\r\n  max-width: 1500px;\r\n  margin: 0 auto;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  flex-wrap: wrap;\r\n  gap: 1rem;\r\n}\r\n\r\n.launch-text h2 {\r\n  font-size: 2.2rem;\r\n  font-weight: bold;\r\n  margin-bottom: 0.5rem;\r\n}\r\n\r\n.launch-text p {\r\n  font-size: 1rem;\r\n  color: #e0e0e0;\r\n}\r\n\r\n.launch-btn {\r\n  background: white;\r\n  color: #1a1a1a;\r\n  padding: 0.8rem 1.5rem;\r\n  font-weight: 600;\r\n  border-radius: 12px;\r\n  text-decoration: none;\r\n  display: inline-flex;\r\n  align-items: center;\r\n  transition: all 0.3s ease;\r\n}\r\n\r\n.launch-btn i {\r\n  margin-right: 0.5rem;\r\n}\r\n\r\n/* Hover Effect */\r\n.launch-btn:hover {\r\n  background: #ffd700;\r\n  color: #000;\r\n  transform: translateY(-2px);\r\n  box-shadow: 0 6px 14px rgba(0, 0, 0, 0.2);\r\n}\r\n\r\n.site-footer {\r\n  background-color: #1e1e1e;\r\n  color: #ccc;\r\n  font-family: 'Segoe UI', sans-serif;\r\n  padding: 1rem 1.5rem 0 1rem;\r\n  margin-top: 0;\r\n}\r\n\r\n.footer-container {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  justify-content: space-between;\r\n  gap: 2rem;\r\n  max-width: 1200px;\r\n  margin: 0 auto;\r\n}\r\n\r\n.footer-col {\r\n  flex: 1 1 220px;\r\n  min-width: 200px;\r\n}\r\n\r\n.logo-col h3 {\r\n  color: white;\r\n  margin-bottom: 0.5rem;\r\n  font-size: 1.3rem;\r\n}\r\n\r\n.footer-col h4 {\r\n  color: white;\r\n  margin-bottom: 0.8rem;\r\n  font-size: 1.1rem;\r\n}\r\n\r\n.footer-col p,\r\n.footer-col li a {\r\n  font-size: 0.95rem;\r\n  color: #aaa;\r\n  line-height: 1.6;\r\n  text-decoration: none;\r\n}\r\n\r\n.footer-col ul {\r\n  list-style: none;\r\n  padding: 0;\r\n  margin: 0;\r\n}\r\n\r\n.footer-col li {\r\n  margin-bottom: 0.5rem;\r\n}\r\n\r\n.footer-col a:hover {\r\n  color: #fff;\r\n}\r\n\r\n.social-icons a {\r\n  display: inline-block;\r\n  margin-right: 10px;\r\n  font-size: 1.2rem;\r\n  color: #999;\r\n  background: #333;\r\n  padding: 0.5rem;\r\n  border-radius: 50%;\r\n  transition: 0.3s ease;\r\n}\r\n\r\n.social-icons a:hover {\r\n  background: #6a11cb;\r\n  color: white;\r\n}\r\n\r\n.footer-bottom {\r\n  border-top: 1px solid #333;\r\n  text-align: center;\r\n  margin-top: 2rem;\r\n  padding: 1rem 0;\r\n  font-size: 0.9rem;\r\n  color: #888;\r\n}\r\n","size_bytes":8665},"static/browse.css":{"content":"/* Browse Page Specific Styles */\nbody {\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n  background-attachment: fixed;\n  min-height: 100vh;\n  color: white;\n}\n\n/* Override navbar for browse page */\n.navbar {\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%) !important;\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1) !important;\n  backdrop-filter: blur(20px);\n  border-bottom: 1px solid rgba(255, 255, 255, 0.1);\n}\n\n.browse-container {\n  min-height: calc(100vh - 80px);\n}\n\n/* Page Header Section */\n.page-header-section {\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n  padding: 4rem 2rem 3rem;\n  margin-top: 80px;\n  color: white;\n  text-align: center;\n  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);\n}\n\n.header-content {\n  max-width: 1200px;\n  margin: 0 auto;\n}\n\n.header-content h1 {\n  font-size: 3rem;\n  font-weight: 700;\n  margin-bottom: 1rem;\n  text-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n}\n\n.header-content h1 i {\n  margin-right: 0.5rem;\n  color: #ffd700;\n}\n\n.header-content p {\n  font-size: 1.3rem;\n  margin-bottom: 3rem;\n  opacity: 0.95;\n  line-height: 1.6;\n  max-width: 800px;\n  margin-left: auto;\n  margin-right: auto;\n}\n\n.header-stats {\n  display: flex;\n  justify-content: center;\n  gap: 3rem;\n  flex-wrap: wrap;\n}\n\n.stat-item {\n  text-align: center;\n  background: rgba(255, 255, 255, 0.1);\n  padding: 1.5rem 2rem;\n  border-radius: 16px;\n  backdrop-filter: blur(10px);\n  border: 1px solid rgba(255, 255, 255, 0.2);\n  min-width: 150px;\n  transition: transform 0.3s ease;\n}\n\n.stat-item:hover {\n  transform: translateY(-5px);\n  background: rgba(255, 255, 255, 0.15);\n}\n\n.stat-number {\n  display: block;\n  font-size: 2.5rem;\n  font-weight: 700;\n  color: #ffd700;\n  margin-bottom: 0.5rem;\n}\n\n.stat-label {\n  font-size: 1rem;\n  opacity: 0.9;\n  font-weight: 500;\n}\n\n/* Filters Section */\n.filters-section {\n  background: rgba(255, 255, 255, 0.95);\n  backdrop-filter: blur(20px);\n  padding: 3rem 2rem;\n  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);\n  border-bottom: 1px solid rgba(255, 255, 255, 0.2);\n}\n\n.filters-container {\n  max-width: 1200px;\n  margin: 0 auto;\n  display: flex;\n  gap: 2rem;\n  align-items: center;\n  flex-wrap: wrap;\n}\n\n.search-bar {\n  position: relative;\n  flex: 1;\n  min-width: 400px;\n  max-width: 500px;\n}\n\n.search-bar i {\n  position: absolute;\n  left: 15px;\n  top: 50%;\n  transform: translateY(-50%);\n  color: #999;\n}\n\n.search-bar input {\n  width: 100%;\n  padding: 1rem 1rem 1rem 2.5rem;\n  border: 1px solid #ddd;\n  border-radius: 12px;\n  font-size: 1rem;\n  transition: border-color 0.3s ease;\n  min-height: 48px;\n  box-sizing: border-box;\n}\n\n.search-bar input:focus {\n  outline: none;\n  border-color: #6a11cb;\n}\n\n.filter-controls {\n  display: flex;\n  gap: 1rem;\n}\n\n.filter-controls select {\n  padding: 1rem 1rem;\n  border: 1px solid #ddd;\n  border-radius: 12px;\n  font-size: 1rem;\n  background: white;\n  cursor: pointer;\n  transition: border-color 0.3s ease;\n  min-height: 48px;\n  min-width: 150px;\n  box-sizing: border-box;\n}\n\n.filter-controls select:focus {\n  outline: none;\n  border-color: #6a11cb;\n}\n\n/* Projects Section */\n.projects-section {\n  background: rgba(255, 255, 255, 0.05);\n  backdrop-filter: blur(10px);\n  padding: 3rem 2rem;\n  min-height: 60vh;\n  border-top: 1px solid rgba(255, 255, 255, 0.1);\n}\n\n.projects-container {\n  max-width: 1200px;\n  margin: 0 auto;\n}\n\n.projects-grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(400px, 1fr));\n  gap: 2rem;\n  margin-bottom: 2rem;\n}\n\n.project-card {\n  background: rgba(255, 255, 255, 0.95);\n  backdrop-filter: blur(20px);\n  border-radius: 16px;\n  padding: 0;\n  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);\n  transition: all 0.4s ease;\n  cursor: pointer;\n  border: 1px solid rgba(255, 255, 255, 0.2);\n  min-height: 350px;\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n}\n\n.project-image {\n  width: 100%;\n  height: 200px;\n  position: relative;\n  overflow: hidden;\n}\n\n.project-image img {\n  width: 100%;\n  height: 100%;\n  object-fit: cover;\n  display: block;\n}\n\n/* Removed project placeholder */\n\n.project-content {\n  padding: 2rem;\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n}\n\n.project-card:hover {\n  transform: translateY(-8px);\n  box-shadow: 0 16px 48px rgba(0, 0, 0, 0.2);\n  border-color: rgba(255, 255, 255, 0.4);\n  background: rgba(255, 255, 255, 0.98);\n}\n\n.project-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 1rem;\n}\n\n.project-category {\n  background: linear-gradient(to right, #6a11cb, #2575fc);\n  color: white;\n  padding: 0.25rem 0.75rem;\n  border-radius: 20px;\n  font-size: 0.8rem;\n  font-weight: 500;\n}\n\n.project-date {\n  color: #999;\n  font-size: 0.8rem;\n}\n\n.project-title {\n  font-size: 1.3rem;\n  font-weight: bold;\n  margin-bottom: 0.5rem;\n  color: #1c1c1c;\n  line-height: 1.3;\n}\n\n.project-owner {\n  color: #666;\n  font-size: 0.9rem;\n  margin-bottom: 1rem;\n  display: flex;\n  align-items: center;\n}\n\n.project-owner i {\n  margin-right: 0.5rem;\n  color: #6a11cb;\n}\n\n.project-description {\n  color: #555;\n  line-height: 1.6;\n  margin-bottom: 1rem;\n  flex-grow: 1;\n  position: relative;\n}\n\n.project-description.full {\n  display: block;\n  white-space: pre-wrap;\n  word-wrap: break-word;\n}\n\n.project-description.truncated {\n  display: -webkit-box;\n  -webkit-line-clamp: 4;\n  -webkit-box-orient: vertical;\n  overflow: hidden;\n}\n\n.project-description.expanded {\n  display: block;\n}\n\n.description-toggle {\n  background: none;\n  border: none;\n  color: #6a11cb;\n  font-weight: 500;\n  cursor: pointer;\n  padding: 0.5rem 0;\n  margin-top: 0.5rem;\n  font-size: 0.9rem;\n  transition: color 0.3s ease;\n}\n\n.description-toggle:hover {\n  color: #2575fc;\n}\n\n.description-toggle i {\n  margin-left: 0.25rem;\n  transition: transform 0.3s ease;\n}\n\n.description-toggle.expanded i {\n  transform: rotate(180deg);\n}\n\n.project-stats {\n  display: flex;\n  justify-content: space-between;\n  padding-top: 1rem;\n  border-top: 1px solid #e0e0e0;\n  font-size: 0.9rem;\n  margin-top: auto;\n}\n\n.project-stat {\n  display: flex;\n  align-items: center;\n  color: #666;\n}\n\n.project-stat i {\n  margin-right: 0.25rem;\n  color: #6a11cb;\n}\n\n/* Loading and Empty States */\n.loading-indicator {\n  text-align: center;\n  padding: 3rem;\n  color: #666;\n}\n\n.loading-indicator i {\n  font-size: 2rem;\n  color: #6a11cb;\n  margin-bottom: 1rem;\n}\n\n.no-results {\n  text-align: center;\n  padding: 3rem;\n  color: #666;\n}\n\n.no-results i {\n  font-size: 3rem;\n  color: #ddd;\n  margin-bottom: 1rem;\n}\n\n.no-results h3 {\n  margin-bottom: 0.5rem;\n  color: #999;\n}\n\n/* Project Edit Overlay */\n.project-edit-overlay {\n  position: absolute;\n  top: 0.5rem;\n  right: 0.5rem;\n  display: flex;\n  gap: 0.5rem;\n  opacity: 0;\n  transition: opacity 0.3s ease;\n}\n\n.project-card:hover .project-edit-overlay {\n  opacity: 1;\n}\n\n.project-edit-overlay .btn {\n  padding: 0.25rem 0.5rem;\n  font-size: 0.8rem;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n  transition: all 0.3s ease;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);\n}\n\n.project-edit-overlay .btn-secondary {\n  background: #6c757d;\n  color: white;\n}\n\n.project-edit-overlay .btn-secondary:hover {\n  background: #5a6268;\n  transform: translateY(-1px);\n}\n\n.project-edit-overlay .btn-danger {\n  background: #dc3545;\n  color: white;\n}\n\n.project-edit-overlay .btn-danger:hover {\n  background: #c82333;\n  transform: translateY(-1px);\n}\n\n/* Comment Actions */\n.comment-actions {\n  display: flex;\n  gap: 0.5rem;\n  margin-left: auto;\n}\n\n.comment-actions button {\n  background: none;\n  border: none;\n  color: #666;\n  cursor: pointer;\n  padding: 0.25rem;\n  border-radius: 4px;\n  transition: all 0.3s ease;\n  font-size: 0.9rem;\n}\n\n.edit-comment-btn:hover {\n  background: #e3f2fd;\n  color: #1976d2;\n}\n\n.delete-comment-btn:hover {\n  background: #ffebee;\n  color: #d32f2f;\n}\n\n/* Comment Edit Form */\n.comment-edit-form {\n  margin-top: 0.5rem;\n}\n\n.edit-comment-textarea {\n  width: 100%;\n  padding: 0.75rem;\n  border: 1px solid #ddd;\n  border-radius: 8px;\n  font-family: inherit;\n  font-size: 0.9rem;\n  resize: vertical;\n  min-height: 80px;\n}\n\n.comment-edit-actions {\n  display: flex;\n  gap: 0.5rem;\n  margin-top: 0.5rem;\n}\n\n.save-comment-btn, .cancel-comment-btn {\n  padding: 0.5rem 1rem;\n  border: none;\n  border-radius: 6px;\n  cursor: pointer;\n  font-size: 0.9rem;\n  transition: all 0.3s ease;\n}\n\n.save-comment-btn {\n  background: #28a745;\n  color: white;\n}\n\n.save-comment-btn:hover {\n  background: #218838;\n}\n\n.save-comment-btn:disabled {\n  background: #6c757d;\n  cursor: not-allowed;\n}\n\n.cancel-comment-btn {\n  background: #6c757d;\n  color: white;\n}\n\n.cancel-comment-btn:hover {\n  background: #5a6268;\n}\n\n.edit-indicator {\n  color: #666;\n  font-size: 0.8rem;\n  font-style: italic;\n}\n\n/* Load More Button */\n.load-more-container {\n  text-align: center;\n  margin-top: 2rem;\n}\n\n.load-more-btn {\n  background: linear-gradient(to right, #6a11cb, #2575fc);\n  color: white;\n  padding: 0.75rem 1.5rem;\n  border: none;\n  border-radius: 25px;\n  font-size: 1rem;\n  cursor: pointer;\n  transition: all 0.3s ease;\n  display: inline-flex;\n  align-items: center;\n}\n\n.load-more-btn i {\n  margin-right: 0.5rem;\n}\n\n.load-more-btn:hover {\n  background: linear-gradient(to right, #5a01a7, #1b5dff);\n  transform: translateY(-2px);\n}\n\n/* Modal Styles */\n.modal {\n  display: none;\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background: rgba(0, 0, 0, 0.5);\n  z-index: 1000;\n  animation: fadeIn 0.3s ease;\n}\n\n.modal.show {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.modal-content {\n  background: white;\n  border-radius: 16px;\n  width: 90%;\n  max-width: 900px;\n  max-height: 95vh;\n  overflow-y: auto;\n  animation: slideUp 0.3s ease;\n  box-shadow: 0 25px 50px rgba(0, 0, 0, 0.15);\n}\n\n.modal-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 1.5rem 2rem;\n  border-bottom: 1px solid #e0e0e0;\n}\n\n.modal-header h2 {\n  margin: 0;\n  color: #1c1c1c;\n  font-size: 1.8rem;\n  font-weight: 700;\n  line-height: 1.3;\n}\n\n.modal-subtitle {\n  margin: 0.5rem 0 0 0;\n  color: #666;\n  font-size: 1.1rem;\n  font-weight: 400;\n}\n\n.close-modal {\n  background: none;\n  border: none;\n  font-size: 1.5rem;\n  cursor: pointer;\n  color: #999;\n  transition: color 0.3s ease;\n}\n\n.close-modal:hover {\n  color: #333;\n}\n\n.modal-body {\n  padding: 2rem;\n}\n\n.project-details {\n  margin-bottom: 2rem;\n}\n\n.project-meta {\n  display: flex;\n  gap: 1.5rem;\n  margin-bottom: 2rem;\n  padding: 1rem;\n  background: linear-gradient(135deg, #f8f9ff, #fff);\n  border-radius: 12px;\n  flex-wrap: wrap;\n}\n\n.meta-item {\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n  padding: 0.5rem 1rem;\n  background: white;\n  border-radius: 25px;\n  border: 1px solid #e0e7ff;\n  font-size: 0.95rem;\n  color: #555;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);\n}\n\n.meta-item i {\n  color: #6a11cb;\n}\n\n.project-owner {\n  margin-bottom: 1rem;\n  color: #666;\n}\n\n.project-stats {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));\n  gap: 1rem;\n  margin-bottom: 2rem;\n  padding: 1.5rem;\n  background: linear-gradient(135deg, #667eea, #764ba2);\n  border-radius: 12px;\n  color: white;\n}\n\n.project-stats .stat {\n  text-align: center;\n  padding: 1rem;\n  background: rgba(255, 255, 255, 0.1);\n  border-radius: 12px;\n  backdrop-filter: blur(10px);\n  border: 1px solid rgba(255, 255, 255, 0.2);\n  transition: transform 0.3s ease;\n}\n\n.project-stats .stat:hover {\n  transform: translateY(-2px);\n  background: rgba(255, 255, 255, 0.15);\n}\n\n.project-stats .stat i {\n  font-size: 1.5rem;\n  margin-bottom: 0.5rem;\n  color: #ffd700;\n  display: block;\n}\n\n.project-stats .stat-value {\n  font-size: 1.5rem;\n  font-weight: bold;\n  margin-bottom: 0.25rem;\n  display: block;\n}\n\n.project-stats .stat-label {\n  font-size: 0.9rem;\n  opacity: 0.9;\n}\n\n.stat {\n  display: flex;\n  align-items: center;\n  color: #666;\n}\n\n.stat i {\n  margin-right: 0.5rem;\n  color: #6a11cb;\n}\n\n.project-description {\n  line-height: 1.8;\n  color: #444;\n  margin-bottom: 2rem;\n  font-size: 1.1rem;\n  padding: 1.5rem;\n  background: #f8f9fa;\n  border-radius: 12px;\n  border-left: 4px solid #667eea;\n  position: relative;\n}\n\n.project-description.collapsed {\n  max-height: 150px;\n  overflow: hidden;\n}\n\n.project-description.expanded {\n  max-height: none;\n}\n\n.description-expand-btn {\n  position: absolute;\n  bottom: 10px;\n  right: 15px;\n  background: #6a11cb;\n  color: white;\n  border: none;\n  padding: 8px 12px;\n  border-radius: 20px;\n  cursor: pointer;\n  font-size: 0.9rem;\n  transition: all 0.3s ease;\n}\n\n.description-expand-btn:hover {\n  background: #5a01a7;\n  transform: translateY(-1px);\n}\n\n/* Project Actions */\n.project-actions {\n  display: flex;\n  gap: 1rem;\n  margin-bottom: 2rem;\n  flex-wrap: wrap;\n}\n\n.action-btn {\n  padding: 0.75rem 1.5rem;\n  border: none;\n  border-radius: 8px;\n  font-size: 0.9rem;\n  font-weight: 500;\n  cursor: pointer;\n  transition: all 0.3s ease;\n  display: inline-flex;\n  align-items: center;\n}\n\n.action-btn i {\n  margin-right: 0.5rem;\n}\n\n.vote-btn {\n  background: #28a745;\n  color: white;\n}\n\n.vote-btn:hover {\n  background: #218838;\n  transform: translateY(-2px);\n}\n\n.vote-btn.voted {\n  background: #007bff;\n}\n\n.collab-btn {\n  background: #17a2b8;\n  color: white;\n}\n\n.collab-btn:hover {\n  background: #138496;\n  transform: translateY(-2px);\n}\n\n.donate-btn {\n  background: #dc3545;\n  color: white;\n}\n\n.donate-btn:hover {\n  background: #c82333;\n  transform: translateY(-2px);\n}\n\n.action-btn:disabled {\n  opacity: 0.6;\n  cursor: not-allowed;\n  transform: none;\n}\n\n/* Comments Section */\n.comments-section {\n  border-top: 1px solid #e0e0e0;\n  padding-top: 2rem;\n}\n\n.comments-section h3 {\n  margin-bottom: 1.5rem;\n  color: #1c1c1c;\n}\n\n.add-comment {\n  margin-bottom: 2rem;\n}\n\n.add-comment textarea {\n  width: 100%;\n  padding: 0.75rem;\n  border: 1px solid #ddd;\n  border-radius: 8px;\n  resize: vertical;\n  margin-bottom: 1rem;\n}\n\n.submit-comment-btn {\n  background: linear-gradient(to right, #6a11cb, #2575fc);\n  color: white;\n  padding: 0.5rem 1rem;\n  border: none;\n  border-radius: 6px;\n  cursor: pointer;\n  transition: all 0.3s ease;\n  display: inline-flex;\n  align-items: center;\n}\n\n.submit-comment-btn i {\n  margin-right: 0.5rem;\n}\n\n.submit-comment-btn:hover {\n  background: linear-gradient(to right, #5a01a7, #1b5dff);\n}\n\n.comments-list {\n  display: flex;\n  flex-direction: column;\n  gap: 1rem;\n}\n\n.comment-item {\n  background: #f8f9fa;\n  padding: 1rem;\n  border-radius: 8px;\n  border-left: 3px solid #6a11cb;\n}\n\n.comment-author {\n  font-weight: 600;\n  color: #1c1c1c;\n  margin-bottom: 0.5rem;\n}\n\n.comment-content {\n  color: #555;\n  line-height: 1.5;\n  margin-bottom: 0.5rem;\n}\n\n.comment-date {\n  color: #999;\n  font-size: 0.8rem;\n}\n\n/* Comment Actions and Reactions */\n.comment-actions {\n  display: flex;\n  gap: 0.5rem;\n  margin-top: 0.75rem;\n  align-items: center;\n}\n\n.comment-actions .reaction-btn,\n.comment-actions .comment-reply-btn {\n  background: none;\n  border: 1px solid #ddd;\n  border-radius: 20px;\n  padding: 0.3rem 0.6rem;\n  color: #666;\n  cursor: pointer;\n  transition: all 0.3s ease;\n  display: flex;\n  align-items: center;\n  gap: 0.3rem;\n  font-size: 0.85rem;\n}\n\n.comment-actions .reaction-btn:hover,\n.comment-actions .comment-reply-btn:hover {\n  background: #f0f0f0;\n  border-color: #6a11cb;\n  color: #6a11cb;\n}\n\n.comment-actions .reaction-btn.active {\n  background: #6a11cb;\n  border-color: #6a11cb;\n  color: white;\n}\n\n.comment-replies {\n  margin-left: 1.5rem;\n  margin-top: 0.75rem;\n  padding-left: 1rem;\n  border-left: 2px solid #eee;\n}\n\n\n\n/* Active reaction button styles */\n.reaction-btn.active {\n  background: rgba(106, 17, 203, 0.1);\n  color: #6a11cb;\n  transform: scale(1.05);\n  font-weight: 600;\n}\n\n.reaction-btn.active:hover {\n  background: rgba(106, 17, 203, 0.2);\n  color: #5a01a7;\n}\n\n/* Remove reply-related styles since replies are disabled */\n\n.comment-reply {\n  background: #f1f3f4;\n  padding: 0.5rem;\n  border-radius: 6px;\n  margin-bottom: 0.5rem;\n  border-left: 3px solid #6a11cb;\n}\n\n.comment-reply .comment-author {\n  font-size: 0.85rem;\n  margin-bottom: 0.25rem;\n}\n\n.comment-reply .comment-content {\n  font-size: 0.9rem;\n  margin-bottom: 0.25rem;\n}\n\n.comment-reply .comment-date {\n  font-size: 0.75rem;\n}\n\n/* Form Elements in Modals */\n.modal input,\n.modal textarea {\n  width: 100%;\n  padding: 0.75rem;\n  border: 1px solid #ddd;\n  border-radius: 8px;\n  margin-bottom: 1rem;\n  transition: border-color 0.3s ease;\n}\n\n.modal input:focus,\n.modal textarea:focus {\n  outline: none;\n  border-color: #6a11cb;\n}\n\n.modal label {\n  display: block;\n  margin-bottom: 0.5rem;\n  font-weight: 600;\n  color: #333;\n}\n\n.modal-actions {\n  margin-top: 1.5rem;\n}\n\n/* Animation Keyframes */\n@keyframes fadeIn {\n  from { opacity: 0; }\n  to { opacity: 1; }\n}\n\n@keyframes slideUp {\n  from {\n    transform: translateY(50px);\n    opacity: 0;\n  }\n  to {\n    transform: translateY(0);\n    opacity: 1;\n  }\n}\n\n/* Responsive Design */\n@media (max-width: 768px) {\n  .page-header-section {\n    padding: 2rem 1rem;\n  }\n  \n  .header-content h1 {\n    font-size: 2rem;\n  }\n  \n  .header-content p {\n    font-size: 1.1rem;\n    margin-bottom: 2rem;\n  }\n  \n  .header-stats {\n    gap: 1rem;\n  }\n  \n  .stat-item {\n    min-width: 120px;\n    padding: 1rem 1.5rem;\n  }\n  \n  .stat-number {\n    font-size: 2rem;\n  }\n  \n  .filters-container {\n    flex-direction: column;\n    gap: 1rem;\n  }\n  \n  .search-bar {\n    min-width: auto;\n    max-width: 100%;\n  }\n  \n  .search-bar input {\n    min-height: 44px;\n  }\n  \n  .filter-controls {\n    width: 100%;\n    justify-content: space-between;\n  }\n  \n  .filter-controls select {\n    min-height: 44px;\n    min-width: 120px;\n    flex: 1;\n  }\n  \n  .projects-grid {\n    grid-template-columns: 1fr;\n  }\n  \n  .project-actions {\n    flex-direction: column;\n  }\n  \n  .action-btn {\n    justify-content: center;\n  }\n  \n  .modal-content {\n    width: 95%;\n    margin: 1rem;\n  }\n  \n  .modal-body {\n    padding: 1rem;\n  }\n  \n  .project-stats {\n    justify-content: space-between;\n  }\n  \n  .project-card {\n    min-height: 280px;\n    padding: 1.5rem;\n  }\n  \n  .project-description.truncated {\n    -webkit-line-clamp: 3;\n  }\n}\n\n/* Additional responsive breakpoints for better expandability */\n@media (max-width: 1200px) {\n  .projects-grid {\n    grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));\n  }\n}\n\n@media (max-width: 500px) {\n  .project-card {\n    margin: 0 0.5rem;\n  }\n}\n\n/* Comment Action Buttons */\n.comment-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 0.75rem;\n}\n\n.comment-actions {\n  display: flex;\n  gap: 0.25rem;\n  opacity: 0.7;\n  transition: opacity 0.2s ease;\n}\n\n.comment-item:hover .comment-actions {\n  opacity: 1;\n}\n\n.edit-comment-btn, .delete-comment-btn {\n  padding: 0.25rem 0.5rem;\n  border: none;\n  border-radius: 6px;\n  cursor: pointer;\n  font-size: 0.875rem;\n  transition: all 0.2s ease;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.edit-comment-btn {\n  background: #f3f4f6;\n  color: #6b7280;\n}\n\n.edit-comment-btn:hover {\n  background: #3b82f6;\n  color: white;\n}\n\n.delete-comment-btn {\n  background: #f3f4f6;\n  color: #6b7280;\n}\n\n.delete-comment-btn:hover {\n  background: #ef4444;\n  color: white;\n}\n\n/* Comment Edit Form */\n.comment-edit-form {\n  margin-top: 0.5rem;\n}\n\n.edit-comment-textarea {\n  width: 100%;\n  border: 1px solid #d1d5db;\n  border-radius: 8px;\n  padding: 0.75rem;\n  font-family: inherit;\n  font-size: 0.875rem;\n  resize: vertical;\n}\n\n.comment-edit-actions {\n  display: flex;\n  gap: 0.5rem;\n  margin-top: 0.5rem;\n}\n\n.save-comment-btn, .cancel-comment-btn {\n  padding: 0.5rem 1rem;\n  border: none;\n  border-radius: 6px;\n  cursor: pointer;\n  font-size: 0.875rem;\n  font-weight: 500;\n  transition: all 0.2s ease;\n  display: flex;\n  align-items: center;\n  gap: 0.25rem;\n}\n\n.save-comment-btn {\n  background: #10b981;\n  color: white;\n}\n\n.save-comment-btn:hover {\n  background: #059669;\n}\n\n.cancel-comment-btn {\n  background: #f3f4f6;\n  color: #6b7280;\n  border: 1px solid #d1d5db;\n}\n\n.cancel-comment-btn:hover {\n  background: #e5e7eb;\n}\n\n.edit-indicator {\n  font-size: 0.75rem;\n  color: #6b7280;\n}\n","size_bytes":20062},"static/dashboard.css":{"content":"/* Dashboard Specific Styles */\nbody {\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 25%, #f093fb 50%, #f5576c 75%, #4facfe 100%);\n  background-size: 400% 400%;\n  animation: gradientShift 15s ease infinite;\n  color: #333;\n  min-height: 100vh;\n}\n\n@keyframes gradientShift {\n  0% { background-position: 0% 50%; }\n  50% { background-position: 100% 50%; }\n  100% { background-position: 0% 50%; }\n}\n\n.dashboard-container {\n  display: flex;\n  min-height: calc(100vh - 80px);\n}\n\n/* Sidebar */\n.sidebar {\n  width: 300px;\n  background: rgba(255, 255, 255, 0.95);\n  backdrop-filter: blur(20px);\n  box-shadow: 8px 0 32px rgba(0, 0, 0, 0.1);\n  padding: 2rem 0;\n  border-right: 1px solid rgba(255, 255, 255, 0.2);\n  border-top-right-radius: 20px;\n  border-bottom-right-radius: 20px;\n  position: relative;\n}\n\n.sidebar::before {\n  content: '';\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  height: 4px;\n  background: linear-gradient(90deg, #667eea, #764ba2, #f093fb);\n  border-top-right-radius: 20px;\n}\n\n.sidebar-nav {\n  display: flex;\n  flex-direction: column;\n}\n\n.nav-item {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 1.2rem 2rem;\n  color: #666;\n  text-decoration: none;\n  transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);\n  border-left: 4px solid transparent;\n  margin: 0.5rem 1rem;\n  position: relative;\n  border-radius: 12px;\n  font-weight: 500;\n  overflow: hidden;\n}\n\n.nav-item::before {\n  content: '';\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 0;\n  height: 100%;\n  background: linear-gradient(135deg, rgba(106, 17, 203, 0.1), rgba(37, 117, 252, 0.1));\n  transition: width 0.3s ease;\n  z-index: -1;\n}\n\n.nav-item:hover {\n  background: #f8f9fa;\n  color: #6a11cb;\n  transform: translateX(8px);\n  box-shadow: 4px 4px 20px rgba(106, 17, 203, 0.15);\n}\n\n.nav-item:hover::before {\n  width: 100%;\n}\n\n.nav-item.active {\n  background: linear-gradient(135deg, rgba(106, 17, 203, 0.15), rgba(37, 117, 252, 0.15));\n  color: #6a11cb;\n  border-left-color: #6a11cb;\n  box-shadow: inset 0 0 20px rgba(106, 17, 203, 0.1), 4px 4px 20px rgba(106, 17, 203, 0.2);\n  transform: translateX(4px);\n}\n\n.nav-item.active::before {\n  width: 100%;\n}\n\n.notification-count {\n  background: linear-gradient(135deg, #ff6b6b, #ee5a5a);\n  color: white;\n  font-size: 0.75rem;\n  font-weight: bold;\n  padding: 0.25rem 0.5rem;\n  border-radius: 12px;\n  min-width: 20px;\n  text-align: center;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);\n  animation: pulse 2s infinite;\n  position: absolute;\n  right: 1rem;\n  top: 50%;\n  transform: translateY(-50%);\n}\n\n@keyframes pulse {\n  0% { transform: translateY(-50%) scale(1); }\n  50% { transform: translateY(-50%) scale(1.1); }\n  100% { transform: translateY(-50%) scale(1); }\n}\n\n.notification-count:empty,\n.notification-count[data-count=\"0\"] {\n  display: none !important;\n}\n\n/* Show notification badge when count is greater than 0 */\n.notification-count:not(:empty):not([data-count=\"0\"]) {\n  display: inline-block !important;\n}\n\n/* Sidebar improvements */\n.sidebar-nav {\n  display: flex;\n  flex-direction: column;\n  padding: 0;\n}\n\n.nav-item {\n  display: flex;\n  align-items: center;\n  padding: 1.2rem 2rem;\n  color: #666;\n  text-decoration: none;\n  transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);\n  border-left: 4px solid transparent;\n  margin: 0.3rem 1rem;\n  position: relative;\n  border-radius: 12px;\n  font-weight: 500;\n  overflow: hidden;\n  cursor: pointer;\n}\n\n.nav-item-content {\n  display: flex;\n  align-items: center;\n  flex: 1;\n}\n\n.nav-item .notification-count {\n  margin-left: auto;\n}\n\n.nav-item i {\n  margin-right: 12px;\n  width: 20px;\n  text-align: center;\n}\n\n/* Main Content */\n.main-content {\n  flex: 1;\n  padding: 2rem;\n  overflow-y: auto;\n  background: rgba(255, 255, 255, 0.05);\n  backdrop-filter: blur(10px);\n}\n\n.content-section {\n  display: none;\n}\n\n.content-section.active {\n  display: block;\n}\n\n.section-header {\n  margin-bottom: 2rem;\n}\n\n.section-header h2 {\n  color: #ffffff;\n  margin-bottom: 0.5rem;\n  display: flex;\n  align-items: center;\n}\n\n.section-header h2 i {\n  margin-right: 12px;\n  color: #6a11cb;\n}\n\n.section-header p {\n  color: rgba(255, 255, 255, 0.8);\n  margin: 0;\n}\n\n/* Stats Grid */\n.stats-grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n  gap: 1.5rem;\n  margin-bottom: 3rem;\n}\n\n.stat-card {\n  background: rgba(255, 255, 255, 0.95);\n  backdrop-filter: blur(20px);\n  padding: 2rem;\n  border-radius: 20px;\n  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);\n  display: flex;\n  align-items: center;\n  transition: all 0.4s ease;\n  border: 1px solid rgba(255, 255, 255, 0.2);\n  position: relative;\n  overflow: hidden;\n}\n\n.stat-card::before {\n  content: '';\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  height: 4px;\n  background: linear-gradient(90deg, #667eea, #764ba2);\n}\n\n.stat-card.projects-card::before {\n  background: linear-gradient(90deg, #4facfe, #00f2fe);\n}\n\n.stat-card.funding-card::before {\n  background: linear-gradient(90deg, #43e97b, #38f9d7);\n}\n\n.stat-card.votes-card::before {\n  background: linear-gradient(90deg, #fa709a, #fee140);\n}\n\n.stat-card.collabs-card::before {\n  background: linear-gradient(90deg, #a8edea, #fed6e3);\n}\n\n.stat-card:hover {\n  transform: translateY(-8px);\n  box-shadow: 0 16px 48px rgba(0, 0, 0, 0.15);\n}\n\n.stat-info {\n  display: flex;\n  flex-direction: column;\n}\n\n.stat-trend {\n  font-size: 0.8rem;\n  font-weight: 500;\n  margin-top: 0.25rem;\n  padding: 0.15rem 0.5rem;\n  border-radius: 15px;\n  display: inline-block;\n}\n\n.stat-trend.positive {\n  color: #28a745;\n  background: rgba(40, 167, 69, 0.1);\n}\n\n.stat-trend.positive::before {\n  content: '↗';\n  margin-right: 0.25rem;\n}\n\n.stat-trend.neutral {\n  color: #6c757d;\n  background: rgba(108, 117, 125, 0.1);\n}\n\n.stat-trend.neutral::before {\n  content: '→';\n  margin-right: 0.25rem;\n}\n\n.stat-icon {\n  width: 60px;\n  height: 60px;\n  border-radius: 50%;\n  background: linear-gradient(to right, #6a11cb, #2575fc);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin-right: 1.5rem;\n}\n\n.stat-icon i {\n  font-size: 1.5rem;\n  color: white;\n}\n\n.stat-info h3 {\n  font-size: 1.8rem;\n  margin: 0 0 0.25rem 0;\n  color: #1c1c1c;\n}\n\n.stat-info p {\n  margin: 0;\n  color: #666;\n  font-weight: 500;\n}\n\n/* Project Form */\n.project-form-container {\n  background: rgba(255, 255, 255, 0.95);\n  backdrop-filter: blur(20px);\n  padding: 2.5rem;\n  border-radius: 20px;\n  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);\n  max-width: 800px;\n  border: 1px solid rgba(255, 255, 255, 0.2);\n}\n\n.project-form {\n  display: flex;\n  flex-direction: column;\n  gap: 1.5rem;\n}\n\n.form-group {\n  display: flex;\n  flex-direction: column;\n}\n\n.form-group label {\n  display: flex;\n  align-items: center;\n  margin-bottom: 0.5rem;\n  font-weight: 600;\n  color: #333;\n}\n\n.form-group label i {\n  margin-right: 8px;\n  color: #6a11cb;\n  width: 16px;\n}\n\n.form-group input,\n.form-group select,\n.form-group textarea {\n  padding: 0.75rem;\n  border: 1px solid #ddd;\n  border-radius: 8px;\n  font-size: 1rem;\n  transition: border-color 0.3s ease;\n}\n\n.form-group input:focus,\n.form-group select:focus,\n.form-group textarea:focus {\n  outline: none;\n  border-color: #6a11cb;\n}\n\n.form-group textarea {\n  resize: vertical;\n  min-height: 120px;\n}\n\n.submit-btn {\n  background: linear-gradient(135deg, #6a11cb, #2575fc);\n  color: white;\n  padding: 1rem 2rem;\n  border: none;\n  border-radius: 15px;\n  font-size: 1rem;\n  font-weight: 600;\n  cursor: pointer;\n  transition: all 0.4s ease;\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  align-self: flex-start;\n  box-shadow: 0 6px 20px rgba(106, 17, 203, 0.3);\n}\n\n.submit-btn i {\n  margin-right: 8px;\n}\n\n.submit-btn:hover {\n  background: linear-gradient(135deg, #5a01a7, #1b5dff);\n  transform: translateY(-4px);\n  box-shadow: 0 10px 30px rgba(106, 17, 203, 0.4);\n}\n\n.submit-btn:disabled {\n  opacity: 0.6;\n  cursor: not-allowed;\n  transform: none;\n}\n\n/* Quick Actions */\n.quick-actions {\n  background: rgba(255, 255, 255, 0.95);\n  backdrop-filter: blur(20px);\n  padding: 2rem;\n  border-radius: 20px;\n  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);\n  margin-bottom: 2rem;\n  border: 1px solid rgba(255, 255, 255, 0.2);\n}\n\n.quick-actions h3 {\n  margin-bottom: 1.5rem;\n  color: #333;\n  font-weight: 600;\n}\n\n.action-buttons {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n  gap: 1rem;\n}\n\n.quick-action-btn {\n  display: flex;\n  align-items: center;\n  gap: 0.75rem;\n  padding: 1rem 1.5rem;\n  background: linear-gradient(135deg, #667eea, #764ba2);\n  color: white;\n  border: none;\n  border-radius: 15px;\n  cursor: pointer;\n  transition: all 0.3s ease;\n  font-weight: 500;\n  box-shadow: 0 4px 15px rgba(102, 126, 234, 0.3);\n}\n\n.quick-action-btn:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 8px 25px rgba(102, 126, 234, 0.4);\n}\n\n.quick-action-btn i {\n  font-size: 1.2rem;\n}\n\n/* Recent Activity */\n.recent-activity {\n  background: rgba(255, 255, 255, 0.95);\n  backdrop-filter: blur(20px);\n  padding: 2rem;\n  border-radius: 20px;\n  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);\n  border: 1px solid rgba(255, 255, 255, 0.2);\n}\n\n.recent-activity h3 {\n  margin-bottom: 1.5rem;\n  color: #1c1c1c;\n}\n\n.activity-list {\n  display: flex;\n  flex-direction: column;\n  gap: 1rem;\n}\n\n.activity-item {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 1rem;\n  background: rgba(255, 255, 255, 0.9);\n  backdrop-filter: blur(15px);\n  border-radius: 16px;\n  border-left: 4px solid #6a11cb;\n  border: 1px solid rgba(255, 255, 255, 0.2);\n  transition: all 0.3s ease;\n}\n\n.activity-item:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 8px 20px rgba(0, 0, 0, 0.1);\n  background: rgba(255, 255, 255, 0.95);\n}\n\n.activity-info h4 {\n  margin: 0 0 0.25rem 0;\n  color: #1c1c1c;\n}\n\n.activity-info p {\n  margin: 0;\n  color: #666;\n  font-size: 0.9rem;\n}\n\n.activity-stats {\n  display: flex;\n  gap: 1rem;\n  color: #666;\n  font-size: 0.9rem;\n}\n\n.activity-stat {\n  display: flex;\n  align-items: center;\n}\n\n.activity-stat i {\n  margin-right: 0.25rem;\n  color: #6a11cb;\n}\n\n/* Notifications Section */\n.notifications-container {\n  background: rgba(255, 255, 255, 0.95);\n  backdrop-filter: blur(20px);\n  border-radius: 20px;\n  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);\n  border: 1px solid rgba(255, 255, 255, 0.2);\n  overflow: hidden;\n}\n\n.notification-controls {\n  display: flex;\n  gap: 1rem;\n  margin-top: 1rem;\n}\n\n.notification-filters {\n  display: flex;\n  gap: 0.5rem;\n  padding: 1.5rem;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.05);\n  flex-wrap: wrap;\n}\n\n.filter-btn {\n  padding: 0.5rem 1rem;\n  border: 1px solid #ddd;\n  background: white;\n  color: #666;\n  border-radius: 25px;\n  cursor: pointer;\n  transition: all 0.3s ease;\n  font-size: 0.9rem;\n}\n\n.filter-btn.active {\n  background: linear-gradient(135deg, #667eea, #764ba2);\n  color: white;\n  border-color: transparent;\n  box-shadow: 0 2px 8px rgba(102, 126, 234, 0.3);\n}\n\n.filter-btn:hover {\n  background: linear-gradient(135deg, #667eea, #764ba2);\n  color: white;\n  border-color: transparent;\n}\n\n.notifications-list {\n  max-height: 500px;\n  overflow-y: auto;\n}\n\n.notification-item {\n  display: flex;\n  align-items: flex-start;\n  padding: 1.5rem;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.05);\n  transition: all 0.3s ease;\n  position: relative;\n}\n\n.notification-item:hover {\n  background: rgba(102, 126, 234, 0.05);\n}\n\n.notification-item.unread {\n  background: rgba(102, 126, 234, 0.02);\n  border-left: 4px solid #667eea;\n}\n\n.notification-icon {\n  width: 40px;\n  height: 40px;\n  border-radius: 50%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin-right: 1rem;\n  font-size: 1.1rem;\n  flex-shrink: 0;\n}\n\n.notification-icon.like {\n  background: linear-gradient(135deg, #ff6b6b, #ee5a5a);\n  color: white;\n}\n\n.notification-icon.comment {\n  background: linear-gradient(135deg, #4ecdc4, #44a08d);\n  color: white;\n}\n\n.notification-icon.collaboration {\n  background: linear-gradient(135deg, #45b7d1, #96c93d);\n  color: white;\n}\n\n.notification-icon.project {\n  background: linear-gradient(135deg, #f093fb, #f5576c);\n  color: white;\n}\n\n.notification-content {\n  flex: 1;\n}\n\n.notification-title {\n  font-weight: 600;\n  color: #333;\n  margin-bottom: 0.25rem;\n}\n\n.notification-message {\n  color: #666;\n  line-height: 1.5;\n  margin-bottom: 0.5rem;\n}\n\n.notification-time {\n  font-size: 0.8rem;\n  color: #999;\n}\n\n.notification-actions {\n  display: flex;\n  gap: 0.5rem;\n  margin-top: 0.75rem;\n}\n\n.notification-action {\n  padding: 0.25rem 0.75rem;\n  border: 1px solid #ddd;\n  background: white;\n  color: #666;\n  border-radius: 15px;\n  cursor: pointer;\n  transition: all 0.3s ease;\n  font-size: 0.8rem;\n}\n\n.notification-action:hover {\n  background: #667eea;\n  color: white;\n  border-color: #667eea;\n}\n\n/* User Projects Grid - Enhanced Layout */\n.projects-grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(380px, 1fr));\n  gap: 2rem;\n  margin-top: 1.5rem;\n}\n\n@media (max-width: 768px) {\n  .projects-grid {\n    grid-template-columns: 1fr;\n    gap: 1.5rem;\n  }\n  \n  .user-project-card {\n    min-height: auto;\n    padding: 2rem;\n  }\n}\n\n.user-project-card {\n  background: rgba(255, 255, 255, 0.98);\n  backdrop-filter: blur(20px);\n  border-radius: 24px;\n  padding: 2.5rem;\n  box-shadow: 0 12px 40px rgba(0, 0, 0, 0.08);\n  transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);\n  border: 1px solid rgba(255, 255, 255, 0.3);\n  cursor: pointer;\n  position: relative;\n  min-height: 320px;\n  display: flex;\n  flex-direction: column;\n}\n\n.user-project-card:hover {\n  transform: translateY(-12px) scale(1.02);\n  box-shadow: 0 20px 60px rgba(106, 17, 203, 0.2);\n  border-color: rgba(106, 17, 203, 0.3);\n}\n\n.user-project-card::before {\n  content: '';\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  height: 4px;\n  background: linear-gradient(90deg, #6a11cb, #2575fc);\n  border-radius: 24px 24px 0 0;\n  opacity: 0;\n  transition: opacity 0.3s ease;\n}\n\n.user-project-card:hover::before {\n  opacity: 1;\n}\n\n.project-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: flex-start;\n  margin-bottom: 1.5rem;\n}\n\n.project-header h3 {\n  margin: 0;\n  font-size: 1.4rem;\n  font-weight: 700;\n  color: #1a1a1a;\n  line-height: 1.3;\n  max-width: 70%;\n}\n\n.project-meta {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 1.25rem;\n  font-size: 0.9rem;\n  color: #666;\n}\n\n.project-category {\n  background: linear-gradient(135deg, #6a11cb, #2575fc);\n  color: white;\n  padding: 0.4rem 1rem;\n  border-radius: 20px;\n  font-weight: 500;\n  font-size: 0.8rem;\n  text-transform: uppercase;\n  letter-spacing: 0.5px;\n}\n\n.project-description {\n  color: #555;\n  line-height: 1.6;\n  margin-bottom: 1.5rem;\n  font-size: 0.95rem;\n  flex-grow: 1;\n}\n\n.project-stats {\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  gap: 1rem;\n  margin-bottom: 1.5rem;\n  padding: 1.25rem;\n  background: rgba(106, 17, 203, 0.03);\n  border-radius: 16px;\n  border: 1px solid rgba(106, 17, 203, 0.1);\n}\n\n.project-stat {\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n  font-size: 0.9rem;\n  color: #444;\n}\n\n.project-stat i {\n  color: #6a11cb;\n  font-size: 1rem;\n  width: 16px;\n  text-align: center;\n}\n\n.project-view-details {\n  background: linear-gradient(135deg, #6a11cb, #2575fc);\n  color: white;\n  padding: 0.875rem 1.5rem;\n  border-radius: 16px;\n  text-align: center;\n  font-weight: 600;\n  font-size: 0.95rem;\n  transition: all 0.3s ease;\n  border: none;\n  cursor: pointer;\n  margin-top: auto;\n  position: relative;\n  overflow: hidden;\n}\n\n.project-view-details::before {\n  content: '';\n  position: absolute;\n  top: 0;\n  left: -100%;\n  width: 100%;\n  height: 100%;\n  background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);\n  transition: left 0.5s ease;\n}\n\n.user-project-card:hover .project-view-details::before {\n  left: 100%;\n}\n\n.project-view-details:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 8px 20px rgba(106, 17, 203, 0.4);\n}\n\n.project-status {\n  padding: 0.25rem 0.75rem;\n  border-radius: 20px;\n  font-size: 0.8rem;\n  font-weight: 500;\n}\n\n.project-status.active {\n  background: #d4edda;\n  color: #155724;\n}\n\n.project-status.completed {\n  background: #cce5ff;\n  color: #004085;\n}\n\n.project-status.paused {\n  background: #fff3cd;\n  color: #856404;\n}\n\n/* Collaborations */\n.collaborations-list {\n  display: flex;\n  flex-direction: column;\n  gap: 1rem;\n}\n\n.collaboration-item {\n  background: rgba(255, 255, 255, 0.95);\n  backdrop-filter: blur(20px);\n  padding: 2rem;\n  border-radius: 20px;\n  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);\n  border: 1px solid rgba(255, 255, 255, 0.2);\n  transition: all 0.3s ease;\n}\n\n.collaboration-item:hover {\n  transform: translateY(-4px);\n  box-shadow: 0 12px 40px rgba(0, 0, 0, 0.15);\n}\n\n.collaboration-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 1rem;\n}\n\n.collaboration-user {\n  display: flex;\n  align-items: center;\n}\n\n.collaboration-user i {\n  margin-right: 0.5rem;\n  color: #6a11cb;\n}\n\n.collaboration-status {\n  padding: 0.25rem 0.75rem;\n  border-radius: 20px;\n  font-size: 0.8rem;\n  font-weight: 500;\n}\n\n.collaboration-status.pending {\n  background: #fff3cd;\n  color: #856404;\n}\n\n.collaboration-status.accepted {\n  background: #d4edda;\n  color: #155724;\n}\n\n.collaboration-status.rejected {\n  background: #f8d7da;\n  color: #721c24;\n}\n\n.collaboration-message {\n  color: #666;\n  font-style: italic;\n  margin-bottom: 1rem;\n}\n\n.collaboration-actions {\n  display: flex;\n  gap: 0.5rem;\n}\n\n.action-btn {\n  padding: 0.5rem 1rem;\n  border: none;\n  border-radius: 6px;\n  font-size: 0.9rem;\n  cursor: pointer;\n  transition: all 0.3s ease;\n}\n\n.action-btn.accept {\n  background: #28a745;\n  color: white;\n}\n\n.action-btn.reject {\n  background: #dc3545;\n  color: white;\n}\n\n.action-btn:hover {\n  transform: translateY(-1px);\n}\n\n/* Empty States */\n.empty-state {\n  text-align: center;\n  padding: 3rem;\n  color: #666;\n}\n\n.empty-state i {\n  font-size: 3rem;\n  color: #ddd;\n  margin-bottom: 1rem;\n}\n\n.empty-state h3 {\n  margin-bottom: 0.5rem;\n  color: #999;\n}\n\n/* Message Container */\n.message-container {\n  position: fixed;\n  top: 20px;\n  right: 20px;\n  z-index: 10000;\n}\n\n.message {\n  background: white;\n  color: #333;\n  padding: 1rem 1.5rem;\n  border-radius: 8px;\n  margin-bottom: 10px;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\n  border-left: 4px solid #6a11cb;\n  animation: slideIn 0.3s ease;\n}\n\n.message.success {\n  border-left-color: #28a745;\n}\n\n.message.error {\n  border-left-color: #dc3545;\n}\n\n/* Responsive Design */\n@media (max-width: 768px) {\n  .dashboard-container {\n    flex-direction: column;\n  }\n  \n  .sidebar {\n    width: 100%;\n    padding: 1rem 0;\n  }\n  \n  .sidebar-nav {\n    flex-direction: row;\n    overflow-x: auto;\n  }\n  \n  .nav-item {\n    white-space: nowrap;\n    border-left: none;\n    border-bottom: 3px solid transparent;\n  }\n  \n  .nav-item.active {\n    border-left: none;\n    border-bottom-color: #6a11cb;\n  }\n  \n  .main-content {\n    padding: 1rem;\n  }\n  \n  .stats-grid {\n    grid-template-columns: 1fr;\n  }\n  \n  .projects-grid {\n    grid-template-columns: 1fr;\n  }\n}\n\n/* Word count styling */\n.word-count {\n  display: block;\n  margin-top: 0.5rem;\n  font-size: 0.875rem;\n  color: #dc3545;\n  font-weight: bold;\n  transition: color 0.3s ease;\n}\n\n.word-count.valid {\n  color: #28a745;\n  font-weight: normal;\n}\n\n/* File Upload Styles */\n.file-upload-area {\n  border: 2px dashed #ddd;\n  border-radius: 8px;\n  padding: 2rem;\n  text-align: center;\n  background: #f9f9f9;\n  transition: all 0.3s ease;\n  cursor: pointer;\n}\n\n.file-upload-area:hover,\n.file-upload-area.dragover {\n  border-color: #6a11cb;\n  background: rgba(106, 17, 203, 0.05);\n}\n\n.file-upload-content i {\n  font-size: 2rem;\n  color: #6a11cb;\n  margin-bottom: 1rem;\n  display: block;\n}\n\n.file-upload-content p {\n  margin: 0.5rem 0;\n  color: #333;\n  font-size: 1rem;\n}\n\n.file-browse-btn {\n  background: none;\n  border: none;\n  color: #6a11cb;\n  text-decoration: underline;\n  cursor: pointer;\n  font-size: inherit;\n}\n\n.file-browse-btn:hover {\n  color: #5a01a7;\n}\n\n.selected-files {\n  margin-top: 1rem;\n}\n\n.file-item {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 0.75rem;\n  background: #f0f0f0;\n  border-radius: 6px;\n  margin-bottom: 0.5rem;\n}\n\n.file-info {\n  display: flex;\n  align-items: center;\n  gap: 0.75rem;\n}\n\n.file-icon {\n  font-size: 1.2rem;\n  color: #6a11cb;\n}\n\n.file-details h4 {\n  margin: 0;\n  font-size: 0.9rem;\n  color: #333;\n}\n\n.file-details p {\n  margin: 0.25rem 0 0 0;\n  font-size: 0.8rem;\n  color: #666;\n}\n\n.file-remove {\n  background: #ff4444;\n  color: white;\n  border: none;\n  border-radius: 50%;\n  width: 24px;\n  height: 24px;\n  cursor: pointer;\n  font-size: 0.8rem;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.file-remove:hover {\n  background: #cc0000;\n}\n\n/* Form styling improvements */\n.form-group small {\n  display: block;\n  margin-top: 0.25rem;\n  font-size: 0.875rem;\n  color: #666;\n}\n\n/* Team Section Styling */\n.team-grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\n  gap: 1.5rem;\n}\n\n.team-member-card {\n  background: rgba(255, 255, 255, 0.95);\n  backdrop-filter: blur(20px);\n  border-radius: 20px;\n  padding: 2rem;\n  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);\n  transition: all 0.4s ease;\n  border: 1px solid rgba(255, 255, 255, 0.2);\n  text-align: center;\n}\n\n.team-member-card:hover {\n  transform: translateY(-8px);\n  box-shadow: 0 16px 48px rgba(0, 0, 0, 0.15);\n}\n\n.member-avatar {\n  width: 80px;\n  height: 80px;\n  border-radius: 50%;\n  background: linear-gradient(135deg, #6a11cb, #2575fc);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin: 0 auto 1.5rem;\n  color: white;\n  font-size: 2rem;\n}\n\n.member-info h3 {\n  color: #333;\n  margin-bottom: 0.5rem;\n  font-size: 1.2rem;\n}\n\n.member-username {\n  color: #666;\n  font-style: italic;\n  margin-bottom: 0.5rem;\n}\n\n.member-college,\n.member-email {\n  color: #777;\n  font-size: 0.9rem;\n  margin-bottom: 0.5rem;\n}\n\n.member-actions {\n  margin-top: 1.5rem;\n  display: flex;\n  justify-content: center;\n}\n\n.message-btn {\n  background: linear-gradient(135deg, #28a745, #20c997);\n  color: white;\n  padding: 0.75rem 1.5rem;\n  border: none;\n  border-radius: 25px;\n  display: inline-flex;\n  align-items: center;\n  gap: 0.5rem;\n  font-weight: 500;\n  cursor: pointer;\n  transition: all 0.3s ease;\n  box-shadow: 0 4px 15px rgba(40, 167, 69, 0.3);\n  font-size: 0.95rem;\n}\n\n.message-btn:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 8px 25px rgba(40, 167, 69, 0.4);\n}\n\n/* Team Chat Modal */\n.team-chat-modal {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background: rgba(0, 0, 0, 0.8);\n  display: none;\n  justify-content: center;\n  align-items: center;\n  z-index: 1000;\n}\n\n.team-chat-modal.show {\n  display: flex;\n}\n\n.chat-container {\n  background: white;\n  border-radius: 20px;\n  width: 90%;\n  max-width: 500px;\n  max-height: 80vh;\n  display: flex;\n  flex-direction: column;\n  box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);\n}\n\n.chat-header {\n  padding: 1.5rem;\n  border-bottom: 1px solid #eee;\n  border-radius: 20px 20px 0 0;\n  background: linear-gradient(135deg, #667eea, #764ba2);\n  color: white;\n}\n\n.chat-messages {\n  flex: 1;\n  padding: 1rem;\n  overflow-y: auto;\n  max-height: 400px;\n}\n\n.chat-message {\n  margin-bottom: 1rem;\n  padding: 0.75rem;\n  border-radius: 15px;\n  background: #f8f9fa;\n  border-left: 4px solid #667eea;\n}\n\n.chat-message.own {\n  background: #e3f2fd;\n  border-left-color: #2196f3;\n  margin-left: 2rem;\n}\n\n.message-sender {\n  font-weight: 600;\n  color: #333;\n  font-size: 0.9rem;\n  margin-bottom: 0.25rem;\n}\n\n.message-text {\n  color: #555;\n  line-height: 1.4;\n}\n\n.message-time {\n  font-size: 0.8rem;\n  color: #999;\n  margin-top: 0.25rem;\n}\n\n.chat-input {\n  padding: 1rem;\n  border-top: 1px solid #eee;\n  border-radius: 0 0 20px 20px;\n  background: #f8f9fa;\n}\n\n.chat-input-group {\n  display: flex;\n  gap: 0.5rem;\n}\n\n.chat-input-group input {\n  flex: 1;\n  padding: 0.75rem;\n  border: 2px solid #ddd;\n  border-radius: 25px;\n  outline: none;\n  font-size: 1rem;\n}\n\n.chat-input-group input:focus {\n  border-color: #667eea;\n}\n\n.send-message-btn {\n  background: linear-gradient(135deg, #667eea, #764ba2);\n  color: white;\n  border: none;\n  border-radius: 50%;\n  width: 45px;\n  height: 45px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n  transition: all 0.3s ease;\n}\n\n.send-message-btn:hover {\n  transform: scale(1.05);\n  box-shadow: 0 4px 15px rgba(102, 126, 234, 0.4);\n}\n\n/* Chat Sidebar Styles */\n.chat-sidebar {\n  position: fixed;\n  top: 0;\n  right: -400px;\n  width: 400px;\n  height: 100vh;\n  background: white;\n  border-left: 2px solid #eee;\n  box-shadow: -5px 0 20px rgba(0, 0, 0, 0.1);\n  display: flex;\n  flex-direction: column;\n  transition: right 0.3s ease;\n  z-index: 1000;\n}\n\n.chat-sidebar.show {\n  right: 0;\n}\n\n.chat-sidebar-header {\n  padding: 1.5rem;\n  border-bottom: 2px solid #eee;\n  background: linear-gradient(135deg, #667eea, #764ba2);\n  color: white;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.chat-sidebar-header h3 {\n  margin: 0;\n  font-size: 1.3rem;\n}\n\n.close-chat-sidebar {\n  background: transparent;\n  border: none;\n  color: white;\n  font-size: 1.2rem;\n  cursor: pointer;\n  padding: 0.5rem;\n  border-radius: 50%;\n  transition: background 0.3s ease;\n}\n\n.close-chat-sidebar:hover {\n  background: rgba(255, 255, 255, 0.2);\n}\n\n.chat-participants {\n  padding: 1rem;\n  border-bottom: 1px solid #eee;\n  background: #f8f9fa;\n}\n\n.chat-participants h4 {\n  margin: 0 0 0.5rem 0;\n  font-size: 0.9rem;\n  color: #666;\n  text-transform: uppercase;\n  letter-spacing: 0.5px;\n}\n\n.participants-list {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 0.5rem;\n}\n\n.participant-badge {\n  background: linear-gradient(135deg, #667eea, #764ba2);\n  color: white;\n  padding: 0.3rem 0.8rem;\n  border-radius: 15px;\n  font-size: 0.8rem;\n  font-weight: 500;\n}\n\n.participant-badge.owner {\n  background: linear-gradient(135deg, #ff6b6b, #ee5a24);\n}\n\n.chat-messages-container {\n  flex: 1;\n  overflow: hidden;\n  display: flex;\n  flex-direction: column;\n}\n\n.chat-sidebar .chat-messages {\n  flex: 1;\n  padding: 1rem;\n  overflow-y: auto;\n  max-height: none;\n}\n\n.chat-input-area {\n  padding: 1rem;\n  border-top: 2px solid #eee;\n  background: #f8f9fa;\n}\n\n.dashboard-container.chat-open {\n  margin-right: 400px;\n  transition: margin-right 0.3s ease;\n}\n\n/* Mobile responsive for chat sidebar */\n@media (max-width: 768px) {\n  .chat-sidebar {\n    width: 100vw;\n    right: -100vw;\n  }\n  \n  .chat-sidebar.show {\n    right: 0;\n  }\n  \n  .dashboard-container.chat-open {\n    margin-right: 0;\n  }\n}\n\n/* Project Details Modal */\n.project-modal {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background: rgba(0, 0, 0, 0.8);\n  z-index: 1000;\n  display: none;\n  align-items: center;\n  justify-content: center;\n  backdrop-filter: blur(5px);\n}\n\n.project-modal.show {\n  display: flex;\n}\n\n.modal-container {\n  background: white;\n  border-radius: 20px;\n  width: 90%;\n  max-width: 700px;\n  max-height: 85vh;\n  overflow-y: auto;\n  box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);\n  animation: modalAppear 0.3s ease-out;\n}\n\n@keyframes modalAppear {\n  from {\n    opacity: 0;\n    transform: scale(0.9) translateY(-20px);\n  }\n  to {\n    opacity: 1;\n    transform: scale(1) translateY(0);\n  }\n}\n\n.modal-header {\n  padding: 2rem 2rem 1rem 2rem;\n  border-bottom: 1px solid #eee;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.modal-header h2 {\n  margin: 0;\n  color: #333;\n  font-size: 1.5rem;\n}\n\n.modal-content {\n  padding: 2rem;\n}\n\n.project-detail-item {\n  margin-bottom: 1.5rem;\n}\n\n.project-detail-item label {\n  font-weight: bold;\n  color: #333;\n  display: block;\n  margin-bottom: 0.5rem;\n}\n\n.project-detail-item p {\n  margin: 0;\n  color: #666;\n  line-height: 1.6;\n}\n\n.project-stats-detail {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n  gap: 1rem;\n  margin: 1.5rem 0;\n}\n\n.stat-detail-card {\n  background: #f8f9fa;\n  padding: 1rem;\n  border-radius: 10px;\n  text-align: center;\n}\n\n.stat-detail-card i {\n  font-size: 1.5rem;\n  color: #6a11cb;\n  margin-bottom: 0.5rem;\n}\n\n.stat-detail-card .stat-value {\n  font-size: 1.2rem;\n  font-weight: bold;\n  color: #333;\n}\n\n.stat-detail-card .stat-label {\n  font-size: 0.9rem;\n  color: #666;\n}\n\n\n/* Project Action Buttons */\n.project-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: flex-start;\n  margin-bottom: 1rem;\n}\n\n.project-actions {\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n}\n\n.action-buttons {\n  display: flex;\n  gap: 0.25rem;\n  opacity: 0.7;\n  transition: opacity 0.2s ease;\n}\n\n.user-project-card:hover .action-buttons {\n  opacity: 1;\n}\n\n.edit-btn, .delete-btn {\n  padding: 0.25rem 0.5rem;\n  border: none;\n  border-radius: 6px;\n  cursor: pointer;\n  font-size: 0.875rem;\n  transition: all 0.2s ease;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.edit-btn {\n  background: #f3f4f6;\n  color: #6b7280;\n}\n\n.edit-btn:hover {\n  background: #3b82f6;\n  color: white;\n}\n\n.delete-btn {\n  background: #f3f4f6;\n  color: #6b7280;\n}\n\n.delete-btn:hover {\n  background: #ef4444;\n  color: white;\n}\n\n/* Edit Modal Styling */\n.modal-overlay {\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background: rgba(0, 0, 0, 0.5);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  z-index: 1000;\n  backdrop-filter: blur(4px);\n}\n\n.modal-content {\n  background: white;\n  border-radius: 16px;\n  padding: 2rem;\n  width: 90%;\n  max-width: 600px;\n  max-height: 80vh;\n  overflow-y: auto;\n  box-shadow: 0 20px 40px rgba(0, 0, 0, 0.2);\n}\n\n.modal-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 2rem;\n  padding-bottom: 1rem;\n  border-bottom: 1px solid #e5e7eb;\n}\n\n.modal-header h2 {\n  margin: 0;\n  color: #1f2937;\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n}\n\n.modal-close {\n  background: none;\n  border: none;\n  font-size: 1.5rem;\n  cursor: pointer;\n  color: #6b7280;\n  padding: 0.5rem;\n  border-radius: 8px;\n  transition: all 0.2s ease;\n}\n\n.modal-close:hover {\n  background: #f3f4f6;\n  color: #ef4444;\n}\n\n.modal-actions {\n  display: flex;\n  gap: 1rem;\n  justify-content: flex-end;\n  margin-top: 2rem;\n  padding-top: 1rem;\n  border-top: 1px solid #e5e7eb;\n}\n\n.cancel-btn, .save-btn {\n  padding: 0.75rem 1.5rem;\n  border-radius: 8px;\n  font-weight: 500;\n  cursor: pointer;\n  transition: all 0.2s ease;\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n}\n\n.cancel-btn {\n  background: #f3f4f6;\n  color: #6b7280;\n  border: 1px solid #d1d5db;\n}\n\n.cancel-btn:hover {\n  background: #e5e7eb;\n}\n\n.save-btn {\n  background: linear-gradient(135deg, #3b82f6, #1d4ed8);\n  color: white;\n  border: none;\n}\n\n.save-btn:hover {\n  transform: translateY(-1px);\n  box-shadow: 0 4px 12px rgba(59, 130, 246, 0.3);\n}\n","size_bytes":30925},"static/discussion.css":{"content":"/* Discussion Page Styles */\n\n/* Override navbar for discussion page */\n.navbar {\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%) !important;\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1) !important;\n}\n\n.discussion-main {\n  padding: 2rem 0;\n  min-height: calc(100vh - 80px);\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n  background-attachment: fixed;\n}\n\n.container {\n  max-width: 1200px;\n  margin: 0 auto;\n  padding: 0 2rem;\n}\n\n/* Discussion Header */\n.discussion-header {\n  text-align: center;\n  margin-bottom: 3rem;\n  color: white;\n}\n\n.discussion-header h1 {\n  font-size: 3rem;\n  margin-bottom: 1rem;\n  background: linear-gradient(45deg, #ff6b6b, #4ecdc4);\n  -webkit-background-clip: text;\n  -webkit-text-fill-color: transparent;\n  background-clip: text;\n}\n\n.discussion-header p {\n  font-size: 1.2rem;\n  opacity: 0.9;\n  margin-bottom: 2rem;\n}\n\n/* Create Discussion Section */\n.create-discussion-section {\n  margin-bottom: 3rem;\n}\n\n.create-discussion-card {\n  background: rgba(255, 255, 255, 0.95);\n  border-radius: 20px;\n  padding: 2rem;\n  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);\n  backdrop-filter: blur(20px);\n  border: 1px solid rgba(255, 255, 255, 0.2);\n}\n\n.create-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 1.5rem;\n}\n\n.create-header h3 {\n  color: #333;\n  margin: 0;\n  font-size: 1.5rem;\n}\n\n.btn-create-toggle {\n  background: linear-gradient(45deg, #667eea, #764ba2);\n  color: white;\n  border: none;\n  padding: 0.75rem 1.5rem;\n  border-radius: 25px;\n  cursor: pointer;\n  font-weight: 600;\n  transition: all 0.3s ease;\n  box-shadow: 0 4px 15px rgba(102, 126, 234, 0.3);\n}\n\n.btn-create-toggle:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 6px 20px rgba(102, 126, 234, 0.4);\n}\n\n.btn-create-toggle.cancel {\n  background: linear-gradient(45deg, #ff6b6b, #ee5a24);\n}\n\n.btn-create-toggle.cancel:hover {\n  box-shadow: 0 6px 20px rgba(255, 107, 107, 0.4);\n}\n\n/* Discussion Form */\n.discussion-form {\n  animation: slideDown 0.3s ease;\n}\n\n@keyframes slideDown {\n  from {\n    opacity: 0;\n    transform: translateY(-20px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n.form-group {\n  margin-bottom: 1.5rem;\n}\n\n.form-group label {\n  display: block;\n  margin-bottom: 0.5rem;\n  font-weight: 600;\n  color: #333;\n}\n\n.form-group input,\n.form-group select,\n.form-group textarea {\n  width: 100%;\n  padding: 0.75rem;\n  border: 2px solid #e1e5e9;\n  border-radius: 8px;\n  font-size: 1rem;\n  transition: all 0.3s ease;\n  background: white;\n}\n\n.form-group input:focus,\n.form-group select:focus,\n.form-group textarea:focus {\n  outline: none;\n  border-color: #667eea;\n  box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);\n}\n\n.form-group textarea {\n  resize: vertical;\n  min-height: 120px;\n}\n\n/* Image Upload */\n.image-upload-container {\n  position: relative;\n}\n\n.image-upload-btn {\n  background: #f8f9fa;\n  border: 2px dashed #dee2e6;\n  border-radius: 8px;\n  padding: 1rem;\n  cursor: pointer;\n  transition: all 0.3s ease;\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n  width: 100%;\n  justify-content: center;\n  color: #6c757d;\n}\n\n.image-upload-btn:hover {\n  border-color: #667eea;\n  background: rgba(102, 126, 234, 0.1);\n  color: #667eea;\n}\n\n.image-preview {\n  position: relative;\n  margin-top: 1rem;\n  border-radius: 8px;\n  overflow: hidden;\n  display: inline-block;\n}\n\n.image-preview img {\n  max-width: 200px;\n  max-height: 200px;\n  border-radius: 8px;\n}\n\n.remove-image-btn {\n  position: absolute;\n  top: 0.5rem;\n  right: 0.5rem;\n  background: rgba(220, 53, 69, 0.9);\n  color: white;\n  border: none;\n  border-radius: 50%;\n  width: 30px;\n  height: 30px;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n/* Form Actions */\n.form-actions {\n  display: flex;\n  gap: 1rem;\n  justify-content: flex-end;\n}\n\n.btn-cancel,\n.btn-submit {\n  padding: 0.75rem 1.5rem;\n  border: none;\n  border-radius: 8px;\n  cursor: pointer;\n  font-weight: 600;\n  transition: all 0.3s ease;\n}\n\n.btn-cancel {\n  background: #6c757d;\n  color: white;\n}\n\n.btn-cancel:hover {\n  background: #5a6268;\n}\n\n.btn-submit {\n  background: linear-gradient(45deg, #28a745, #20c997);\n  color: white;\n  box-shadow: 0 4px 15px rgba(40, 167, 69, 0.3);\n}\n\n.btn-submit:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 6px 20px rgba(40, 167, 69, 0.4);\n}\n\n/* Discussion Controls */\n.discussion-controls {\n  background: rgba(255, 255, 255, 0.95);\n  border-radius: 15px;\n  padding: 1.5rem;\n  margin-bottom: 2rem;\n  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);\n  backdrop-filter: blur(10px);\n}\n\n.search-filters {\n  display: flex;\n  gap: 2rem;\n  align-items: center;\n  flex-wrap: wrap;\n}\n\n.search-box {\n  flex: 1;\n  min-width: 400px;\n  max-width: 500px;\n  position: relative;\n}\n\n.search-box input {\n  width: 100%;\n  padding: 1rem 3rem 1rem 1rem;\n  border: 2px solid #e1e5e9;\n  border-radius: 12px;\n  font-size: 1rem;\n  transition: all 0.3s ease;\n  min-height: 48px;\n  box-sizing: border-box;\n}\n\n.search-box input:focus {\n  outline: none;\n  border-color: #667eea;\n  box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);\n}\n\n.search-box button {\n  position: absolute;\n  right: 0.5rem;\n  top: 50%;\n  transform: translateY(-50%);\n  background: #667eea;\n  color: white;\n  border: none;\n  border-radius: 50%;\n  width: 35px;\n  height: 35px;\n  cursor: pointer;\n  transition: all 0.3s ease;\n}\n\n.search-box button:hover {\n  background: #5a6fd8;\n}\n\n.filter-controls {\n  display: flex;\n  gap: 1rem;\n}\n\n.filter-controls select {\n  padding: 1rem 1rem;\n  border: 2px solid #e1e5e9;\n  border-radius: 12px;\n  background: white;\n  cursor: pointer;\n  transition: all 0.3s ease;\n  min-height: 48px;\n  min-width: 150px;\n  box-sizing: border-box;\n}\n\n.filter-controls select:focus {\n  outline: none;\n  border-color: #667eea;\n}\n\n/* Discussions List */\n.discussions-list {\n  display: grid;\n  gap: 1.5rem;\n}\n\n.discussion-card {\n  background: rgba(255, 255, 255, 0.95);\n  border-radius: 20px;\n  padding: 2rem;\n  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);\n  backdrop-filter: blur(20px);\n  transition: all 0.4s ease;\n  position: relative;\n  cursor: pointer;\n  border: 1px solid rgba(255, 255, 255, 0.2);\n}\n\n.discussion-card:hover {\n  transform: translateY(-8px);\n  box-shadow: 0 16px 48px rgba(0, 0, 0, 0.2);\n  background: rgba(255, 255, 255, 0.98);\n  border-color: rgba(255, 255, 255, 0.4);\n}\n\n.discussion-header-card {\n  display: flex;\n  justify-content: space-between;\n  align-items: flex-start;\n  margin-bottom: 1rem;\n}\n\n.discussion-meta {\n  display: flex;\n  align-items: center;\n  gap: 1rem;\n  color: #6c757d;\n  font-size: 0.9rem;\n}\n\n.discussion-title {\n  font-size: 1.5rem;\n  font-weight: 700;\n  color: #333;\n  margin-bottom: 0.5rem;\n  line-height: 1.3;\n}\n\n.discussion-category {\n  background: linear-gradient(45deg, #667eea, #764ba2);\n  color: white;\n  padding: 0.25rem 0.75rem;\n  border-radius: 15px;\n  font-size: 0.8rem;\n  font-weight: 600;\n}\n\n.discussion-content {\n  color: #555;\n  margin-bottom: 1.5rem;\n  line-height: 1.6;\n}\n\n.discussion-image {\n  margin: 1rem 0;\n  border-radius: 8px;\n  overflow: hidden;\n  max-width: 100%;\n}\n\n.discussion-image img {\n  width: 100%;\n  max-height: 300px;\n  object-fit: cover;\n}\n\n.discussion-tags {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 0.5rem;\n  margin-bottom: 1.5rem;\n}\n\n.tag {\n  background: rgba(102, 126, 234, 0.1);\n  color: #667eea;\n  padding: 0.25rem 0.5rem;\n  border-radius: 12px;\n  font-size: 0.8rem;\n  font-weight: 500;\n}\n\n.discussion-stats {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-top: 1.5rem;\n  padding-top: 1rem;\n  border-top: 1px solid #e9ecef;\n}\n\n.discussion-actions {\n  display: flex;\n  gap: 1rem;\n}\n\n.action-btn {\n  background: none;\n  border: none;\n  color: #6c757d;\n  cursor: pointer;\n  padding: 0.5rem;\n  border-radius: 8px;\n  transition: all 0.3s ease;\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n}\n\n.action-btn:hover {\n  background: rgba(102, 126, 234, 0.1);\n  color: #667eea;\n}\n\n.action-btn.liked {\n  color: #e74c3c;\n}\n\n.author-info {\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n  color: #6c757d;\n  font-size: 0.9rem;\n}\n\n/* Discussion Edit Overlay */\n.discussion-edit-overlay {\n  position: absolute;\n  top: 1rem;\n  right: 1rem;\n  display: flex;\n  gap: 0.5rem;\n  opacity: 0;\n  transition: opacity 0.3s ease;\n  z-index: 10;\n}\n\n.discussion-card:hover .discussion-edit-overlay {\n  opacity: 1;\n}\n\n.discussion-edit-overlay .btn {\n  padding: 0.25rem 0.5rem;\n  font-size: 0.8rem;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n  transition: all 0.3s ease;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);\n}\n\n.discussion-edit-overlay .btn-secondary {\n  background: #6c757d;\n  color: white;\n}\n\n.discussion-edit-overlay .btn-secondary:hover {\n  background: #5a6268;\n  transform: translateY(-1px);\n}\n\n.discussion-edit-overlay .btn-danger {\n  background: #dc3545;\n  color: white;\n}\n\n.discussion-edit-overlay .btn-danger:hover {\n  background: #c82333;\n  transform: translateY(-1px);\n}\n\n/* Modal Styles */\n.modal {\n  display: none;\n  position: fixed;\n  z-index: 1000;\n  left: 0;\n  top: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.5);\n  backdrop-filter: blur(5px);\n}\n\n.modal-content {\n  background-color: white;\n  margin: 5% auto;\n  padding: 0;\n  border-radius: 15px;\n  width: 90%;\n  max-width: 800px;\n  max-height: 90vh;\n  overflow-y: auto;\n  box-shadow: 0 20px 60px rgba(0, 0, 0, 0.2);\n}\n\n.modal-header {\n  padding: 1.5rem 2rem;\n  border-bottom: 1px solid #e9ecef;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  background: linear-gradient(45deg, #667eea, #764ba2);\n  color: white;\n  border-radius: 15px 15px 0 0;\n}\n\n.modal-header h3 {\n  margin: 0;\n  font-size: 1.5rem;\n}\n\n.close {\n  color: white;\n  font-size: 28px;\n  font-weight: bold;\n  cursor: pointer;\n  transition: opacity 0.3s ease;\n}\n\n.close:hover {\n  opacity: 0.7;\n}\n\n.modal-body {\n  padding: 2rem;\n}\n\n/* Discussion Detail */\n.discussion-detail {\n  margin-bottom: 2rem;\n}\n\n.discussion-detail-header {\n  margin-bottom: 1.5rem;\n}\n\n.discussion-detail-title {\n  font-size: 2rem;\n  font-weight: 700;\n  color: #333;\n  margin-bottom: 1rem;\n}\n\n.discussion-detail-meta {\n  display: flex;\n  gap: 1rem;\n  color: #6c757d;\n  font-size: 0.9rem;\n  margin-bottom: 1rem;\n}\n\n.discussion-detail-content {\n  color: #555;\n  line-height: 1.8;\n  margin-bottom: 1.5rem;\n  font-size: 1.1rem;\n}\n\n/* Comments Section */\n.comments-section {\n  border-top: 1px solid #e9ecef;\n  padding-top: 2rem;\n}\n\n.comments-section h4 {\n  color: #333;\n  margin-bottom: 1.5rem;\n  font-size: 1.3rem;\n}\n\n.add-comment-btn {\n  background: linear-gradient(45deg, #667eea, #764ba2);\n  color: white;\n  border: none;\n  padding: 0.75rem 1.5rem;\n  border-radius: 25px;\n  cursor: pointer;\n  font-weight: 600;\n  margin-bottom: 1.5rem;\n  transition: all 0.3s ease;\n}\n\n.add-comment-btn:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 6px 20px rgba(102, 126, 234, 0.4);\n}\n\n.comment-form {\n  background: #f8f9fa;\n  padding: 1.5rem;\n  border-radius: 12px;\n  margin-bottom: 1.5rem;\n  border: 1px solid #e9ecef;\n}\n\n.comment-form textarea {\n  width: 100%;\n  padding: 0.75rem;\n  border: 2px solid #e1e5e9;\n  border-radius: 8px;\n  resize: vertical;\n  min-height: 100px;\n  margin-bottom: 1rem;\n}\n\n.comment-actions {\n  display: flex;\n  gap: 1rem;\n  justify-content: flex-end;\n}\n\n.comments-list {\n  display: flex;\n  flex-direction: column;\n  gap: 1.5rem;\n}\n\n.comment-card {\n  background: #f8f9fa;\n  border-radius: 12px;\n  padding: 1.5rem;\n  border: 1px solid #e9ecef;\n  position: relative;\n}\n\n.comment-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 1rem;\n}\n\n.comment-author {\n  font-weight: 600;\n  color: #333;\n}\n\n.comment-date {\n  color: #6c757d;\n  font-size: 0.9rem;\n}\n\n.comment-content {\n  color: #555;\n  line-height: 1.6;\n  margin-bottom: 1rem;\n}\n\n.comment-actions-bar {\n  display: flex;\n  gap: 1rem;\n  align-items: center;\n}\n\n.comment-action-btn {\n  background: none;\n  border: none;\n  color: #6c757d;\n  cursor: pointer;\n  padding: 0.25rem 0.5rem;\n  border-radius: 4px;\n  transition: all 0.3s ease;\n  font-size: 0.9rem;\n}\n\n.comment-action-btn:hover {\n  background: rgba(102, 126, 234, 0.1);\n  color: #667eea;\n}\n\n.comment-action-btn.liked {\n  color: #e74c3c;\n}\n\n/* Comment Edit/Delete Buttons */\n.comment-edit-overlay {\n  position: absolute;\n  top: 1rem;\n  right: 1rem;\n  display: flex;\n  gap: 0.5rem;\n  opacity: 0;\n  transition: opacity 0.3s ease;\n}\n\n.comment-card:hover .comment-edit-overlay {\n  opacity: 1;\n}\n\n.edit-comment-btn,\n.delete-comment-btn {\n  background: none;\n  border: none;\n  color: #6c757d;\n  cursor: pointer;\n  padding: 0.25rem 0.5rem;\n  border-radius: 4px;\n  transition: all 0.3s ease;\n  font-size: 0.8rem;\n}\n\n.edit-comment-btn:hover {\n  background: #3b82f6;\n  color: white;\n}\n\n.delete-comment-btn:hover {\n  background: #ef4444;\n  color: white;\n}\n\n/* Reply System */\n.replies-container {\n  margin-top: 1rem;\n  margin-left: 2rem;\n  border-left: 2px solid #e9ecef;\n  padding-left: 1rem;\n}\n\n.reply-card {\n  background: white;\n  border-radius: 8px;\n  padding: 1rem;\n  margin-bottom: 1rem;\n  border: 1px solid #e9ecef;\n}\n\n.reply-form {\n  background: white;\n  padding: 1rem;\n  border-radius: 8px;\n  border: 1px solid #e9ecef;\n  margin-top: 1rem;\n}\n\n.reply-btn {\n  background: none;\n  border: none;\n  color: #667eea;\n  cursor: pointer;\n  font-size: 0.9rem;\n  text-decoration: underline;\n}\n\n.reply-btn:hover {\n  color: #5a6fd8;\n}\n\n/* Load More Button */\n.pagination-container {\n  text-align: center;\n  margin-top: 2rem;\n}\n\n.load-more-btn {\n  background: linear-gradient(45deg, #667eea, #764ba2);\n  color: white;\n  border: none;\n  padding: 1rem 2rem;\n  border-radius: 25px;\n  cursor: pointer;\n  font-weight: 600;\n  transition: all 0.3s ease;\n  box-shadow: 0 4px 15px rgba(102, 126, 234, 0.3);\n}\n\n.load-more-btn:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 6px 20px rgba(102, 126, 234, 0.4);\n}\n\n/* Loading State */\n.loading {\n  text-align: center;\n  padding: 2rem;\n  color: #6c757d;\n}\n\n.loading i {\n  font-size: 2rem;\n  animation: spin 1s linear infinite;\n}\n\n@keyframes spin {\n  0% { transform: rotate(0deg); }\n  100% { transform: rotate(360deg); }\n}\n\n/* Empty State */\n.empty-state {\n  text-align: center;\n  padding: 3rem;\n  color: #6c757d;\n}\n\n.empty-state i {\n  font-size: 3rem;\n  margin-bottom: 1rem;\n  opacity: 0.5;\n}\n\n.empty-state h3 {\n  margin-bottom: 0.5rem;\n  color: #495057;\n}\n\n/* Responsive Design */\n@media (max-width: 768px) {\n  .container {\n    padding: 0 1rem;\n  }\n  \n  .discussion-header h1 {\n    font-size: 2rem;\n  }\n  \n  .search-filters {\n    flex-direction: column;\n    gap: 1rem;\n  }\n  \n  .search-box {\n    min-width: auto;\n    max-width: 100%;\n  }\n  \n  .search-box input {\n    min-height: 44px;\n  }\n  \n  .filter-controls {\n    width: 100%;\n  }\n  \n  .filter-controls select {\n    flex: 1;\n    min-height: 44px;\n    min-width: 120px;\n  }\n  \n  .discussion-header-card {\n    flex-direction: column;\n    gap: 1rem;\n  }\n  \n  .discussion-stats {\n    flex-direction: column;\n    gap: 1rem;\n    align-items: flex-start;\n  }\n  \n  .modal-content {\n    width: 95%;\n    margin: 2% auto;\n  }\n  \n  .modal-body {\n    padding: 1rem;\n  }\n  \n  .form-actions {\n    flex-direction: column;\n  }\n  \n  .replies-container {\n    margin-left: 1rem;\n  }\n}\n\n@media (max-width: 480px) {\n  .discussion-header h1 {\n    font-size: 1.5rem;\n  }\n  \n  .create-header {\n    flex-direction: column;\n    gap: 1rem;\n    text-align: center;\n  }\n  \n  .discussion-actions {\n    flex-wrap: wrap;\n  }\n  \n  .discussion-edit-overlay {\n    position: static;\n    opacity: 1;\n    margin-top: 1rem;\n    justify-content: center;\n  }\n  \n  .comment-edit-overlay {\n    position: static;\n    opacity: 1;\n    margin-top: 1rem;\n    justify-content: flex-end;\n  }\n}","size_bytes":15736},"static/login.css":{"content":"/* LOGIN PAGE STYLING */\nbody {\n  margin: 0;\n  font-family: 'Segoe UI', sans-serif;\n  background: linear-gradient(to right, #6a11cb, #b16cea);\n}\n\n/* Login Wrapper */\n.login-wrapper {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  padding: 5rem 1rem;\n}\n\n/* Login Card */\n.login-box {\n  background: rgba(255, 255, 255, 0.95);\n  backdrop-filter: blur(20px);\n  padding: 2.5rem;\n  border-radius: 20px;\n  max-width: 400px;\n  width: 100%;\n  text-align: center;\n  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);\n  border: 1px solid rgba(255, 255, 255, 0.2);\n}\n\n/* Icon Top */\n.login-icon {\n  background: linear-gradient(to right, #6a11cb, #2575fc);\n  color: white;\n  font-size: 1.6rem;\n  width: 50px;\n  height: 50px;\n  border-radius: 50%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin: 0 auto 1rem;\n}\n\n.login-box h2 {\n  margin: 0.5rem 0;\n  font-size: 1.5rem;\n  color: #222;\n}\n\n.login-box p {\n  color: #666;\n  margin-bottom: 1.5rem;\n}\n\n/* Input Group */\n.input-group {\n  position: relative;\n  margin-bottom: 1rem;\n}\n\n.input-group i {\n  position: absolute;\n  left: 15px;\n  top: 50%;\n  transform: translateY(-50%);\n  color: #888;\n  font-size: 0.95rem;\n}\n\n.input-group input {\n  width: 90%;\n  padding: 0.6rem 0.5rem 0.5rem 2.2rem;\n  border: 1px solid #ddd;\n  border-radius: 8px;\n  font-size: 0.95rem;\n  transition: border 0.3s;\n}\n\n.input-group input:focus {\n  border-color: #6a11cb;\n  outline: none;\n}\n\n/* Checkbox */\n.checkbox-row {\n  text-align: left;\n  margin: 1rem 0;\n}\n\n.checkbox-row label {\n  font-size: 0.9rem;\n  color: #444;\n  cursor: pointer;\n}\n\nform button {\n  background: linear-gradient(to right, #6a11cb, #2575fc);\n  color: white;\n  padding: 0.65rem 1.3rem;\n  border: none;\n  border-radius: 10px;\n  font-size: 1rem;\n  cursor: pointer;\n  transition: all 0.3s ease;\n  display: inline-flex;\n  align-items: center;\n  gap: 8px;\n  margin-top: 1rem;\n  width: 100%;\n  justify-content: center;\n}\n\nform button:hover {\n  background: linear-gradient(to right, #4b00a8, #1a57e2);\n}\n\nform button:disabled {\n  opacity: 0.6;\n  cursor: not-allowed;\n}\n\n/* Signup link */\n.signup-link {\n  margin-top: 1rem;\n  font-size: 0.9rem;\n  color: #555;\n}\n\n.signup-link a {\n  color: #6a11cb;\n  text-decoration: none;\n}\n\n.signup-link a:hover {\n  text-decoration: underline;\n}\n","size_bytes":2293},"static/profile.css":{"content":"/* Profile Page Styles */\n\n.profile-main {\n  min-height: calc(100vh - 80px);\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n  background-attachment: fixed;\n  padding: 2rem;\n}\n\n.profile-container {\n  max-width: 1400px;\n  margin: 0 auto;\n  display: grid;\n  grid-template-columns: 320px 1fr;\n  gap: 2rem;\n  height: calc(100vh - 120px);\n}\n\n/* Profile Sidebar */\n.profile-sidebar {\n  background: rgba(255, 255, 255, 0.95);\n  backdrop-filter: blur(20px);\n  border-radius: 20px;\n  padding: 2rem;\n  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);\n  border: 1px solid rgba(255, 255, 255, 0.2);\n  height: fit-content;\n  position: sticky;\n  top: 2rem;\n  overflow-y: auto;\n  max-height: calc(100vh - 120px);\n}\n\n.sidebar-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 1.5rem;\n  padding-bottom: 1rem;\n  border-bottom: 1px solid #e5e7eb;\n}\n\n.sidebar-header h2 {\n  font-size: 1.5rem;\n  font-weight: 600;\n  background: linear-gradient(135deg, #667eea, #764ba2);\n  -webkit-background-clip: text;\n  -webkit-text-fill-color: transparent;\n  background-clip: text;\n  margin: 0;\n}\n\n.search-btn {\n  background: #f3f4f6;\n  border: none;\n  border-radius: 8px;\n  width: 36px;\n  height: 36px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n  transition: all 0.2s ease;\n}\n\n.search-btn:hover {\n  background: #e5e7eb;\n  transform: scale(1.05);\n}\n\n.search-btn i {\n  color: #6b7280;\n  font-size: 0.9rem;\n}\n\n.profile-card {\n  text-align: center;\n}\n\n.profile-avatar {\n  width: 120px;\n  height: 120px;\n  border-radius: 50%;\n  background: linear-gradient(135deg, #28a745, #20c997);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: white;\n  font-size: 4rem;\n  box-shadow: 0 8px 25px rgba(40, 167, 69, 0.3);\n  position: relative;\n  overflow: hidden;\n  cursor: pointer;\n  margin: 0 auto 1rem auto;\n  transition: transform 0.3s ease, box-shadow 0.3s ease;\n}\n\n.profile-avatar:hover {\n  transform: translateY(-3px);\n  box-shadow: 0 12px 30px rgba(40, 167, 69, 0.4);\n}\n\n.profile-info {\n  text-align: center;\n  margin-bottom: 1.5rem;\n}\n\n.profile-info h3 {\n  font-size: 1.5rem;\n  font-weight: 600;\n  color: #1f2937;\n  margin: 0 0 0.25rem 0;\n}\n\n.profile-title {\n  color: #6b7280;\n  font-size: 0.9rem;\n  margin: 0;\n  font-weight: 500;\n}\n\n.profile-avatar img {\n  width: 100%;\n  height: 100%;\n  object-fit: cover;\n  border-radius: 50%;\n}\n\n.profile-image-overlay {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background: rgba(0, 0, 0, 0.7);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: white;\n  font-size: 1.5rem;\n  opacity: 0;\n  transition: opacity 0.3s ease;\n}\n\n.profile-avatar:hover .profile-image-overlay {\n  opacity: 1;\n}\n\n/* Contact Items */\n.profile-contacts {\n  margin: 1.5rem 0;\n  text-align: left;\n}\n\n.contact-item {\n  display: flex;\n  align-items: center;\n  gap: 0.75rem;\n  padding: 0.75rem;\n  border-bottom: 1px solid #f3f4f6;\n  border-radius: 8px;\n  transition: all 0.2s ease;\n  margin: 0.25rem 0;\n}\n\n.contact-item:last-child {\n  border-bottom: none;\n}\n\n.contact-item:hover {\n  background: linear-gradient(135deg, #f093fb, #f5576c);\n  color: white;\n  transform: translateX(4px) scale(1.02);\n  cursor: pointer;\n  box-shadow: 0 4px 15px rgba(240, 147, 251, 0.3);\n}\n\n.contact-item:hover i {\n  color: white;\n}\n\n.contact-item i {\n  width: 16px;\n  color: #6b7280;\n  font-size: 0.9rem;\n  transition: color 0.2s ease;\n}\n\n.contact-item:hover i {\n  color: #3b82f6;\n}\n\n.contact-item span {\n  color: #1f2937;\n  font-size: 0.9rem;\n  font-weight: 500;\n  transition: color 0.2s ease;\n}\n\n.contact-item:hover span {\n  color: #3b82f6;\n}\n\n/* Social Links */\n.profile-social {\n  margin: 1.5rem 0;\n  text-align: left;\n}\n\n.social-link {\n  display: flex;\n  align-items: center;\n  gap: 0.75rem;\n  padding: 0.5rem 0;\n  text-decoration: none;\n  color: #6b7280;\n  font-size: 0.9rem;\n  font-weight: 500;\n  transition: all 0.2s ease;\n}\n\n.social-link:hover {\n  color: #28a745;\n  background: #f9fafb;\n  border-radius: 8px;\n  padding-left: 0.5rem;\n  margin: 0 -0.5rem;\n  transform: translateX(5px);\n}\n\n.social-link i {\n  width: 16px;\n  font-size: 0.9rem;\n}\n\n/* About Section */\n.about-section {\n  margin: 1.5rem 0;\n  text-align: left;\n}\n\n.about-section h4 {\n  font-size: 1rem;\n  font-weight: 600;\n  color: #1f2937;\n  margin: 0 0 0.75rem 0;\n}\n\n.about-text {\n  color: #6b7280;\n  font-size: 0.9rem;\n  line-height: 1.5;\n  margin: 0 0 1rem 0;\n}\n\n\n\n.profile-details h1 {\n  font-size: 2.5rem;\n  color: #333;\n  margin-bottom: 0.5rem;\n  background: linear-gradient(45deg, #667eea, #764ba2);\n  -webkit-background-clip: text;\n  -webkit-text-fill-color: transparent;\n  background-clip: text;\n}\n\n/* Profile Actions */\n.profile-actions {\n  margin-top: 1.5rem;\n}\n\n/* Right Content Area */\n.profile-content {\n  background: linear-gradient(145deg, #ffffff, #f8f9fa);\n  border-radius: 16px;\n  padding: 2rem;\n  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.12);\n  border: 1px solid rgba(255, 255, 255, 0.2);\n  backdrop-filter: blur(10px);\n  overflow-y: auto;\n  max-height: calc(100vh - 120px);\n}\n\n/* Search Section */\n.search-section {\n  margin: 1.5rem 0;\n  padding: 1rem;\n  background: #f8fafc;\n  border-radius: 12px;\n  border: 1px solid #e2e8f0;\n}\n\n.search-input-wrapper {\n  display: flex;\n  align-items: center;\n  gap: 0.75rem;\n  background: white;\n  border: 2px solid #e2e8f0;\n  border-radius: 8px;\n  padding: 0.75rem 1rem;\n  transition: border-color 0.2s ease;\n}\n\n.search-input-wrapper:focus-within {\n  border-color: #3b82f6;\n}\n\n.search-input-wrapper i {\n  color: #6b7280;\n  font-size: 0.9rem;\n}\n\n.search-input-wrapper input {\n  flex: 1;\n  border: none;\n  outline: none;\n  font-size: 0.9rem;\n  color: #1f2937;\n}\n\n.search-input-wrapper input::placeholder {\n  color: #9ca3af;\n}\n\n.search-btn {\n  background: #3b82f6;\n  color: white;\n  border: none;\n  padding: 0.5rem 1rem;\n  border-radius: 6px;\n  font-size: 0.85rem;\n  font-weight: 500;\n  cursor: pointer;\n  transition: background 0.2s ease;\n}\n\n.search-btn:hover {\n  background: #2563eb;\n}\n\n/* Empty States */\n.empty-state {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  text-align: center;\n  padding: 3rem 2rem;\n  background: #fafbfc;\n  border-radius: 12px;\n  border: 2px dashed #e2e8f0;\n  margin: 2rem 0;\n}\n\n.empty-state-icon {\n  width: 80px;\n  height: 80px;\n  background: #eff6ff;\n  border-radius: 50%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin-bottom: 1.5rem;\n}\n\n.empty-state-icon i {\n  font-size: 2rem;\n  color: #3b82f6;\n}\n\n.empty-state h3 {\n  font-size: 1.5rem;\n  font-weight: 600;\n  color: #1f2937;\n  margin: 0 0 0.5rem 0;\n}\n\n.empty-state p {\n  font-size: 1rem;\n  color: #6b7280;\n  margin: 0 0 2rem 0;\n  line-height: 1.5;\n}\n\n.empty-state .btn-primary {\n  padding: 0.75rem 1.5rem;\n  font-size: 0.95rem;\n}\n\n.content-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 2rem;\n}\n\n.content-header h2 {\n  font-size: 2rem;\n  font-weight: 600;\n  background: linear-gradient(135deg, #667eea, #764ba2);\n  -webkit-background-clip: text;\n  -webkit-text-fill-color: transparent;\n  background-clip: text;\n  margin: 0;\n}\n\n/* Content Sections */\n.content-section {\n  margin-bottom: 3rem;\n  padding-bottom: 2rem;\n  border-bottom: 1px solid #e5e7eb;\n}\n\n.content-section:last-child {\n  border-bottom: none;\n  margin-bottom: 0;\n}\n\n.section-header {\n  margin-bottom: 1.5rem;\n}\n\n.section-header h2 {\n  font-size: 1.5rem;\n  font-weight: 600;\n  background: linear-gradient(135deg, #f093fb, #f5576c);\n  -webkit-background-clip: text;\n  -webkit-text-fill-color: transparent;\n  background-clip: text;\n  margin: 0;\n  padding-bottom: 0.5rem;\n  border-bottom: 3px solid transparent;\n  border-image: linear-gradient(135deg, #f093fb, #f5576c) 1;\n  display: inline-block;\n}\n\n/* Projects Grid */\n.projects-grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(260px, 1fr));\n  gap: 1.25rem;\n  margin-bottom: 2rem;\n}\n\n.project-card {\n  background: white;\n  border-radius: 12px;\n  padding: 0;\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.08);\n  transition: all 0.3s ease;\n  position: relative;\n  overflow: hidden;\n  cursor: pointer;\n  height: 280px;\n  display: flex;\n  flex-direction: column;\n}\n\n.project-card:hover {\n  transform: translateY(-5px);\n  box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);\n}\n\n.project-image {\n  width: 100%;\n  height: 140px;\n  background: linear-gradient(135deg, #667eea, #764ba2);\n  position: relative;\n  overflow: hidden;\n  flex-shrink: 0;\n}\n\n.project-image img {\n  width: 100%;\n  height: 100%;\n  object-fit: cover;\n}\n\n.project-badge {\n  position: absolute;\n  top: 1rem;\n  right: 1rem;\n  background: rgba(0, 0, 0, 0.7);\n  color: white;\n  padding: 0.25rem 0.75rem;\n  border-radius: 12px;\n  font-size: 0.8rem;\n  font-weight: 500;\n}\n\n.project-info {\n  padding: 1rem;\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n}\n\n.project-title {\n  font-size: 1.1rem;\n  font-weight: 600;\n  color: #1f2937;\n  margin: 0 0 0.75rem 0;\n  line-height: 1.3;\n}\n\n.project-description {\n  color: #6b7280;\n  font-size: 0.85rem;\n  line-height: 1.4;\n  margin: 0 0 1rem 0;\n  display: -webkit-box;\n  -webkit-line-clamp: 2;\n  -webkit-box-orient: vertical;\n  overflow: hidden;\n  flex: 1;\n}\n\n.project-tech {\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n  margin-bottom: 1rem;\n}\n\n.tech-icon {\n  width: 20px;\n  height: 20px;\n  background: #e5e7eb;\n  border-radius: 4px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 0.8rem;\n  color: #6b7280;\n}\n\n.tech-label {\n  color: #6b7280;\n  font-size: 0.8rem;\n  font-weight: 500;\n}\n\n.project-category {\n  background: #f3f4f6;\n  color: #6b7280;\n  padding: 0.25rem 0.75rem;\n  border-radius: 12px;\n  font-size: 0.75rem;\n  font-weight: 500;\n  display: inline-block;\n  margin-bottom: 1rem;\n}\n\n.project-actions {\n  display: flex;\n  gap: 0.75rem;\n}\n\n.action-btn {\n  flex: 1;\n  padding: 0.6rem 1rem;\n  border: none;\n  border-radius: 8px;\n  font-size: 0.85rem;\n  font-weight: 500;\n  cursor: pointer;\n  transition: all 0.2s ease;\n}\n\n.btn-view {\n  background: #3b82f6;\n  color: white;\n}\n\n.btn-view:hover {\n  background: #2563eb;\n}\n\n.btn-github {\n  background: #6b7280;\n  color: white;\n}\n\n.btn-github:hover {\n  background: #4b5563;\n}\n\n/* Empty states */\n.empty-state {\n  text-align: center;\n  padding: 3rem;\n  color: #6b7280;\n  grid-column: 1 / -1;\n}\n\n.empty-state i {\n  font-size: 3rem;\n  margin-bottom: 1rem;\n  color: #3b82f6;\n}\n\n.empty-state h3 {\n  margin: 0 0 0.5rem 0;\n  color: #1f2937;\n}\n\n.empty-state p {\n  margin: 0 0 1.5rem 0;\n}\n\n/* Utility classes */\n.btn-primary {\n  background: #3b82f6;\n  color: white;\n  border: none;\n  padding: 0.75rem 1.5rem;\n  border-radius: 8px;\n  font-size: 0.9rem;\n  font-weight: 500;\n  cursor: pointer;\n  transition: all 0.2s ease;\n  display: inline-flex;\n  align-items: center;\n  gap: 0.5rem;\n}\n\n.btn-primary:hover {\n  background: #2563eb;\n  transform: translateY(-1px);\n}\n\n/* Collaboration Cards */\n.collaborations-grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\n  gap: 1.5rem;\n}\n\n.collaboration-card {\n  background: white;\n  border-radius: 12px;\n  padding: 1.5rem;\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.08);\n  transition: all 0.3s ease;\n  border-left: 4px solid #3b82f6;\n}\n\n.collaboration-card:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.12);\n}\n\n.collaboration-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: flex-start;\n  margin-bottom: 1rem;\n}\n\n.collaboration-header h3 {\n  margin: 0;\n  color: #1f2937;\n  font-size: 1.1rem;\n  font-weight: 600;\n}\n\n.status-badge {\n  padding: 0.25rem 0.75rem;\n  border-radius: 12px;\n  font-size: 0.75rem;\n  font-weight: 500;\n  text-transform: uppercase;\n}\n\n.status-badge.active {\n  background: #dcfce7;\n  color: #166534;\n}\n\n.status-badge.completed {\n  background: #e0e7ff;\n  color: #3730a3;\n}\n\n.collaboration-details {\n  margin-bottom: 1.5rem;\n}\n\n.collaboration-details p {\n  margin: 0.5rem 0;\n  color: #6b7280;\n  font-size: 0.9rem;\n}\n\n.collaboration-actions {\n  display: flex;\n  gap: 0.75rem;\n}\n\n/* Donation Cards */\n.donations-grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));\n  gap: 1.5rem;\n}\n\n.donation-card {\n  background: white;\n  border-radius: 12px;\n  padding: 1.5rem;\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.08);\n  transition: all 0.3s ease;\n  border-left: 4px solid #10b981;\n}\n\n.donation-card:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.12);\n}\n\n.donation-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: flex-start;\n  margin-bottom: 1rem;\n}\n\n.donation-header h3 {\n  margin: 0;\n  color: #1f2937;\n  font-size: 1.1rem;\n  font-weight: 600;\n  flex: 1;\n}\n\n.donation-header .amount {\n  color: #10b981;\n  font-size: 1.25rem;\n  font-weight: 700;\n}\n\n.donation-details {\n  margin-bottom: 1.5rem;\n}\n\n.donation-details p {\n  margin: 0.5rem 0;\n  color: #6b7280;\n  font-size: 0.9rem;\n}\n\n.donation-actions {\n  display: flex;\n  gap: 0.75rem;\n}\n\n/* Activity Timeline */\n.activity-timeline {\n  display: flex;\n  flex-direction: column;\n  gap: 1rem;\n}\n\n.activity-item {\n  display: flex;\n  align-items: flex-start;\n  gap: 1rem;\n  padding: 1rem;\n  background: white;\n  border-radius: 8px;\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\n  transition: all 0.2s ease;\n}\n\n.activity-item:hover {\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);\n}\n\n.activity-icon {\n  width: 40px;\n  height: 40px;\n  background: #3b82f6;\n  border-radius: 50%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-shrink: 0;\n}\n\n.activity-icon i {\n  color: white;\n  font-size: 0.9rem;\n}\n\n.activity-content {\n  flex: 1;\n}\n\n.activity-content p {\n  margin: 0 0 0.25rem 0;\n  color: #1f2937;\n  font-size: 0.95rem;\n  line-height: 1.4;\n}\n\n.activity-date {\n  color: #6b7280;\n  font-size: 0.8rem;\n}\n\n/* Search Notification */\n.search-notification {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  background: #eff6ff;\n  border: 1px solid #bfdbfe;\n  border-radius: 8px;\n  padding: 0.75rem 1rem;\n  margin-top: 1rem;\n  animation: slideDown 0.3s ease;\n}\n\n.search-notification span {\n  color: #1e40af;\n  font-size: 0.9rem;\n  font-weight: 500;\n}\n\n.clear-search-btn {\n  background: #3b82f6;\n  color: white;\n  border: none;\n  padding: 0.25rem 0.75rem;\n  border-radius: 4px;\n  font-size: 0.8rem;\n  cursor: pointer;\n  transition: background 0.2s ease;\n}\n\n.clear-search-btn:hover {\n  background: #2563eb;\n}\n\n@keyframes slideDown {\n  from {\n    opacity: 0;\n    transform: translateY(-10px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n.project-card::before {\n  content: '';\n  position: absolute;\n  top: 0;\n  left: -100%;\n  width: 100%;\n  height: 100%;\n  background: linear-gradient(90deg, transparent, rgba(255,255,255,0.4), transparent);\n  transition: left 0.5s ease;\n}\n\n.project-card:hover::before {\n  left: 100%;\n}\n\n.project-card:hover {\n  transform: translateY(-5px);\n  box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);\n}\n\n.project-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 1rem;\n}\n\n.project-category {\n  background: #f3f4f6;\n  color: #6b7280;\n  padding: 0.25rem 0.75rem;\n  border-radius: 12px;\n  font-size: 0.8rem;\n  font-weight: 500;\n}\n\n.project-status {\n  padding: 0.25rem 0.75rem;\n  border-radius: 12px;\n  font-size: 0.8rem;\n  font-weight: 500;\n  text-transform: capitalize;\n}\n\n.project-status.active {\n  background: #d1fae5;\n  color: #065f46;\n}\n\n.project-status.completed {\n  background: #dbeafe;\n  color: #1e40af;\n}\n\n.project-status.paused {\n  background: #fef3c7;\n  color: #92400e;\n}\n\n.project-title {\n  font-size: 1.25rem;\n  font-weight: 600;\n  color: #1f2937;\n  margin: 0 0 0.75rem 0;\n  line-height: 1.4;\n}\n\n.project-description {\n  color: #6b7280;\n  font-size: 0.9rem;\n  line-height: 1.5;\n  margin: 0 0 1rem 0;\n  display: -webkit-box;\n  -webkit-line-clamp: 3;\n  -webkit-box-orient: vertical;\n  overflow: hidden;\n}\n\n.project-stats {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding-top: 1rem;\n  border-top: 1px solid #f3f4f6;\n}\n\n.project-stat {\n  display: flex;\n  align-items: center;\n  gap: 0.25rem;\n  color: #6b7280;\n  font-size: 0.8rem;\n}\n\n.project-stat i {\n  font-size: 0.7rem;\n}\n\n/* Stats Overview */\n.stats-overview {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n  gap: 1rem;\n  margin-top: 2rem;\n}\n\n.stat-card {\n  background: #f9fafb;\n  padding: 1.5rem;\n  border-radius: 12px;\n  text-align: center;\n  transition: all 0.3s ease;\n  border: 1px solid #f3f4f6;\n}\n\n.stat-card:hover {\n  transform: translateY(-3px);\n  box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);\n  background: white;\n}\n\n.stat-card i {\n  font-size: 1.5rem;\n  margin-bottom: 0.75rem;\n  color: #28a745;\n}\n\n.stat-card h3 {\n  font-size: 1.5rem;\n  color: #1f2937;\n  margin-bottom: 0.25rem;\n  font-weight: 600;\n}\n\n.stat-card p {\n  color: #6b7280;\n  font-size: 0.8rem;\n  margin: 0;\n  font-weight: 500;\n}\n\n/* Profile Tabs */\n.profile-tabs {\n  background: white;\n  border-radius: 20px;\n  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);\n  overflow: hidden;\n  width: 100%;\n  max-width: 1000px;\n  margin: 0 auto;\n}\n\n.tab-buttons {\n  display: flex;\n  background: #f8f9fa;\n  border-bottom: 1px solid #e1e8ed;\n  overflow-x: auto;\n}\n\n.tab-btn {\n  flex: 1;\n  min-width: 150px;\n  padding: 1.5rem;\n  border: none;\n  background: transparent;\n  color: #666;\n  font-size: 1rem;\n  cursor: pointer;\n  transition: all 0.3s ease;\n  white-space: nowrap;\n}\n\n.tab-btn:hover {\n  background: rgba(102, 126, 234, 0.1);\n  color: #667eea;\n}\n\n.tab-btn.active {\n  background: white;\n  color: #667eea;\n  border-bottom: 3px solid #667eea;\n}\n\n.tab-btn i {\n  margin-right: 0.5rem;\n}\n\n/* Tab Content */\n.tab-content {\n  display: none;\n  padding: 2rem;\n}\n\n.tab-content.active {\n  display: block;\n}\n\n.tab-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 2rem;\n  flex-wrap: wrap;\n  gap: 1rem;\n}\n\n.tab-header h3 {\n  color: #333;\n  font-size: 1.5rem;\n}\n\n.tab-header i {\n  margin-right: 0.5rem;\n  color: #667eea;\n}\n\n/* Projects Grid */\n.projects-grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\n  gap: 1.5rem;\n}\n\n.project-card {\n  background: #f8f9fa;\n  border-radius: 15px;\n  padding: 1.5rem;\n  transition: all 0.3s ease;\n  border: 2px solid transparent;\n  cursor: pointer;\n}\n\n.project-card:hover {\n  transform: translateY(-5px);\n  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);\n  border-color: #667eea;\n}\n\n.project-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 1rem;\n}\n\n.project-category {\n  background: #667eea;\n  color: white;\n  padding: 0.25rem 0.75rem;\n  border-radius: 15px;\n  font-size: 0.8rem;\n  font-weight: 500;\n}\n\n.project-status {\n  font-size: 0.8rem;\n  padding: 0.25rem 0.75rem;\n  border-radius: 15px;\n  font-weight: 500;\n}\n\n.project-status.active {\n  background: #e8f5e8;\n  color: #388e3c;\n}\n\n.project-status.completed {\n  background: #e3f2fd;\n  color: #1976d2;\n}\n\n.project-status.paused {\n  background: #fff3e0;\n  color: #f57c00;\n}\n\n.project-title {\n  font-size: 1.2rem;\n  font-weight: 600;\n  color: #333;\n  margin-bottom: 0.5rem;\n}\n\n.project-description {\n  color: #666;\n  line-height: 1.6;\n  margin-bottom: 1rem;\n  display: -webkit-box;\n  -webkit-line-clamp: 3;\n  -webkit-box-orient: vertical;\n  overflow: hidden;\n}\n\n.project-stats {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  font-size: 0.9rem;\n  color: #666;\n}\n\n.project-stat {\n  display: flex;\n  align-items: center;\n  gap: 0.3rem;\n}\n\n.project-stat i {\n  color: #667eea;\n}\n\n/* Lists */\n.collaborations-list,\n.donations-list,\n.activity-feed {\n  space-y: 1rem;\n}\n\n.list-item {\n  background: #f8f9fa;\n  border-radius: 10px;\n  padding: 1.5rem;\n  margin-bottom: 1rem;\n  border-left: 4px solid #667eea;\n  transition: all 0.3s ease;\n}\n\n.list-item:hover {\n  background: #f0f0f0;\n  transform: translateX(5px);\n}\n\n.list-item-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 0.5rem;\n}\n\n.list-item-title {\n  font-weight: 600;\n  color: #333;\n}\n\n.list-item-date {\n  font-size: 0.8rem;\n  color: #666;\n}\n\n.list-item-content {\n  color: #666;\n  line-height: 1.6;\n}\n\n.collaboration-status,\n.donation-amount {\n  font-weight: 600;\n  padding: 0.25rem 0.75rem;\n  border-radius: 15px;\n  font-size: 0.8rem;\n}\n\n.collaboration-status.pending {\n  background: #fff3e0;\n  color: #f57c00;\n}\n\n.collaboration-status.accepted {\n  background: #e8f5e8;\n  color: #388e3c;\n}\n\n.collaboration-status.rejected {\n  background: #ffebee;\n  color: #d32f2f;\n}\n\n.donation-amount {\n  background: #e8f5e8;\n  color: #388e3c;\n}\n\n/* Activity Feed */\n.activity-item {\n  display: flex;\n  align-items: center;\n  gap: 1rem;\n  padding: 1rem;\n  border-bottom: 1px solid #eee;\n}\n\n.activity-item:last-child {\n  border-bottom: none;\n}\n\n.activity-icon {\n  width: 40px;\n  height: 40px;\n  border-radius: 50%;\n  background: #667eea;\n  color: white;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.activity-content {\n  flex: 1;\n}\n\n.activity-text {\n  color: #333;\n  margin-bottom: 0.25rem;\n}\n\n.activity-time {\n  font-size: 0.8rem;\n  color: #666;\n}\n\n/* Empty States */\n.empty-state {\n  text-align: center;\n  padding: 3rem;\n  color: #666;\n}\n\n.empty-state i {\n  font-size: 3rem;\n  margin-bottom: 1rem;\n  color: #667eea;\n}\n\n.empty-state h3 {\n  margin-bottom: 0.5rem;\n}\n\n/* Modal Overrides for Profile */\n.modal-content {\n  max-width: 600px;\n}\n\n/* Navigation Active State */\n.nav-right .profile-link.active {\n  background: rgba(102, 126, 234, 0.1);\n  color: #667eea;\n  border-radius: 25px;\n}\n\n/* Responsive Design */\n@media (max-width: 1200px) {\n  .profile-container {\n    grid-template-columns: 280px 1fr;\n    gap: 1.5rem;\n  }\n  \n  .profile-sidebar {\n    padding: 1rem;\n  }\n  \n  .profile-content {\n    padding: 1.5rem;\n  }\n}\n\n@media (max-width: 768px) {\n  .profile-main {\n    padding: 1rem;\n  }\n  \n  .profile-container {\n    grid-template-columns: 1fr;\n    gap: 1rem;\n    height: auto;\n  }\n  \n  .profile-sidebar {\n    position: static;\n    max-height: none;\n    order: 1;\n  }\n  \n  .profile-content {\n    order: 2;\n    max-height: none;\n  }\n  \n  .projects-grid {\n    grid-template-columns: 1fr;\n  }\n  \n  .stats-overview {\n    grid-template-columns: repeat(2, 1fr);\n  }\n  \n  .sidebar-header h2 {\n    font-size: 1.25rem;\n  }\n  \n  .content-header h2 {\n    font-size: 1.5rem;\n  }\n}\n\n@media (max-width: 480px) {\n  .profile-main {\n    padding: 0.5rem;\n  }\n  \n  .profile-sidebar,\n  .profile-content {\n    padding: 1rem;\n  }\n  \n  .stats-overview {\n    grid-template-columns: 1fr;\n  }\n  \n  .contact-item,\n  .social-link {\n    font-size: 0.8rem;\n  }\n  \n  .profile-avatar {\n    width: 100px;\n    height: 100px;\n    font-size: 3rem;\n  }\n}\n\n/* Edit Profile Modal Styles */\n.modal {\n  display: none;\n  position: fixed;\n  z-index: 1000;\n  left: 0;\n  top: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.5);\n  backdrop-filter: blur(5px);\n}\n\n.modal.show {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  animation: fadeIn 0.3s ease;\n}\n\n@keyframes fadeIn {\n  from { opacity: 0; }\n  to { opacity: 1; }\n}\n\n.modal-content {\n  background: white;\n  border-radius: 15px;\n  width: 90%;\n  max-width: 500px;\n  max-height: 90vh;\n  overflow-y: auto;\n  box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);\n  animation: slideIn 0.3s ease;\n}\n\n@keyframes slideIn {\n  from { \n    opacity: 0;\n    transform: translateY(-50px) scale(0.9);\n  }\n  to { \n    opacity: 1;\n    transform: translateY(0) scale(1);\n  }\n}\n\n.modal-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 1.5rem 2rem;\n  border-bottom: 1px solid #eee;\n  background: linear-gradient(135deg, #667eea, #764ba2);\n  color: white;\n  border-radius: 15px 15px 0 0;\n}\n\n.modal-header h3 {\n  margin: 0;\n  font-size: 1.25rem;\n  font-weight: 600;\n}\n\n.close-modal {\n  background: none;\n  border: none;\n  font-size: 1.5rem;\n  color: white;\n  cursor: pointer;\n  padding: 0;\n  width: 30px;\n  height: 30px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  border-radius: 50%;\n  transition: background-color 0.2s;\n}\n\n.close-modal:hover {\n  background-color: rgba(255, 255, 255, 0.2);\n}\n\n.modal-body {\n  padding: 2rem;\n}\n\n.form-group {\n  margin-bottom: 1.5rem;\n}\n\n.form-group label {\n  display: block;\n  margin-bottom: 0.5rem;\n  font-weight: 600;\n  color: #333;\n}\n\n.form-group input,\n.form-group textarea,\n.form-group select {\n  width: 100%;\n  padding: 0.75rem 1rem;\n  border: 2px solid #e1e5e9;\n  border-radius: 8px;\n  font-size: 1rem;\n  transition: border-color 0.2s, box-shadow 0.2s;\n  font-family: inherit;\n  box-sizing: border-box;\n}\n\n.form-group input:focus,\n.form-group textarea:focus,\n.form-group select:focus {\n  outline: none;\n  border-color: #667eea;\n  box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);\n}\n\n.form-group textarea {\n  resize: vertical;\n  min-height: 100px;\n}\n\n.form-group small {\n  display: block;\n  margin-top: 0.25rem;\n  font-size: 0.875rem;\n  color: #666;\n}\n\n.modal-footer {\n  display: flex;\n  justify-content: flex-end;\n  gap: 1rem;\n  padding: 1.5rem 2rem;\n  border-top: 1px solid #eee;\n  background-color: #f8f9fa;\n  border-radius: 0 0 15px 15px;\n}\n\n.btn-secondary {\n  background: #6c757d;\n  color: white;\n  border: none;\n  padding: 0.75rem 1.5rem;\n  border-radius: 8px;\n  font-size: 1rem;\n  cursor: pointer;\n  transition: background-color 0.2s;\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  gap: 0.5rem;\n  min-width: 120px;\n  text-align: center;\n  font-weight: 500;\n}\n\n.btn-secondary:hover {\n  background: #5a6268;\n}\n\n/* Profile Image Upload Styles */\n.profile-image-upload {\n  text-align: center;\n  margin-bottom: 2rem;\n}\n\n.image-upload-container {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 1rem;\n}\n\n.image-preview {\n  width: 100px;\n  height: 100px;\n  border-radius: 50%;\n  background: linear-gradient(135deg, #28a745, #20c997);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: white;\n  font-size: 3rem;\n  overflow: hidden;\n  position: relative;\n}\n\n.image-preview img {\n  width: 100%;\n  height: 100%;\n  object-fit: cover;\n  border-radius: 50%;\n}\n\n.image-upload-controls {\n  display: flex;\n  gap: 1rem;\n  flex-wrap: wrap;\n  justify-content: center;\n}\n\n.image-upload-controls .btn-secondary {\n  min-width: 140px;\n}\n\n.btn-primary {\n  background: linear-gradient(135deg, #667eea, #764ba2);\n  color: white;\n  border: none;\n  padding: 0.75rem 1.5rem;\n  border-radius: 8px;\n  font-size: 1rem;\n  cursor: pointer;\n  transition: transform 0.2s, box-shadow 0.2s;\n  font-weight: 600;\n}\n\n.btn-primary:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 5px 15px rgba(102, 126, 234, 0.4);\n}\n\n.btn-primary:disabled {\n  opacity: 0.6;\n  cursor: not-allowed;\n  transform: none;\n  box-shadow: none;\n}\n\n/* Toast Messages */\n.toast {\n  position: fixed;\n  top: 20px;\n  right: 20px;\n  padding: 1rem 1.5rem;\n  border-radius: 8px;\n  color: white;\n  font-weight: 600;\n  z-index: 10000;\n  animation: slideInRight 0.3s ease;\n}\n\n.toast-success {\n  background: linear-gradient(135deg, #28a745, #20c997);\n}\n\n.toast-error {\n  background: linear-gradient(135deg, #dc3545, #fd7e14);\n}\n\n@keyframes slideInRight {\n  from {\n    transform: translateX(100%);\n    opacity: 0;\n  }\n  to {\n    transform: translateX(0);\n    opacity: 1;\n  }\n}\n\n/* Responsive Design for Center Alignment */\n@media (max-width: 768px) {\n  .container {\n    padding: 0 1rem;\n    max-width: 100%;\n  }\n  \n  .profile-header {\n    text-align: center;\n    padding: 1.5rem;\n  }\n  \n  .profile-banner {\n    flex-direction: column;\n    align-items: center;\n    text-align: center;\n    gap: 1rem;\n  }\n  \n  .profile-info {\n    flex-direction: column;\n    align-items: center;\n    text-align: center;\n    gap: 1rem;\n  }\n  \n  .profile-details {\n    text-align: center;\n  }\n  \n  .profile-details h1 {\n    margin-bottom: 0.5rem;\n  }\n  \n  .profile-details p {\n    margin: 0.25rem 0;\n  }\n  \n  .profile-skills {\n    justify-content: center;\n  }\n  \n  .profile-actions {\n    width: 100%;\n    display: flex;\n    justify-content: center;\n    margin-top: 1rem;\n  }\n  \n  .profile-avatar {\n    width: 100px;\n    height: 100px;\n    font-size: 3rem;\n  }\n  \n  .stats-grid {\n    grid-template-columns: repeat(2, 1fr);\n    gap: 1rem;\n  }\n  \n  .modal-content {\n    margin: 5% auto;\n    width: 90%;\n    max-width: 500px;\n  }\n  \n  .modal-footer {\n    flex-direction: column;\n    gap: 1rem;\n  }\n  \n  .modal-footer button {\n    width: 100%;\n  }\n}\n\n@media (max-width: 480px) {\n  .profile-main {\n    padding: 1rem 0;\n  }\n  \n  .profile-header {\n    padding: 1rem;\n  }\n  \n  .profile-avatar {\n    width: 80px;\n    height: 80px;\n    font-size: 2.5rem;\n  }\n  \n  .stats-grid {\n    grid-template-columns: 1fr;\n    gap: 0.75rem;\n  }\n  \n  .stat-card {\n    padding: 1rem;\n  }\n  \n  .modal-content {\n    margin: 2% auto;\n    width: 95%;\n  }\n  \n  .image-upload-controls {\n    flex-direction: column;\n    align-items: center;\n  }\n  \n  .image-upload-controls .btn-secondary {\n    width: 200px;\n    min-width: auto;\n  }\n}\n\n@media (min-width: 769px) {\n  .profile-header,\n  .profile-tabs,\n  .stats-overview,\n  .tab-content {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    text-align: center;\n  }\n  \n  .profile-banner {\n    justify-content: center;\n  }\n  \n  .stats-grid {\n    justify-content: center;\n    max-width: 800px;\n    margin: 0 auto;\n  }\n}\n/* Viewing Other Profile Banner */\n.viewing-other-profile-banner {\n  background: rgba(255, 255, 255, 0.95);\n  border-radius: 15px;\n  padding: 1rem;\n  margin: 0 2rem 2rem 2rem;\n  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);\n  border-left: 4px solid #667eea;\n}\n\n.banner-content {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  gap: 1rem;\n}\n\n.banner-content i {\n  color: #667eea;\n  margin-right: 0.5rem;\n}\n\n.banner-content span {\n  flex: 1;\n  font-weight: 600;\n  color: #333;\n}\n\n.btn-small {\n  padding: 0.5rem 1rem;\n  font-size: 0.9rem;\n}\n\n@media (max-width: 768px) {\n  .viewing-other-profile-banner {\n    margin: 0 1rem 1rem 1rem;\n  }\n  \n  .banner-content {\n    flex-direction: column;\n    text-align: center;\n    gap: 0.5rem;\n  }\n}\n","size_bytes":30283},"static/register.css":{"content":"body {\n  margin: 0;\n  font-family: 'Segoe UI', sans-serif;\n  background: linear-gradient(to right, #6a11cb, #b16cea);\n}\n\n/* Main wrapper */\n.register-wrapper {\n  display: flex;\n  justify-content: center;\n  padding: 4rem 1rem;\n}\n\n.register-box {\n  background: rgba(255, 255, 255, 0.95);\n  backdrop-filter: blur(20px);\n  padding: 3rem 2rem;\n  border-radius: 20px;\n  width: 100%;\n  max-width: 700px;\n  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);\n  border: 1px solid rgba(255, 255, 255, 0.2);\n  text-align: center;\n}\n\n.register-icon {\n  background: linear-gradient(to right, #6a11cb, #2575fc);\n  color: white;\n  font-size: 1.5rem;\n  width: 50px;\n  height: 50px;\n  border-radius: 50%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin: 0 auto 1rem;\n}\n\n.register-box h2 {\n  margin: 0.5rem 0;\n  font-size: 1.8rem;\n  color: #222;\n}\n\n.register-box p {\n  color: #555;\n  margin-bottom: 2rem;\n}\n\n/* Form layout */\nform {\n  display: flex;\n  flex-direction: column;\n  gap: 1.5rem;\n}\n\n.form-row {\n  display: flex;\n  gap: 1.5rem;\n  justify-content: center;\n  flex-wrap: wrap;\n}\n\n.input-icon {\n  position: relative;\n  width: 100%;\n  max-width: 300px;\n}\n\n.input-icon i {\n  position: absolute;\n  top: 50%;\n  left: 14px;\n  transform: translateY(-50%);\n  color: #aaa;\n}\n\n.input-icon input {\n  padding: 0.7rem 1rem 0.7rem 2.5rem;\n  font-size: 1rem;\n  width: 80%;\n  border: 1px solid #ccc;\n  border-radius: 8px;\n  transition: border 0.3s;\n}\n\n.input-icon input:focus {\n  border-color: #6a11cb;\n  outline: none;\n}\n\n/* Checkbox section */\n.checkbox-row {\n  display: flex;\n  justify-content: center;\n  margin-top: 0.5rem;\n  font-size: 0.9rem;\n}\n\n.checkbox-row label {\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n}\n\n.checkbox-row input[type=\"checkbox\"] {\n  transform: scale(1.2);\n}\n\n.checkbox-row a {\n  color: #6a11cb;\n  text-decoration: none;\n}\n\n.checkbox-row a:hover {\n  text-decoration: underline;\n}\n\n.checkbox-row span{\n    color: black;\n}\n\n/* Submit Button */\n.submit-btn-container {\n  text-align: center;\n  margin-top: 1rem;\n}\n\nform button {\n  background: linear-gradient(to right, #6a11cb, #2575fc);\n  color: white;\n  padding: 0.9rem 1.5rem;\n  border: none;\n  border-radius: 10px;\n  font-size: 1rem;\n  cursor: pointer;\n  transition: background 0.3s;\n  display: inline-flex;\n  align-items: center;\n  gap: 8px;\n  width: 100%;\n  max-width: 300px;\n  justify-content: center;\n}\n\nform button:hover {\n  background: linear-gradient(to right, #4b00a8, #1a57e2);\n}\n\nform button:disabled {\n  opacity: 0.6;\n  cursor: not-allowed;\n}\n\n.signup-link {\n  margin-top: 1rem;\n  font-size: 0.9rem;\n  color: #555;\n}\n\n.signup-link a {\n  color: #6a11cb;\n  text-decoration: none;\n}\n\n.signup-link a:hover {\n  text-decoration: underline;\n}\n\n/* Responsive */\n@media (max-width: 768px) {\n  .form-row {\n    flex-direction: column;\n    align-items: center;\n  }\n\n  .input-icon {\n    max-width: 100%;\n  }\n\n  form button {\n    max-width: 100%;\n  }\n}\n","size_bytes":2931},"static/styles.css":{"content":"/* Reset & Base */\nbody {\n  margin: 0;\n  font-family: 'Segoe UI', sans-serif;\n  background: linear-gradient(to right, #6a11cb, #b16cea);\n  color: white;\n}\n\n/* Navbar */\n.navbar {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 1rem 4rem;\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\n  top: 0;\n  z-index: 1000;\n}\n\n.nav-left {\n  display: flex;\n  align-items: center;\n}\n\n.logo {\n  display: flex;\n  align-items: center;\n  font-size: 1.4rem;\n  font-weight: bold;\n  color: white !important;\n  margin-right: 2rem;\n  text-decoration: none;\n}\n\n.logo a {\n  text-decoration: none;\n  color: white !important;\n}\n\n.logo i {\n  margin-right: 8px;\n  color: white !important;\n  text-shadow: 0 0 10px rgba(255, 255, 255, 0.3);\n}\n\n.nav-links a {\n  margin: 0 1rem;\n  text-decoration: none;\n  color: white;\n  font-weight: 500;\n  display: inline-flex;\n  align-items: center;\n  font-size: 1rem;\n  padding: 0.5rem 1rem;\n  border-radius: 8px;\n  position: relative;\n  transition: all 0.3s ease;\n  overflow: hidden;\n}\n\n.nav-links a::before {\n  content: '';\n  position: absolute;\n  top: 0;\n  left: -100%;\n  width: 100%;\n  height: 100%;\n  background: linear-gradient(90deg, rgba(255,255,255,0.1), rgba(255,255,255,0.2), rgba(255,255,255,0.1));\n  transition: left 0.5s ease;\n}\n\n.nav-links a:hover::before {\n  left: 100%;\n}\n\n.nav-links a:hover {\n  background: rgba(255, 255, 255, 0.15);\n  transform: translateY(-2px);\n  box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);\n}\n\n.nav-links a.active {\n  background: rgba(255, 255, 255, 0.2);\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\n}\n\n.nav-links a i {\n  margin-right: 8px;\n  font-size: 1.1rem;\n}\n\n/* Right side: Login & Register */\n.nav-right {\n  display: flex;\n  align-items: center;\n}\n\n.login-btn,\n.register-btn,\n.logout-btn {\n  text-decoration: none;\n  color: white;\n  font-weight: 500;\n  padding: 0.5rem 1rem;\n  border-radius: 6px;\n  transition: all 0.3s ease;\n  margin-left: 0.5rem;\n  font-size: 1rem;\n  display: inline-flex;\n  align-items: center;\n  border: none;\n  background: transparent;\n  cursor: pointer;\n  position: relative;\n  overflow: hidden;\n}\n\n.login-btn::before,\n.register-btn::before,\n.logout-btn::before {\n  content: '';\n  position: absolute;\n  top: 0;\n  left: -100%;\n  width: 100%;\n  height: 100%;\n  background: rgba(255, 255, 255, 0.1);\n  transition: left 0.3s ease;\n}\n\n.login-btn:hover::before,\n.register-btn:hover::before,\n.logout-btn:hover::before {\n  left: 100%;\n}\n\n.login-btn:hover,\n.logout-btn:hover {\n  background: rgba(255, 255, 255, 0.1);\n  transform: translateY(-2px);\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);\n}\n\n.login-btn i,\n.register-btn i,\n.logout-btn i {\n  margin-right: 6px;\n}\n\n.register-btn {\n  border: 1px solid white;\n}\n\n.register-btn:hover {\n  background-color: white;\n  color: #6a11cb;\n}\n\n.login-btn:hover {\n  color: yellow;\n}\n\n.nav-links a:hover {\n  color: yellow;\n}\n\n.nav-links a.active {\n  color: #ffd700;\n  font-weight: bold;\n  background: rgba(255, 255, 255, 0.1);\n  border-radius: 20px;\n}\n\n.nav-right a.active {\n  background: rgba(255, 255, 255, 0.2);\n  border-radius: 20px;\n}\n\n.profile-link {\n  color: white;\n  text-decoration: none;\n  padding: 0.5rem 1rem;\n  border-radius: 6px;\n  transition: all 0.3s ease;\n  margin-right: 0.5rem;\n  font-size: 1rem;\n  display: inline-flex;\n  align-items: center;\n  border: none;\n  background: transparent;\n  cursor: pointer;\n}\n\n.profile-link:hover {\n  background: rgba(255, 255, 255, 0.1);\n  color: #ffd700;\n}\n\n.profile-link i {\n  margin-right: 6px;\n}\n\n/* User menu dropdown */\n.user-menu {\n  position: relative;\n  display: inline-block;\n}\n\n.user-dropdown-btn {\n  background: rgba(255, 255, 255, 0.1);\n  border: 1px solid rgba(255, 255, 255, 0.2);\n  padding: 8px 16px;\n  border-radius: 25px;\n  color: white;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  font-size: 14px;\n  transition: all 0.3s ease;\n}\n\n.user-dropdown-btn:hover {\n  background: rgba(255, 255, 255, 0.2);\n  transform: translateY(-2px);\n}\n\n.user-dropdown {\n  position: absolute;\n  top: 100%;\n  right: 0;\n  background: white;\n  border-radius: 8px;\n  box-shadow: 0 8px 25px rgba(0,0,0,0.15);\n  min-width: 180px;\n  opacity: 0;\n  visibility: hidden;\n  transform: translateY(-10px);\n  transition: all 0.3s ease;\n  z-index: 1000;\n}\n\n.user-dropdown.show {\n  opacity: 1;\n  visibility: visible;\n  transform: translateY(0);\n}\n\n.user-dropdown a {\n  display: block;\n  padding: 12px 16px;\n  color: #333;\n  text-decoration: none;\n  border-bottom: 1px solid #f0f0f0;\n  transition: background 0.2s;\n}\n\n.user-dropdown a:last-child {\n  border-bottom: none;\n}\n\n.user-dropdown a:hover {\n  background: #f8f9fa;\n}\n\n.user-dropdown a i {\n  margin-right: 8px;\n  width: 16px;\n}\n\n.user-greeting {\n  color: white;\n  margin-right: 1rem;\n  font-weight: 500;\n}\n\n/* HERO SECTION */\n.hero {\n  color: white;\n  text-align: center;\n}\n\n.hero-text h1 {\n  font-size: 2.8rem;\n  font-weight: bold;\n  min-height: 60px;\n  margin-bottom: 1rem;\n  letter-spacing: 1px;\n}\n\n.hero-text p {\n  font-size: 1.1rem;\n  max-width: 700px;\n  margin: 0 auto 2rem auto;\n  color: #f0f0f0;\n}\n\n.cta-buttons {\n  margin: 2rem 0;\n}\n\n.btn-primary, .btn-outline {\n  padding: 0.8rem 1.5rem;\n  margin: 0.5rem;\n  font-weight: bold;\n  font-size: 1rem;\n  border-radius: 8px;\n  cursor: pointer;\n  border: none;\n  display: inline-flex;\n  align-items: center;\n  transition: all 0.3s ease;\n}\n\n.btn-primary {\n  background: linear-gradient(to right, #6a11cb, #2575fc);\n  color: white;\n  box-shadow: 0 4px 14px rgba(0, 0, 0, 0.2);\n}\n\n.btn-primary a{\n  text-decoration: none;\n  color: white;\n}\n\n.btn-primary:hover {\n  background: linear-gradient(to right, #5a01a7, #1b5dff);\n  transform: translateY(-2px);\n  box-shadow: 0 6px 18px rgba(0, 0, 0, 0.3);\n}\n\n.btn-outline {\n  background: transparent;\n  color: white;\n  border: 2px solid white;\n}\n\n.btn-outline:hover {\n  background-color: white;\n  color: #6a11cb;\n  transform: translateY(-2px);\n  box-shadow: 0 6px 18px rgba(0, 0, 0, 0.15);\n}\n\n.btn-primary i,\n.btn-outline i {\n  margin-right: 8px;\n}\n\n.features {\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  margin: 3rem auto 2rem;\n  gap: 2rem;\n}\n\n.feature-card {\n  background: white;\n  color: #222;\n  border-radius: 16px;\n  padding: 1.5rem;\n  width: 230px;\n  text-align: center;\n  box-shadow: 0 8px 20px rgba(0, 0, 0, 0.1);\n  animation: float 3s ease-in-out infinite;\n}\n\n.feature-card i {\n  font-size: 2.2rem;\n  color: #0e2ecb;\n  margin-bottom: 1rem;\n}\n\n.feature-card h3 {\n  font-size: 1.2rem;\n  color: #1c1c1c;\n  margin-bottom: 0.5rem;\n}\n\n.feature-card p {\n  font-size: 0.95rem;\n  color: #555;\n  font-weight: 500;\n}\n\n/* Floating Animation */\n@keyframes float {\n  0% {\n    transform: translateY(0);\n  }\n  50% {\n    transform: translateY(-10px);\n  }\n  100% {\n    transform: translateY(0);\n  }\n}\n\n.feature-card:hover {\n  transform: scale(1.03);\n  transition: 0.3s ease;\n  box-shadow: 0 12px 24px rgba(0, 0, 0, 0.2);\n}\n\n/* Featured Projects */\n.featured-projects {\n  background: white;\n  color: #222;\n  padding: 3rem 2rem;\n  margin: 2rem 0;\n}\n\n.featured-projects h2 {\n  text-align: center;\n  margin-bottom: 2rem;\n  color: #1c1c1c;\n}\n\n.projects-grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\n  gap: 2rem;\n  max-width: 1200px;\n  margin: 0 auto;\n}\n\n.project-card {\n  background: white;\n  border-radius: 12px;\n  padding: 1.5rem;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\n  transition: transform 0.3s ease, box-shadow 0.3s ease;\n  border: 1px solid #e0e0e0;\n}\n\n.project-card:hover {\n  transform: translateY(-4px);\n  box-shadow: 0 8px 20px rgba(0, 0, 0, 0.15);\n}\n\n.project-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 1rem;\n}\n\n.project-category {\n  background: linear-gradient(to right, #6a11cb, #2575fc);\n  color: white;\n  padding: 0.25rem 0.75rem;\n  border-radius: 20px;\n  font-size: 0.8rem;\n  font-weight: 500;\n}\n\n.project-date {\n  color: #999;\n  font-size: 0.8rem;\n}\n\n.project-title {\n  font-size: 1.3rem;\n  font-weight: bold;\n  margin-bottom: 0.5rem;\n  color: #1c1c1c;\n}\n\n.project-owner {\n  color: #666;\n  font-size: 0.9rem;\n  margin-bottom: 1rem;\n  display: flex;\n  align-items: center;\n}\n\n.project-owner i {\n  margin-right: 0.5rem;\n  color: #6a11cb;\n}\n\n.project-description {\n  color: #555;\n  line-height: 1.5;\n  margin-bottom: 1rem;\n  display: -webkit-box;\n  -webkit-line-clamp: 3;\n  -webkit-box-orient: vertical;\n  overflow: hidden;\n}\n\n.project-stats {\n  display: flex;\n  justify-content: space-between;\n  padding-top: 1rem;\n  border-top: 1px solid #e0e0e0;\n  font-size: 0.9rem;\n}\n\n.project-stat {\n  display: flex;\n  align-items: center;\n  color: #666;\n}\n\n.project-stat i {\n  margin-right: 0.25rem;\n  color: #6a11cb;\n}\n\n.stats {\n  margin-top: 3rem;\n  display: flex;\n  justify-content: center;\n  gap: 2.5rem;\n  flex-wrap: wrap;\n  text-align: center;\n}\n\n.stat-card {\n  color: white;\n  padding: 2.5rem;\n  min-width: 160px;\n}\n\n.stat-card i {\n  font-size: 2rem;\n  margin-bottom: 0.5rem;\n  color: #ffd700;\n}\n\n.stat-card h3 {\n  font-size: 1.8rem;\n  margin: 0.3rem 0;\n  color: #fff;\n}\n\n.stat-card p {\n  font-size: 1rem;\n  color: #f0f0f0;\n  font-weight: 500;\n}\n\n.why-collabfund {\n  background-color: white;\n  text-align: center;\n  padding: 2rem 2rem;\n  color: #1c1c1c;\n}\n\n.why-collabfund h2 {\n  font-size: 2rem;\n  margin-bottom: 0.5rem;\n  font-weight: bold;\n}\n\n.why-collabfund p {\n  font-size: 1.1rem;\n  color: #444;\n  margin-bottom: 3rem;\n}\n\n/* Grid Layout */\n.why-grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));\n  gap: 2rem;\n  max-width: 1200px;\n  margin: 0 auto;\n}\n\n/* Individual Card */\n.why-card {\n  background: rgba(255, 255, 255, 0.95);\n  backdrop-filter: blur(20px);\n  padding: 2rem 1.5rem;\n  border-radius: 20px;\n  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);\n  text-align: center;\n  transition: all 0.4s ease;\n  border: 1px solid rgba(255, 255, 255, 0.2);\n}\n\n.why-card:hover {\n  transform: translateY(-8px);\n  box-shadow: 0 16px 48px rgba(0, 0, 0, 0.2);\n  border-color: rgba(255, 255, 255, 0.4);\n  background: rgba(255, 255, 255, 0.98);\n}\n\n.icon-circle {\n  background: linear-gradient(to right, #6a11cb, #2575fc);\n  color: white;\n  width: 60px;\n  height: 60px;\n  border-radius: 50%;\n  margin: 0 auto 1rem auto;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 1.6rem;\n}\n\n.why-card h3 {\n  font-size: 1.1rem;\n  margin-bottom: 0.6rem;\n  color: #1c1c1c;\n}\n\n.why-card p {\n  font-size: 0.95rem;\n  color: #555;\n}\n\n/* Launch CTA Section */\n.launch-section {\n  background: linear-gradient(to right, #6a11cb, #2575fc);\n  padding: 3rem 2rem;\n  color: white;\n}\n\n.launch-content {\n  max-width: 1500px;\n  margin: 0 auto;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  flex-wrap: wrap;\n  gap: 1rem;\n}\n\n.launch-text h2 {\n  font-size: 2.2rem;\n  font-weight: bold;\n  margin-bottom: 0.5rem;\n}\n\n.launch-text p {\n  font-size: 1rem;\n  color: #e0e0e0;\n}\n\n.launch-btn {\n  background: white;\n  color: #1a1a1a;\n  padding: 0.8rem 1.5rem;\n  font-weight: 600;\n  border-radius: 12px;\n  text-decoration: none;\n  display: inline-flex;\n  align-items: center;\n  transition: all 0.3s ease;\n}\n\n.launch-btn i {\n  margin-right: 0.5rem;\n}\n\n/* Hover Effect */\n.launch-btn:hover {\n  background: #ffd700;\n  color: #000;\n  transform: translateY(-2px);\n  box-shadow: 0 6px 14px rgba(0, 0, 0, 0.2);\n}\n\n.site-footer {\n  background-color: #1e1e1e;\n  color: #ccc;\n  font-family: 'Segoe UI', sans-serif;\n  padding: 1rem 1.5rem 0 1rem;\n  margin-top: 0;\n}\n\n.footer-container {\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-between;\n  gap: 2rem;\n  max-width: 1200px;\n  margin: 0 auto;\n}\n\n.footer-col {\n  flex: 1 1 220px;\n  min-width: 200px;\n}\n\n.logo-col h3 {\n  color: white;\n  margin-bottom: 0.5rem;\n  font-size: 1.3rem;\n}\n\n.footer-col h4 {\n  color: white;\n  margin-bottom: 0.8rem;\n  font-size: 1.1rem;\n}\n\n.footer-col p,\n.footer-col li a {\n  font-size: 0.95rem;\n  color: #aaa;\n  line-height: 1.6;\n  text-decoration: none;\n}\n\n.footer-col ul {\n  list-style: none;\n  padding: 0;\n  margin: 0;\n}\n\n.footer-col li {\n  margin-bottom: 0.5rem;\n}\n\n.footer-col a:hover {\n  color: #fff;\n}\n\n.social-icons a {\n  display: inline-block;\n  margin-right: 10px;\n  font-size: 1.2rem;\n  color: #999;\n  background: #333;\n  padding: 0.5rem;\n  border-radius: 50%;\n  transition: 0.3s ease;\n}\n\n.social-icons a:hover {\n  background: #6a11cb;\n  color: white;\n}\n\n.footer-bottom {\n  text-align: center;\n  padding: 1rem 0;\n  border-top: 1px solid #333;\n  margin-top: 2rem;\n  color: #999;\n}\n\n/* Message Container */\n.message-container {\n  position: fixed;\n  top: 20px;\n  right: 20px;\n  z-index: 10000;\n}\n\n.message {\n  background: white;\n  color: #333;\n  padding: 1rem 1.5rem;\n  border-radius: 8px;\n  margin-bottom: 10px;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\n  border-left: 4px solid #6a11cb;\n  animation: slideIn 0.3s ease;\n}\n\n.message.success {\n  border-left-color: #28a745;\n}\n\n.message.error {\n  border-left-color: #dc3545;\n}\n\n@keyframes slideIn {\n  from {\n    transform: translateX(100%);\n    opacity: 0;\n  }\n  to {\n    transform: translateX(0);\n    opacity: 1;\n  }\n}\n\n/* Responsive Design */\n@media (max-width: 768px) {\n  .navbar {\n    padding: 1rem 2rem;\n  }\n  \n  .nav-links {\n    display: none;\n  }\n  \n  .hero-text h1 {\n    font-size: 2rem;\n  }\n  \n  .projects-grid {\n    grid-template-columns: 1fr;\n    gap: 1rem;\n  }\n  \n  .stats {\n    gap: 1rem;\n  }\n  \n  .stat-card {\n    padding: 1.5rem;\n    min-width: 120px;\n  }\n  \n  .modal-content {\n    max-width: 95%;\n    width: 95%;\n  }\n  \n  .modal-header {\n    padding: 1rem 1.5rem;\n  }\n  \n  .modal-body {\n    padding: 1.5rem;\n  }\n  \n  .modal-footer {\n    padding: 1rem 1.5rem;\n    flex-direction: column;\n    gap: 0.5rem;\n  }\n  \n  .form-group {\n    margin-bottom: 1rem;\n  }\n}\n\n/* TOAST MESSAGES */\n.toast {\n  position: fixed;\n  top: 20px;\n  right: 20px;\n  padding: 1rem 1.5rem;\n  border-radius: 8px;\n  color: white;\n  font-weight: bold;\n  z-index: 10000;\n  animation: slideIn 0.3s ease;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n  max-width: 400px;\n}\n\n.toast-success {\n  background: linear-gradient(135deg, #28a745, #20c997);\n}\n\n.toast-error {\n  background: linear-gradient(135deg, #dc3545, #e74c3c);\n}\n\n.toast-warning {\n  background: linear-gradient(135deg, #ffc107, #fd7e14);\n}\n\n.toast-info {\n  background: linear-gradient(135deg, #17a2b8, #6f42c1);\n}\n\n/* MODAL STYLES */\n.modal {\n  display: none;\n  position: fixed;\n  z-index: 1000;\n  left: 0;\n  top: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.5);\n  backdrop-filter: blur(5px);\n}\n\n.modal.show {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.modal-content {\n  background: white;\n  border-radius: 15px;\n  box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);\n  max-width: 600px;\n  width: 90%;\n  max-height: 85vh;\n  overflow-y: auto;\n  animation: modalSlideIn 0.3s ease;\n}\n\n@keyframes modalSlideIn {\n  from {\n    transform: scale(0.7);\n    opacity: 0;\n  }\n  to {\n    transform: scale(1);\n    opacity: 1;\n  }\n}\n\n.modal-header {\n  padding: 1.5rem 2rem;\n  border-bottom: 1px solid #e1e8ed;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.modal-header h3 {\n  margin: 0;\n  color: #333;\n  font-size: 1.3rem;\n}\n\n.modal-header i {\n  margin-right: 0.5rem;\n  color: #667eea;\n}\n\n.close-modal {\n  font-size: 1.5rem;\n  font-weight: bold;\n  color: #999;\n  cursor: pointer;\n  transition: color 0.3s ease;\n}\n\n.close-modal:hover {\n  color: #333;\n}\n\n.modal-body {\n  padding: 2rem;\n}\n\n.modal-footer {\n  padding: 1.5rem 2rem;\n  border-top: 1px solid #e1e8ed;\n  display: flex;\n  justify-content: flex-end;\n  gap: 1rem;\n}\n\n.btn-secondary {\n  background: #6c757d;\n  color: white;\n  padding: 0.75rem 1.5rem;\n  border: none;\n  border-radius: 8px;\n  cursor: pointer;\n  font-size: 1rem;\n  transition: all 0.3s ease;\n}\n\n.btn-secondary:hover {\n  background: #5a6268;\n}\n","size_bytes":15875},"static/js/auth.js":{"content":"// Authentication JavaScript\n\ndocument.addEventListener('DOMContentLoaded', function() {\n    // Check if user is already logged in\n    checkAuthStatus();\n    \n    // Handle login form\n    const loginForm = document.getElementById('login-form');\n    if (loginForm) {\n        loginForm.addEventListener('submit', handleLogin);\n    }\n    \n    // Handle register form  \n    const registerForm = document.getElementById('register-form');\n    if (registerForm) {\n        registerForm.addEventListener('submit', handleRegister);\n    }\n});\n\nasync function checkAuthStatus() {\n    try {\n        const response = await fetch('/api/user');\n        if (response.ok) {\n            const data = await response.json();\n            // User is logged in, redirect to dashboard if on login/register page\n            if (window.location.pathname === '/login.html' || window.location.pathname === '/register.html') {\n                window.location.href = '/dashboard.html';\n            }\n        }\n    } catch (error) {\n        console.log('User not authenticated');\n    }\n}\n\nasync function handleLogin(e) {\n    e.preventDefault();\n    \n    const username = document.getElementById('username').value;\n    const password = document.getElementById('password').value;\n    const errorDiv = document.getElementById('error-message');\n    const submitBtn = e.target.querySelector('button[type=\"submit\"]');\n    \n    // Clear previous errors\n    errorDiv.style.display = 'none';\n    \n    // Disable submit button\n    submitBtn.disabled = true;\n    submitBtn.innerHTML = '<i class=\"fas fa-spinner fa-spin\"></i> Signing In...';\n    \n    try {\n        const response = await fetch('/api/login', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                username: username,\n                password: password\n            })\n        });\n        \n        const data = await response.json();\n        \n        if (response.ok) {\n            // Login successful\n            showMessage('Login successful! Redirecting...', 'success');\n            setTimeout(() => {\n                window.location.href = '/dashboard.html';\n            }, 1000);\n        } else {\n            // Login failed\n            errorDiv.textContent = data.error || 'Login failed';\n            errorDiv.style.display = 'block';\n        }\n    } catch (error) {\n        console.error('Login error:', error);\n        errorDiv.textContent = 'Network error. Please try again.';\n        errorDiv.style.display = 'block';\n    } finally {\n        // Re-enable submit button\n        submitBtn.disabled = false;\n        submitBtn.innerHTML = '<i class=\"fas fa-sign-in-alt\"></i> Sign In';\n    }\n}\n\nasync function handleRegister(e) {\n    e.preventDefault();\n    \n    const username = document.getElementById('username').value;\n    const email = document.getElementById('email').value;\n    const fullName = document.getElementById('fullName').value;\n    const college = document.getElementById('college').value;\n    const password = document.getElementById('password').value;\n    const confirmPassword = document.getElementById('confirmPassword').value;\n    const agree = document.getElementById('agree').checked;\n    \n    const errorDiv = document.getElementById('error-message');\n    const successDiv = document.getElementById('success-message');\n    const submitBtn = e.target.querySelector('button[type=\"submit\"]');\n    \n    // Clear previous messages\n    errorDiv.style.display = 'none';\n    successDiv.style.display = 'none';\n    \n    // Validate passwords match\n    if (password !== confirmPassword) {\n        errorDiv.textContent = 'Passwords do not match';\n        errorDiv.style.display = 'block';\n        return;\n    }\n    \n    // Validate terms agreement\n    if (!agree) {\n        errorDiv.textContent = 'Please agree to the terms and conditions';\n        errorDiv.style.display = 'block';\n        return;\n    }\n    \n    // Disable submit button\n    submitBtn.disabled = true;\n    submitBtn.innerHTML = '<i class=\"fas fa-spinner fa-spin\"></i> Creating Account...';\n    \n    try {\n        const response = await fetch('/api/register', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                username: username,\n                email: email,\n                fullName: fullName,\n                college: college,\n                password: password\n            })\n        });\n        \n        const data = await response.json();\n        \n        if (response.ok) {\n            // Registration successful\n            successDiv.textContent = 'Account created successfully! Redirecting...';\n            successDiv.style.display = 'block';\n            setTimeout(() => {\n                window.location.href = '/dashboard.html';\n            }, 1500);\n        } else {\n            // Registration failed\n            errorDiv.textContent = data.error || 'Registration failed';\n            errorDiv.style.display = 'block';\n        }\n    } catch (error) {\n        console.error('Registration error:', error);\n        errorDiv.textContent = 'Network error. Please try again.';\n        errorDiv.style.display = 'block';\n    } finally {\n        // Re-enable submit button\n        submitBtn.disabled = false;\n        submitBtn.innerHTML = '<i class=\"fas fa-user-plus\"></i> Create Account';\n    }\n}\n\nfunction showMessage(message, type = 'info') {\n    const container = document.getElementById('message-container') || createMessageContainer();\n    \n    const messageDiv = document.createElement('div');\n    messageDiv.className = `message ${type}`;\n    messageDiv.textContent = message;\n    \n    container.appendChild(messageDiv);\n    \n    // Remove message after 5 seconds\n    setTimeout(() => {\n        if (messageDiv.parentNode) {\n            messageDiv.parentNode.removeChild(messageDiv);\n        }\n    }, 5000);\n}\n\nfunction createMessageContainer() {\n    const container = document.createElement('div');\n    container.id = 'message-container';\n    container.className = 'message-container';\n    document.body.appendChild(container);\n    return container;\n}\n","size_bytes":6209},"static/js/browse.js":{"content":"// Browse projects JavaScript functionality\n\nlet currentUser = null;\nlet currentPage = 1;\nlet currentFilters = {\n    search: '',\n    category: '',\n    sort: 'recent'\n};\nlet currentProject = null;\nlet isLoading = false;\n\ndocument.addEventListener('DOMContentLoaded', function() {\n    // Check authentication\n    checkAuthStatus();\n    \n    // Setup filters and search\n    setupFilters();\n    \n    // Setup modals\n    setupModals();\n    \n    // Load initial projects\n    loadProjects();\n    \n    // Check if specific project ID in URL\n    checkForProjectInURL();\n});\n\nasync function checkAuthStatus() {\n    try {\n        const response = await fetch('/api/user');\n        if (response.ok) {\n            const data = await response.json();\n            currentUser = data.user;\n            updateNavbarForLoggedInUser();\n            showCommentSection();\n        }\n    } catch (error) {\n        console.log('User not authenticated');\n    }\n}\n\nfunction updateNavbarForLoggedInUser() {\n    const navAuth = document.getElementById('nav-auth');\n    const dashboardLink = document.getElementById('dashboard-link');\n    \n    if (navAuth && currentUser) {\n        navAuth.innerHTML = `\n            <span class=\"user-greeting\">Welcome, ${currentUser.username}!</span>\n            <button class=\"logout-btn\" onclick=\"handleLogout()\"><i class=\"fas fa-sign-out-alt\"></i> Logout</button>\n        `;\n    }\n    \n    if (dashboardLink) {\n        dashboardLink.style.display = 'inline-flex';\n    }\n}\n\nfunction showCommentSection() {\n    const commentSection = document.getElementById('add-comment-section');\n    if (commentSection) {\n        commentSection.style.display = 'block';\n    }\n}\n\nfunction setupFilters() {\n    const searchInput = document.getElementById('search-input');\n    const categoryFilter = document.getElementById('category-filter');\n    const sortFilter = document.getElementById('sort-filter');\n    \n    if (searchInput) {\n        searchInput.addEventListener('input', debounce(handleSearch, 300));\n    }\n    \n    if (categoryFilter) {\n        categoryFilter.addEventListener('change', handleCategoryFilter);\n    }\n    \n    if (sortFilter) {\n        sortFilter.addEventListener('change', handleSortFilter);\n    }\n}\n\nfunction handleSearch(e) {\n    currentFilters.search = e.target.value;\n    resetAndLoadProjects();\n}\n\nfunction handleCategoryFilter(e) {\n    currentFilters.category = e.target.value;\n    resetAndLoadProjects();\n}\n\nfunction handleSortFilter(e) {\n    currentFilters.sort = e.target.value;\n    resetAndLoadProjects();\n}\n\nfunction resetAndLoadProjects() {\n    currentPage = 1;\n    document.getElementById('projects-grid').innerHTML = '';\n    loadProjects();\n}\n\nasync function loadProjects() {\n    if (isLoading) return;\n    \n    isLoading = true;\n    const loadingEl = document.getElementById('loading');\n    const noResultsEl = document.getElementById('no-results');\n    const loadMoreContainer = document.getElementById('load-more-container');\n    \n    if (loadingEl) loadingEl.style.display = 'block';\n    if (noResultsEl) noResultsEl.style.display = 'none';\n    \n    try {\n        const params = new URLSearchParams({\n            page: currentPage,\n            per_page: 9,\n            sort: currentFilters.sort\n        });\n        \n        if (currentFilters.category) {\n            params.append('category', currentFilters.category);\n        }\n        \n        if (currentFilters.search) {\n            params.append('search', currentFilters.search);\n        }\n        \n        const response = await fetch(`/api/projects?${params}`);\n        \n        if (response.ok) {\n            const data = await response.json();\n            displayProjects(data.projects, currentPage === 1);\n            \n            // Show/hide load more button\n            if (loadMoreContainer) {\n                if (currentPage < data.pages) {\n                    loadMoreContainer.style.display = 'block';\n                } else {\n                    loadMoreContainer.style.display = 'none';\n                }\n            }\n            \n            // Show no results if no projects\n            if (data.projects.length === 0 && currentPage === 1) {\n                if (noResultsEl) noResultsEl.style.display = 'block';\n            }\n        } else {\n            console.error('Failed to load projects');\n        }\n    } catch (error) {\n        console.error('Error loading projects:', error);\n        showMessage('Error loading projects', 'error');\n    } finally {\n        isLoading = false;\n        if (loadingEl) loadingEl.style.display = 'none';\n    }\n}\n\nfunction displayProjects(projects, clearExisting = false) {\n    const projectsGrid = document.getElementById('projects-grid');\n    if (!projectsGrid) return;\n    \n    if (clearExisting) {\n        projectsGrid.innerHTML = '';\n    }\n    \n    const projectsHTML = projects.map(project => `\n        <div class=\"project-card\" onclick=\"openProjectModal(${project.id})\">\n            <div class=\"project-image\">\n                ${getProjectImageHTML(project)}\n                ${currentUser && project.can_edit ? `\n                    <div class=\"project-edit-overlay\" onclick=\"event.stopPropagation()\">\n                        <button class=\"btn btn-sm btn-secondary\" onclick=\"editProject(${project.id})\" title=\"Edit Project\">\n                            <i class=\"fas fa-edit\"></i>\n                        </button>\n                        <button class=\"btn btn-sm btn-danger\" onclick=\"deleteProject(${project.id})\" title=\"Delete Project\">\n                            <i class=\"fas fa-trash\"></i>\n                        </button>\n                    </div>\n                ` : ''}\n            </div>\n            <div class=\"project-content\">\n                <div class=\"project-header\">\n                    <span class=\"project-category\">${project.category}</span>\n                    <span class=\"project-date\">${formatDate(project.created_at)}</span>\n                </div>\n                <h3 class=\"project-title\">${escapeHtml(project.title)}</h3>\n                <div class=\"project-owner\">\n                    <i class=\"fas fa-user\"></i>\n                    <span>${escapeHtml(project.owner?.full_name || 'Unknown')}</span>\n                </div>\n                <div class=\"project-description-container\">\n                    <p class=\"project-description ${project.description.length > 150 ? 'truncated' : 'expanded'}\" id=\"desc-${project.id}\">\n                        ${escapeHtml(project.description)}\n                    </p>\n                    ${project.description.length > 150 ? `\n                        <button class=\"description-toggle\" onclick=\"toggleDescription(${project.id}, event)\" id=\"toggle-${project.id}\">\n                            Read More <i class=\"fas fa-chevron-down\"></i>\n                        </button>\n                    ` : ''}\n                </div>\n                <div class=\"project-stats\">\n                    <div class=\"project-stat\">\n                        <i class=\"fas fa-thumbs-up\"></i>\n                        <span>${project.vote_count}</span>\n                    </div>\n                    <div class=\"project-stat\">\n                        <i class=\"fas fa-dollar-sign\"></i>\n                        <span>$${project.current_funding.toFixed(2)}</span>\n                    </div>\n                    <div class=\"project-stat\">\n                        <i class=\"fas fa-users\"></i>\n                        <span>${project.collaboration_count}</span>\n                    </div>\n                </div>\n            </div>\n        </div>\n    `).join('');\n    \n    projectsGrid.insertAdjacentHTML('beforeend', projectsHTML);\n}\n\n// Setup load more functionality\ndocument.addEventListener('DOMContentLoaded', function() {\n    const loadMoreBtn = document.getElementById('load-more-btn');\n    if (loadMoreBtn) {\n        loadMoreBtn.addEventListener('click', function() {\n            currentPage++;\n            loadProjects();\n        });\n    }\n});\n\nfunction setupModals() {\n    // Project modal\n    const projectModal = document.getElementById('project-modal');\n    const closeModalBtns = document.querySelectorAll('.close-modal');\n    \n    closeModalBtns.forEach(btn => {\n        btn.addEventListener('click', closeModals);\n    });\n    \n    // Close modal when clicking outside\n    document.addEventListener('click', function(e) {\n        if (e.target.classList.contains('modal')) {\n            closeModals();\n        }\n    });\n    \n    // Setup action buttons\n    setupActionButtons();\n}\n\n\n\nfunction setupActionButtons() {\n    const voteBtn = document.getElementById('vote-btn');\n    const collabBtn = document.getElementById('collab-btn');\n    const donateBtn = document.getElementById('donate-btn');\n    const submitCommentBtn = document.getElementById('submit-comment');\n    \n    if (voteBtn) {\n        voteBtn.addEventListener('click', handleVote);\n    }\n    \n    if (collabBtn) {\n        collabBtn.addEventListener('click', openCollabModal);\n    }\n    \n    if (donateBtn) {\n        donateBtn.addEventListener('click', handleDonateRedirect);\n    }\n    \n    if (submitCommentBtn) {\n        submitCommentBtn.addEventListener('click', handleAddComment);\n    }\n    \n    // Collaboration modal\n    const sendCollabBtn = document.getElementById('send-collab-request');\n    if (sendCollabBtn) {\n        sendCollabBtn.addEventListener('click', handleCollabRequest);\n    }\n    \n    // Donation modal\n    const sendDonationBtn = document.getElementById('send-donation');\n    if (sendDonationBtn) {\n        sendDonationBtn.addEventListener('click', handleDonation);\n    }\n}\n\nasync function openProjectModal(projectId) {\n    if (!currentUser) {\n        showMessage('Please login to view project details', 'error');\n        return;\n    }\n    \n    try {\n        const response = await fetch(`/api/projects/${projectId}`);\n        if (response.ok) {\n            const data = await response.json();\n            currentProject = data.project;\n            displayProjectModal(currentProject);\n            loadProjectComments(projectId);\n            \n            const modal = document.getElementById('project-modal');\n            modal.classList.add('show');\n        } else {\n            showMessage('Error loading project details', 'error');\n        }\n    } catch (error) {\n        console.error('Error loading project:', error);\n        showMessage('Error loading project details', 'error');\n    }\n}\n\nfunction getProjectImageHTML(project) {\n    // Check if project has image attachments\n    if (project.attachments && project.attachments.length > 0) {\n        const imageAttachment = project.attachments.find(att => \n            att.file_type && att.file_type.startsWith('image/')\n        );\n        if (imageAttachment) {\n            return `<img src=\"/static/${imageAttachment.file_path}\" alt=\"${escapeHtml(project.title)}\" />`;\n        }\n    }\n    // Default gradient background if no image - no placeholder div\n    const gradients = [\n        'linear-gradient(135deg, #667eea, #764ba2)',\n        'linear-gradient(135deg, #f093fb, #f5576c)',\n        'linear-gradient(135deg, #4facfe, #00f2fe)',\n        'linear-gradient(135deg, #43e97b, #38f9d7)',\n        'linear-gradient(135deg, #fa709a, #fee140)',\n        'linear-gradient(135deg, #a8edea, #fed6e3)'\n    ];\n    const gradient = gradients[project.id % gradients.length];\n    return `<div style=\"background: ${gradient}; width: 100%; height: 100%; border-radius: 8px; display: flex; align-items: center; justify-content: center; color: white; font-size: 1.2rem; font-weight: bold;\">${escapeHtml(project.title).substring(0, 20)}...</div>`;\n}\n\nfunction displayProjectModal(project) {\n    document.getElementById('modal-title').textContent = project.title;\n    document.getElementById('modal-category').textContent = project.category;\n    document.getElementById('modal-date').textContent = formatDate(project.created_at);\n    document.getElementById('modal-owner').querySelector('span').textContent = escapeHtml(project.owner?.full_name || 'Unknown');\n    document.getElementById('modal-votes').textContent = project.vote_count;\n    document.getElementById('modal-funding').textContent = `$${project.current_funding.toFixed(2)}`;\n    document.getElementById('modal-collabs').textContent = project.collaboration_count;\n    document.getElementById('modal-goal').textContent = `$${project.funding_goal ? project.funding_goal.toFixed(2) : '0.00'}`;\n    \n    // Update modal image\n    const modalImage = document.getElementById('modal-project-image');\n    if (modalImage) {\n        modalImage.innerHTML = getProjectImageHTML(project);\n    }\n    \n    // Show attachments if any\n    displayProjectAttachments(project);\n    \n    // Show full description in modal (no truncation needed)\n    const descriptionEl = document.getElementById('modal-description');\n    descriptionEl.innerHTML = escapeHtml(project.description);\n    descriptionEl.className = 'project-description full';\n    \n    // Remove any expand button in modal view\n    const expandBtn = descriptionEl.querySelector('.description-expand-btn');\n    if (expandBtn) {\n        expandBtn.remove();\n    }\n    \n    // Update action buttons based on ownership\n    const isOwner = currentUser && currentUser.id === project.owner?.id;\n    const voteBtn = document.getElementById('vote-btn');\n    const collabBtn = document.getElementById('collab-btn');\n    const donateBtn = document.getElementById('donate-btn');\n    \n    // Add project management buttons for owner\n    const projectActions = document.getElementById('project-actions');\n    if (projectActions) {\n        if (isOwner) {\n            projectActions.innerHTML = `\n                <button class=\"btn btn-secondary\" onclick=\"editProject(${project.id})\">\n                    <i class=\"fas fa-edit\"></i> Edit Project\n                </button>\n                <button class=\"btn btn-danger\" onclick=\"deleteProject(${project.id})\">\n                    <i class=\"fas fa-trash\"></i> Delete Project\n                </button>\n            `;\n        } else {\n            projectActions.innerHTML = '';\n        }\n    }\n    \n    if (isOwner) {\n        if (collabBtn) collabBtn.disabled = true;\n        if (collabBtn) collabBtn.textContent = 'Your Project';\n    } else {\n        if (collabBtn) collabBtn.disabled = false;\n        if (collabBtn) collabBtn.innerHTML = '<i class=\"fas fa-handshake\"></i> Collaborate';\n    }\n}\n\nfunction displayProjectAttachments(project) {\n    const attachmentsContainer = document.getElementById('modal-attachments');\n    if (!attachmentsContainer) return;\n    \n    if (!project.attachments || project.attachments.length === 0) {\n        attachmentsContainer.style.display = 'none';\n        return;\n    }\n    \n    attachmentsContainer.style.display = 'block';\n    const attachmentsList = attachmentsContainer.querySelector('.attachments-list');\n    \n    attachmentsList.innerHTML = project.attachments.map(attachment => {\n        const fileIcon = getFileIcon(attachment.file_type);\n        const fileSize = formatFileSize(attachment.file_size);\n        \n        return `\n            <div class=\"attachment-item\">\n                <div class=\"attachment-info\">\n                    <i class=\"${fileIcon}\"></i>\n                    <div class=\"attachment-details\">\n                        <span class=\"attachment-name\">${escapeHtml(attachment.original_filename)}</span>\n                        <span class=\"attachment-meta\">${fileSize} • ${attachment.file_type}</span>\n                    </div>\n                </div>\n                <a href=\"/static/${attachment.file_path}\" target=\"_blank\" class=\"attachment-download\">\n                    <i class=\"fas fa-download\"></i>\n                </a>\n            </div>\n        `;\n    }).join('');\n}\n\nasync function loadProjectComments(projectId) {\n    try {\n        const response = await fetch(`/api/projects/${projectId}/comments`);\n        if (response.ok) {\n            const data = await response.json();\n            displayComments(data.comments);\n        }\n    } catch (error) {\n        console.error('Error loading comments:', error);\n    }\n}\n\nfunction displayComments(comments) {\n    const commentsList = document.getElementById('comments-list');\n    if (!commentsList) return;\n    \n    if (comments.length === 0) {\n        commentsList.innerHTML = '<p style=\"color: #999; text-align: center;\">No comments yet. Be the first to comment!</p>';\n        return;\n    }\n    \n    commentsList.innerHTML = comments.map(comment => `\n        <div class=\"comment-item\" data-comment-id=\"${comment.id}\">\n            <div class=\"comment-header\">\n                <div class=\"comment-author\">${escapeHtml(comment.author?.full_name || 'Unknown')}</div>\n                <div class=\"comment-date\">${formatDate(comment.created_at)}</div>\n                ${currentUser && comment.author && currentUser.id === comment.author.id ? `\n                    <div class=\"comment-actions\">\n                        <button class=\"edit-comment-btn\" onclick=\"editComment(${comment.id})\" title=\"Edit Comment\">\n                            <i class=\"fas fa-edit\"></i>\n                        </button>\n                        <button class=\"delete-comment-btn\" onclick=\"deleteComment(${comment.id})\" title=\"Delete Comment\">\n                            <i class=\"fas fa-trash\"></i>\n                        </button>\n                    </div>\n                ` : ''}\n            </div>\n            <div class=\"comment-content\">\n                <p>${escapeHtml(comment.content)}</p>\n            </div>\n            <div class=\"comment-reactions\">\n                <button class=\"reaction-btn ${comment.user_reaction === 'like' ? 'active' : ''}\" onclick=\"toggleCommentReaction(${comment.id}, 'like')\">\n                    <i class=\"fas fa-thumbs-up\"></i> <span class=\"reaction-count\">${comment.like_count || 0}</span>\n                </button>\n                <button class=\"reaction-btn ${comment.user_reaction === 'heart' ? 'active' : ''}\" onclick=\"toggleCommentReaction(${comment.id}, 'heart')\">\n                    <i class=\"fas fa-heart\"></i> <span class=\"reaction-count\">${comment.heart_count || 0}</span>\n                </button>\n            </div>\n        </div>\n    `).join('');\n}\n\nasync function handleVote() {\n    if (!currentUser) {\n        showMessage('Please login to vote', 'error');\n        return;\n    }\n    \n    if (!currentProject) return;\n    \n    const voteBtn = document.getElementById('vote-btn');\n    voteBtn.disabled = true;\n    \n    try {\n        const response = await fetch(`/api/projects/${currentProject.id}/vote`, {\n            method: 'POST'\n        });\n        \n        const data = await response.json();\n        \n        if (response.ok) {\n            showMessage('Vote updated successfully!', 'success');\n            \n            // Update vote count in modal\n            document.getElementById('modal-votes').textContent = data.vote_count;\n            currentProject.vote_count = data.vote_count;\n            \n            // Update vote button appearance\n            voteBtn.classList.add('voted');\n        } else {\n            showMessage(data.error || 'Error voting', 'error');\n        }\n    } catch (error) {\n        console.error('Vote error:', error);\n        showMessage('Error voting', 'error');\n    } finally {\n        voteBtn.disabled = false;\n    }\n}\n\nfunction openCollabModal() {\n    if (!currentUser) {\n        showMessage('Please login to collaborate', 'error');\n        return;\n    }\n    \n    const collabModal = document.getElementById('collab-modal');\n    collabModal.classList.add('show');\n}\n\nasync function handleCollabRequest() {\n    const message = document.getElementById('collab-message').value;\n    const sendBtn = document.getElementById('send-collab-request');\n    \n    sendBtn.disabled = true;\n    sendBtn.innerHTML = '<i class=\"fas fa-spinner fa-spin\"></i> Sending...';\n    \n    try {\n        const response = await fetch(`/api/projects/${currentProject.id}/collaborate`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                message: message\n            })\n        });\n        \n        const data = await response.json();\n        \n        if (response.ok) {\n            showMessage('Collaboration request sent successfully!', 'success');\n            closeModals();\n            document.getElementById('collab-message').value = '';\n        } else {\n            showMessage(data.error || 'Error sending collaboration request', 'error');\n        }\n    } catch (error) {\n        console.error('Collaboration request error:', error);\n        showMessage('Error sending collaboration request', 'error');\n    } finally {\n        sendBtn.disabled = false;\n        sendBtn.innerHTML = '<i class=\"fas fa-handshake\"></i> Send Request';\n    }\n}\n\nfunction handleDonateRedirect() {\n    if (!currentUser) {\n        showMessage('Please login to donate', 'error');\n        return;\n    }\n    \n    if (!currentProject) {\n        showMessage('Project information not available', 'error');\n        return;\n    }\n    \n    // Redirect to donation page with project ID\n    window.location.href = `donate.html?project=${currentProject.id}`;\n}\n\nasync function handleDonation() {\n    const amount = parseFloat(document.getElementById('donation-amount').value);\n    const message = document.getElementById('donation-message').value;\n    const sendBtn = document.getElementById('send-donation');\n    \n    if (!amount || amount <= 0) {\n        showMessage('Please enter a valid donation amount', 'error');\n        return;\n    }\n    \n    sendBtn.disabled = true;\n    sendBtn.innerHTML = '<i class=\"fas fa-spinner fa-spin\"></i> Processing...';\n    \n    try {\n        const response = await fetch(`/api/projects/${currentProject.id}/donate`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                amount: amount,\n                message: message\n            })\n        });\n        \n        const data = await response.json();\n        \n        if (response.ok) {\n            showMessage('Donation successful! Thank you for your support!', 'success');\n            \n            // Update funding amount in modal\n            document.getElementById('modal-funding').textContent = `$${data.new_funding.toFixed(2)}`;\n            currentProject.current_funding = data.new_funding;\n            \n            closeModals();\n            document.getElementById('donation-amount').value = '';\n            document.getElementById('donation-message').value = '';\n        } else {\n            showMessage(data.error || 'Error processing donation', 'error');\n        }\n    } catch (error) {\n        console.error('Donation error:', error);\n        showMessage('Error processing donation', 'error');\n    } finally {\n        sendBtn.disabled = false;\n        sendBtn.innerHTML = '<i class=\"fas fa-heart\"></i> Donate Now';\n    }\n}\n\nasync function handleAddComment() {\n    if (!currentUser) {\n        showMessage('Please login to comment', 'error');\n        return;\n    }\n    \n    const content = document.getElementById('comment-input').value.trim();\n    if (!content) {\n        showMessage('Please enter a comment', 'error');\n        return;\n    }\n    \n    const submitBtn = document.getElementById('submit-comment');\n    submitBtn.disabled = true;\n    submitBtn.innerHTML = '<i class=\"fas fa-spinner fa-spin\"></i> Posting...';\n    \n    try {\n        const response = await fetch(`/api/projects/${currentProject.id}/comments`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                content: content\n            })\n        });\n        \n        const data = await response.json();\n        \n        if (response.ok) {\n            showMessage('Comment added successfully!', 'success');\n            document.getElementById('comment-input').value = '';\n            \n            // Reload comments\n            loadProjectComments(currentProject.id);\n        } else {\n            showMessage(data.error || 'Error adding comment', 'error');\n        }\n    } catch (error) {\n        console.error('Comment error:', error);\n        showMessage('Error adding comment', 'error');\n    } finally {\n        submitBtn.disabled = false;\n        submitBtn.innerHTML = '<i class=\"fas fa-paper-plane\"></i> Post Comment';\n    }\n}\n\nfunction closeModals() {\n    document.querySelectorAll('.modal').forEach(modal => {\n        modal.classList.remove('show');\n    });\n}\n\nfunction checkForProjectInURL() {\n    const urlParams = new URLSearchParams(window.location.search);\n    const projectId = urlParams.get('project');\n    \n    if (projectId) {\n        setTimeout(() => {\n            openProjectModal(parseInt(projectId));\n        }, 500);\n    }\n}\n\nasync function handleLogout() {\n    try {\n        const response = await fetch('/api/logout', {\n            method: 'POST'\n        });\n        \n        if (response.ok) {\n            showMessage('Logged out successfully', 'success');\n            setTimeout(() => {\n                window.location.href = '/';\n            }, 1000);\n        }\n    } catch (error) {\n        console.error('Logout error:', error);\n        showMessage('Error logging out', 'error');\n    }\n}\n\n// Utility functions\nfunction debounce(func, wait) {\n    let timeout;\n    return function executedFunction(...args) {\n        const later = () => {\n            clearTimeout(timeout);\n            func(...args);\n        };\n        clearTimeout(timeout);\n        timeout = setTimeout(later, wait);\n    };\n}\n\nfunction toggleDescription(projectId, event) {\n    event.stopPropagation(); // Prevent opening project modal\n    \n    const descElement = document.getElementById(`desc-${projectId}`);\n    const toggleElement = document.getElementById(`toggle-${projectId}`);\n    \n    if (!descElement || !toggleElement) return;\n    \n    const isExpanded = descElement.classList.contains('expanded');\n    \n    if (isExpanded) {\n        descElement.classList.remove('expanded');\n        descElement.classList.add('truncated');\n        toggleElement.innerHTML = 'Read More <i class=\"fas fa-chevron-down\"></i>';\n        toggleElement.classList.remove('expanded');\n    } else {\n        descElement.classList.remove('truncated');\n        descElement.classList.add('expanded');\n        toggleElement.innerHTML = 'Read Less <i class=\"fas fa-chevron-up\"></i>';\n        toggleElement.classList.add('expanded');\n    }\n}\n\nfunction formatDate(dateString) {\n    const date = new Date(dateString);\n    return date.toLocaleDateString('en-US', {\n        year: 'numeric',\n        month: 'short',\n        day: 'numeric'\n    });\n}\n\nfunction escapeHtml(text) {\n    const div = document.createElement('div');\n    div.textContent = text;\n    return div.innerHTML;\n}\n\nfunction showMessage(message, type = 'info') {\n    // Remove popup messages - just log to console instead\n    console.log(`${type}: ${message}`);\n}\n\n// Comment reaction and reply functions\nasync function toggleCommentReaction(commentId, reactionType) {\n    if (!currentUser) {\n        showMessage('Please login to react', 'error');\n        return;\n    }\n\n    try {\n        const response = await fetch(`/api/comment/${commentId}/reaction`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                reaction_type: reactionType\n            })\n        });\n\n        const data = await response.json();\n        \n        if (response.ok) {\n            const commentElement = document.querySelector(`[data-comment-id=\"${commentId}\"]`);\n            if (commentElement) {\n                // Update both like and heart buttons based on server response\n                const likeBtn = commentElement.querySelector(`[onclick*=\"'like'\"]`);\n                const heartBtn = commentElement.querySelector(`[onclick*=\"'heart'\"]`);\n                const likeCount = likeBtn.querySelector('.reaction-count');\n                const heartCount = heartBtn.querySelector('.reaction-count');\n                \n                // Update counts\n                likeCount.textContent = data.like_count || 0;\n                heartCount.textContent = data.heart_count || 0;\n                \n                // Update active states - only one can be active at a time\n                likeBtn.classList.toggle('active', data.user_reaction === 'like');\n                heartBtn.classList.toggle('active', data.user_reaction === 'heart');\n            }\n            showMessage('Reaction updated!', 'success');\n        } else {\n            showMessage(data.error || 'Error updating reaction', 'error');\n        }\n    } catch (error) {\n        console.error('Error toggling reaction:', error);\n        showMessage('Error updating reaction', 'error');\n    }\n}\n\n\n\nfunction cancelCommentReply(commentId) {\n    const repliesContainer = document.getElementById(`comment-replies-${commentId}`);\n    const replyForm = repliesContainer.querySelector('.comment-reply-form');\n    if (replyForm) {\n        replyForm.remove();\n    }\n}\n\nasync function submitCommentReply(commentId) {\n    const repliesContainer = document.getElementById(`comment-replies-${commentId}`);\n    const replyInput = repliesContainer.querySelector('.comment-reply-input');\n    const content = replyInput.value.trim();\n\n    if (!content) {\n        alert('Please enter a reply');\n        return;\n    }\n\n    const submitBtn = repliesContainer.querySelector('.btn-primary');\n    submitBtn.disabled = true;\n    submitBtn.innerHTML = '<i class=\"fas fa-spinner fa-spin\"></i> Replying...';\n\n    try {\n        const response = await fetch(`/api/projects/${currentProject.id}/comments`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                content: content\n            })\n        });\n\n        const data = await response.json();\n        \n        if (response.ok) {\n            cancelCommentReply(commentId);\n            \n            // Reload comments to show the new comment\n            loadProjectComments(currentProject.id);\n        } else {\n            alert(data.error || 'Error posting reply');\n        }\n    } catch (error) {\n        console.error('Error submitting reply:', error);\n        alert('Error posting reply');\n    } finally {\n        submitBtn.disabled = false;\n        submitBtn.innerHTML = '<i class=\"fas fa-paper-plane\"></i> Reply';\n    }\n}\n\nfunction getFileIcon(fileType) {\n    if (!fileType) return 'fas fa-file';\n    \n    if (fileType.startsWith('image/')) return 'fas fa-image';\n    if (fileType.startsWith('video/')) return 'fas fa-video';\n    if (fileType === 'application/pdf') return 'fas fa-file-pdf';\n    if (fileType.includes('word')) return 'fas fa-file-word';\n    if (fileType.includes('excel')) return 'fas fa-file-excel';\n    if (fileType.includes('powerpoint')) return 'fas fa-file-powerpoint';\n    \n    return 'fas fa-file';\n}\n\nfunction formatFileSize(bytes) {\n    if (!bytes) return '0 B';\n    \n    const k = 1024;\n    const sizes = ['B', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    \n    return parseFloat((bytes / Math.pow(k, i)).toFixed(1)) + ' ' + sizes[i];\n}\n\nfunction createMessageContainer() {\n    const container = document.createElement('div');\n    container.id = 'message-container';\n    container.className = 'message-container';\n    document.body.appendChild(container);\n    return container;\n}\n\n// Comment CRUD Functions\nasync function editComment(commentId) {\n    try {\n        const commentElement = document.querySelector(`[data-comment-id=\"${commentId}\"]`);\n        if (!commentElement) return;\n        \n        const commentContent = commentElement.querySelector(\".comment-content\");\n        const originalContent = commentContent.textContent.trim();\n        \n        // Create inline edit form\n        const editForm = `\n            <div class=\"comment-edit-form\">\n                <textarea class=\"edit-comment-textarea\" rows=\"3\">${escapeHtml(originalContent)}</textarea>\n                <div class=\"comment-edit-actions\">\n                    <button class=\"save-comment-btn\" onclick=\"saveCommentEdit(${commentId}, this, '${escapeHtml(originalContent)}')\">\n                        <i class=\"fas fa-save\"></i> Save\n                    </button>\n                    <button class=\"cancel-comment-btn\" onclick=\"cancelCommentEdit(${commentId}, this, '${escapeHtml(originalContent)}')\">\n                        Cancel\n                    </button>\n                </div>\n            </div>\n        `;\n        \n        commentContent.innerHTML = editForm;\n        \n    } catch (error) {\n        console.error(\"Error setting up comment edit:\", error);\n        showMessage(\"Error setting up comment edit\", \"error\");\n    }\n}\n\nasync function saveCommentEdit(commentId, saveBtn, originalContent) {\n    try {\n        const commentElement = document.querySelector(`[data-comment-id=\"${commentId}\"]`);\n        const textarea = commentElement.querySelector(\".edit-comment-textarea\");\n        const newContent = textarea.value.trim();\n        \n        if (!newContent) {\n            showMessage(\"Comment content cannot be empty\", \"error\");\n            return;\n        }\n        \n        saveBtn.disabled = true;\n        saveBtn.innerHTML = '<i class=\"fas fa-spinner fa-spin\"></i> Saving...';\n        \n        const response = await fetch(`/api/comments/${commentId}`, {\n            method: \"PUT\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n                content: newContent\n            })\n        });\n        \n        const data = await response.json();\n        \n        if (response.ok) {\n            // Replace edit form with updated content\n            const commentContent = commentElement.querySelector(\".comment-content\");\n            commentContent.innerHTML = `<p>${escapeHtml(newContent)} <em class=\"edit-indicator\">(edited)</em></p>`;\n            showMessage(\"Comment updated successfully!\", \"success\");\n        } else {\n            showMessage(data.error || \"Failed to update comment\", \"error\");\n            const commentContent = commentElement.querySelector(\".comment-content\");\n            commentContent.innerHTML = `<p>${originalContent}</p>`;\n        }\n        \n    } catch (error) {\n        console.error(\"Network error:\", error);\n        showMessage(\"Network error while updating comment\", \"error\");\n    }\n}\n\nfunction cancelCommentEdit(commentId, cancelBtn, originalContent) {\n    const commentElement = document.querySelector(`[data-comment-id=\"${commentId}\"]`);\n    const commentContent = commentElement.querySelector(\".comment-content\");\n    commentContent.innerHTML = `<p>${originalContent}</p>`;\n}\n\nasync function deleteComment(commentId) {\n    if (!confirm(\"Are you sure you want to delete this comment? This action cannot be undone.\")) {\n        return;\n    }\n    \n    try {\n        const response = await fetch(`/api/comments/${commentId}`, {\n            method: \"DELETE\"\n        });\n        \n        const data = await response.json();\n        \n        if (response.ok) {\n            // Remove comment from DOM\n            const commentElement = document.querySelector(`[data-comment-id=\"${commentId}\"]`);\n            if (commentElement) {\n                commentElement.remove();\n            }\n            showMessage(\"Comment deleted successfully!\", \"success\");\n        } else {\n            showMessage(data.error || \"Failed to delete comment\", \"error\");\n        }\n        \n    } catch (error) {\n        console.error(\"Network error:\", error);\n        showMessage(\"Network error while deleting comment\", \"error\");\n    }\n}\n\n// Project CRUD Functions\nasync function editProject(projectId) {\n    if (!currentUser) {\n        showMessage('Please login to edit projects', 'error');\n        return;\n    }\n    \n    try {\n        // Get current project data\n        const response = await fetch(`/api/projects/${projectId}`);\n        if (!response.ok) {\n            showMessage('Error loading project data', 'error');\n            return;\n        }\n        \n        const data = await response.json();\n        const project = data.project;\n        \n        // Check permission\n        if (!project.can_edit) {\n            showMessage('You can only edit your own projects', 'error');\n            return;\n        }\n        \n        // Create and show edit modal\n        const editModal = `\n            <div class=\"modal show\" id=\"edit-project-modal\">\n                <div class=\"modal-content\">\n                    <div class=\"modal-header\">\n                        <h2>Edit Project</h2>\n                        <button class=\"close-modal\" onclick=\"closeEditProjectModal()\">&times;</button>\n                    </div>\n                    <div class=\"modal-body\">\n                        <form id=\"edit-project-form\">\n                            <div class=\"form-group\">\n                                <label for=\"edit-title\">Project Title</label>\n                                <input type=\"text\" id=\"edit-title\" value=\"${escapeHtml(project.title)}\" required>\n                            </div>\n                            <div class=\"form-group\">\n                                <label for=\"edit-description\">Description</label>\n                                <textarea id=\"edit-description\" rows=\"5\" required>${escapeHtml(project.description)}</textarea>\n                            </div>\n                            <div class=\"form-group\">\n                                <label for=\"edit-category\">Category</label>\n                                <select id=\"edit-category\" required>\n                                    <option value=\"Web Development\" ${project.category === 'Web Development' ? 'selected' : ''}>Web Development</option>\n                                    <option value=\"Mobile Apps\" ${project.category === 'Mobile Apps' ? 'selected' : ''}>Mobile Apps</option>\n                                    <option value=\"AI/ML\" ${project.category === 'AI/ML' ? 'selected' : ''}>AI/ML</option>\n                                    <option value=\"IoT\" ${project.category === 'IoT' ? 'selected' : ''}>IoT</option>\n                                    <option value=\"Game Development\" ${project.category === 'Game Development' ? 'selected' : ''}>Game Development</option>\n                                    <option value=\"Other\" ${project.category === 'Other' ? 'selected' : ''}>Other</option>\n                                </select>\n                            </div>\n                            <div class=\"form-group\">\n                                <label for=\"edit-funding-goal\">Funding Goal ($)</label>\n                                <input type=\"number\" id=\"edit-funding-goal\" value=\"${project.funding_goal || 0}\" min=\"0\" step=\"0.01\">\n                            </div>\n                        </form>\n                    </div>\n                    <div class=\"modal-footer\">\n                        <button class=\"btn btn-secondary\" onclick=\"closeEditProjectModal()\">Cancel</button>\n                        <button class=\"btn btn-primary\" onclick=\"saveProjectEdit(${projectId})\">Save Changes</button>\n                    </div>\n                </div>\n            </div>\n        `;\n        \n        document.body.insertAdjacentHTML('beforeend', editModal);\n        \n    } catch (error) {\n        console.error('Error setting up project edit:', error);\n        showMessage('Error setting up project edit', 'error');\n    }\n}\n\nasync function saveProjectEdit(projectId) {\n    try {\n        const title = document.getElementById('edit-title').value.trim();\n        const description = document.getElementById('edit-description').value.trim();\n        const category = document.getElementById('edit-category').value;\n        const fundingGoal = parseFloat(document.getElementById('edit-funding-goal').value) || 0;\n        \n        if (!title || !description || !category) {\n            showMessage('Please fill in all required fields', 'error');\n            return;\n        }\n        \n        if (description.split(' ').length < 50) {\n            showMessage('Project description must be at least 50 words', 'error');\n            return;\n        }\n        \n        const saveBtn = document.querySelector('#edit-project-modal .btn-primary');\n        saveBtn.disabled = true;\n        saveBtn.innerHTML = '<i class=\"fas fa-spinner fa-spin\"></i> Saving...';\n        \n        const response = await fetch(`/api/projects/${projectId}`, {\n            method: 'PUT',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                title: title,\n                description: description,\n                category: category,\n                fundingGoal: fundingGoal\n            })\n        });\n        \n        const data = await response.json();\n        \n        if (response.ok) {\n            showMessage('Project updated successfully!', 'success');\n            closeEditProjectModal();\n            \n            // Refresh the projects list\n            currentPage = 1;\n            loadProjects();\n            \n            // Update current project if modal is open\n            if (currentProject && currentProject.id === projectId) {\n                currentProject = data.project;\n                displayProjectModal(currentProject);\n            }\n        } else {\n            showMessage(data.error || 'Failed to update project', 'error');\n        }\n        \n    } catch (error) {\n        console.error('Network error:', error);\n        showMessage('Network error while updating project', 'error');\n    } finally {\n        const saveBtn = document.querySelector('#edit-project-modal .btn-primary');\n        if (saveBtn) {\n            saveBtn.disabled = false;\n            saveBtn.innerHTML = 'Save Changes';\n        }\n    }\n}\n\nfunction closeEditProjectModal() {\n    const modal = document.getElementById('edit-project-modal');\n    if (modal) {\n        modal.remove();\n    }\n}\n\nasync function deleteProject(projectId) {\n    if (!currentUser) {\n        showMessage('Please login to delete projects', 'error');\n        return;\n    }\n    \n    if (!confirm('Are you sure you want to delete this project? This action cannot be undone and will remove all associated comments and data.')) {\n        return;\n    }\n    \n    try {\n        const response = await fetch(`/api/projects/${projectId}`, {\n            method: 'DELETE'\n        });\n        \n        const data = await response.json();\n        \n        if (response.ok) {\n            showMessage('Project deleted successfully!', 'success');\n            \n            // Close modal if current project was deleted\n            if (currentProject && currentProject.id === projectId) {\n                closeModals();\n                currentProject = null;\n            }\n            \n            // Refresh the projects list\n            currentPage = 1;\n            loadProjects();\n            \n        } else {\n            showMessage(data.error || 'Failed to delete project', 'error');\n        }\n        \n    } catch (error) {\n        console.error('Network error:', error);\n        showMessage('Network error while deleting project', 'error');\n    }\n}\n","size_bytes":43370},"static/js/dashboard.js":{"content":"// Dashboard JavaScript functionality\n\nlet currentUser = null;\nlet currentSection = 'overview';\nlet notifications = [];\nlet unreadCount = 0;\nlet currentNotificationFilter = 'all';\n\ndocument.addEventListener('DOMContentLoaded', function() {\n    // Check authentication\n    checkAuthAndLoadDashboard();\n    \n    // Setup navigation\n    setupSidebarNavigation();\n    \n    // Setup forms\n    setupProjectForm();\n    \n    // Setup logout\n    setupLogout();\n    \n    // Setup notifications\n    setupNotifications();\n    \n    // Start notification polling\n    startNotificationPolling();\n    \n    // Start real-time clock updates\n    startRealTimeUpdates();\n});\n\nasync function checkAuthAndLoadDashboard() {\n    try {\n        const response = await fetch('/api/user');\n        if (response.ok) {\n            const data = await response.json();\n            currentUser = data.user;\n            updateUserGreeting();\n            loadDashboardData();\n        } else {\n            // Redirect to login if not authenticated\n            window.location.href = '/login.html';\n        }\n    } catch (error) {\n        console.error('Auth check error:', error);\n        window.location.href = '/login.html';\n    }\n}\n\nfunction updateUserGreeting() {\n    const greetingEl = document.getElementById('user-greeting');\n    if (greetingEl && currentUser) {\n        greetingEl.textContent = `Welcome, ${currentUser.username}!`;\n    }\n}\n\nfunction setupSidebarNavigation() {\n    const navItems = document.querySelectorAll('.nav-item');\n    console.log('Setting up navigation for', navItems.length, 'items');\n    \n    navItems.forEach(item => {\n        const section = item.getAttribute('data-section');\n        console.log('Adding listener for section:', section);\n        \n        item.addEventListener('click', function(e) {\n            e.preventDefault();\n            console.log('Navigation clicked:', section);\n            \n            if (section) {\n                switchSection(section);\n            }\n        });\n    });\n}\n\nfunction switchSection(section) {\n    console.log('Switching to section:', section);\n    \n    // Update active nav item\n    document.querySelectorAll('.nav-item').forEach(item => {\n        item.classList.remove('active');\n    });\n    const navItem = document.querySelector(`[data-section=\"${section}\"]`);\n    if (navItem) {\n        navItem.classList.add('active');\n        console.log('Added active class to nav item');\n    } else {\n        console.error('Nav item not found for section:', section);\n    }\n    \n    // Show/hide content sections\n    document.querySelectorAll('.content-section').forEach(sectionEl => {\n        sectionEl.classList.remove('active');\n    });\n    const contentSection = document.getElementById(section);\n    if (contentSection) {\n        contentSection.classList.add('active');\n        console.log('Showed content section:', section);\n    } else {\n        console.error('Content section not found:', section);\n    }\n    \n    currentSection = section;\n    \n    // Load section-specific data\n    loadSectionData(section);\n}\n\nasync function loadSectionData(section) {\n    switch(section) {\n        case 'overview':\n            loadDashboardStats();\n            break;\n        case 'my-projects':\n            loadUserProjects();\n            break;\n        case 'collaborations':\n            loadCollaborations();\n            break;\n        case 'team':\n            loadTeam();\n            break;\n        case 'notifications':\n            loadNotifications();\n            break;\n    }\n}\n\nasync function loadDashboardData() {\n    await loadDashboardStats();\n    // Load notification count for sidebar\n    try {\n        const response = await fetch('/api/notifications/count');\n        if (response.ok) {\n            const data = await response.json();\n            unreadCount = data.unread_count || 0;\n            updateNotificationCount();\n        }\n    } catch (error) {\n        console.log('Error loading notification count:', error);\n    }\n}\n\nasync function loadDashboardStats() {\n    try {\n        const response = await fetch('/api/dashboard/stats');\n        if (response.ok) {\n            const data = await response.json();\n            updateDashboardStats(data);\n            displayRecentProjects(data.projects);\n        } else {\n            console.error('Failed to load dashboard stats');\n        }\n    } catch (error) {\n        console.error('Error loading dashboard stats:', error);\n    }\n}\n\nfunction updateDashboardStats(data) {\n    document.getElementById('total-projects-count').textContent = data.total_projects;\n    document.getElementById('total-funding-amount').textContent = `$${data.total_funding.toFixed(2)}`;\n    document.getElementById('total-votes-count').textContent = data.total_votes;\n    document.getElementById('total-collabs-count').textContent = data.total_collaborations || 0;\n    \n    // Update trend data with real statistics\n    updateTrendData(data);\n}\n\nfunction updateTrendData(data) {\n    // Calculate trends based on recent activity (last 7 days)\n    const projectsTrend = document.getElementById('projects-trend');\n    const fundingTrend = document.getElementById('funding-trend');\n    const votesTrend = document.getElementById('votes-trend');\n    const collabsTrend = document.getElementById('collabs-trend');\n    \n    // For now, show growth indicators if there's data\n    if (data.total_projects > 0) {\n        projectsTrend.textContent = `${data.total_projects} total`;\n        projectsTrend.className = 'stat-trend positive';\n    } else {\n        projectsTrend.textContent = 'Create your first project';\n        projectsTrend.className = 'stat-trend neutral';\n    }\n    \n    if (data.total_funding > 0) {\n        fundingTrend.textContent = `$${data.total_funding.toFixed(2)} raised`;\n        fundingTrend.className = 'stat-trend positive';\n    } else {\n        fundingTrend.textContent = 'No funding yet';\n        fundingTrend.className = 'stat-trend neutral';\n    }\n    \n    if (data.total_votes > 0) {\n        votesTrend.textContent = `${data.total_votes} total votes`;\n        votesTrend.className = 'stat-trend positive';\n    } else {\n        votesTrend.textContent = 'No votes yet';\n        votesTrend.className = 'stat-trend neutral';\n    }\n    \n    const collabCount = data.total_collaborations || 0;\n    if (collabCount > 0) {\n        collabsTrend.textContent = `${collabCount} active`;\n        collabsTrend.className = 'stat-trend positive';\n    } else {\n        collabsTrend.textContent = 'No collaborations yet';\n        collabsTrend.className = 'stat-trend neutral';\n    }\n}\n\nfunction displayRecentProjects(projects) {\n    const container = document.getElementById('recent-projects');\n    if (!container) return;\n    \n    if (projects.length === 0) {\n        container.innerHTML = `\n            <div class=\"empty-state\">\n                <i class=\"fas fa-folder-open\"></i>\n                <h3>No projects yet</h3>\n                <p>Create your first project to get started!</p>\n            </div>\n        `;\n        return;\n    }\n    \n    const recentProjects = projects.slice(0, 5);\n    container.innerHTML = recentProjects.map(project => `\n        <div class=\"activity-item\">\n            <div class=\"activity-info\">\n                <h4>${escapeHtml(project.title)}</h4>\n                <p>${project.category} • Created <span data-timestamp=\"${project.created_at}\">${formatDate(project.created_at)}</span></p>\n            </div>\n            <div class=\"activity-stats\">\n                <div class=\"activity-stat\">\n                    <i class=\"fas fa-thumbs-up\"></i>\n                    <span>${project.vote_count}</span>\n                </div>\n                <div class=\"activity-stat\">\n                    <i class=\"fas fa-dollar-sign\"></i>\n                    <span>$${project.current_funding.toFixed(2)}</span>\n                </div>\n            </div>\n        </div>\n    `).join('');\n}\n\nfunction setupProjectForm() {\n    const form = document.getElementById('project-form');\n    if (form) {\n        form.addEventListener('submit', handleProjectSubmission);\n    }\n    \n    // Setup word count for project description\n    const descriptionTextarea = document.getElementById('project-description');\n    const wordCountSpan = document.getElementById('word-count');\n    \n    if (descriptionTextarea && wordCountSpan) {\n        descriptionTextarea.addEventListener('input', function() {\n            const words = this.value.trim().split(/\\s+/).filter(word => word.length > 0);\n            const wordCount = words.length;\n            wordCountSpan.textContent = wordCount;\n            \n            // Update styling based on word count\n            const wordCountContainer = wordCountSpan.parentElement;\n            if (wordCount < 50) {\n                wordCountContainer.style.color = '#dc3545'; // Red\n                wordCountContainer.style.fontWeight = 'bold';\n            } else {\n                wordCountContainer.style.color = '#28a745'; // Green\n                wordCountContainer.style.fontWeight = 'normal';\n            }\n        });\n    }\n    \n    // Setup file upload functionality\n    // File upload functionality removed\n}\n\n// File upload functionality removed as requested\n\n// File upload functions removed as requested\n\nfunction escapeHtml(text) {\n    const div = document.createElement('div');\n    div.textContent = text;\n    return div.innerHTML;\n}\n\n// Project CRUD Functions\nasync function editProject(projectId) {\n    try {\n        // Fetch project details\n        const response = await fetch(`/api/projects/${projectId}`);\n        if (!response.ok) {\n            throw new Error('Failed to fetch project details');\n        }\n        \n        const data = await response.json();\n        const project = data.project;\n        \n        // Create edit modal\n        const modalHtml = `\n            <div class=\"modal-overlay\" id=\"edit-project-modal\">\n                <div class=\"modal-content\">\n                    <div class=\"modal-header\">\n                        <h2><i class=\"fas fa-edit\"></i> Edit Project</h2>\n                        <button class=\"modal-close\" onclick=\"closeEditModal()\">&times;</button>\n                    </div>\n                    <form id=\"edit-project-form\">\n                        <div class=\"form-group\">\n                            <label for=\"edit-title\">Project Title</label>\n                            <input type=\"text\" id=\"edit-title\" value=\"${escapeHtml(project.title)}\" required>\n                        </div>\n                        <div class=\"form-group\">\n                            <label for=\"edit-category\">Category</label>\n                            <select id=\"edit-category\" required>\n                                <option value=\"technology\" ${project.category === 'technology' ? 'selected' : ''}>Technology</option>\n                                <option value=\"healthcare\" ${project.category === 'healthcare' ? 'selected' : ''}>Healthcare</option>\n                                <option value=\"education\" ${project.category === 'education' ? 'selected' : ''}>Education</option>\n                                <option value=\"environment\" ${project.category === 'environment' ? 'selected' : ''}>Environment</option>\n                                <option value=\"social\" ${project.category === 'social' ? 'selected' : ''}>Social Impact</option>\n                                <option value=\"business\" ${project.category === 'business' ? 'selected' : ''}>Business</option>\n                                <option value=\"arts\" ${project.category === 'arts' ? 'selected' : ''}>Arts & Creative</option>\n                                <option value=\"other\" ${project.category === 'other' ? 'selected' : ''}>Other</option>\n                            </select>\n                        </div>\n                        <div class=\"form-group\">\n                            <label for=\"edit-funding\">Funding Goal ($)</label>\n                            <input type=\"number\" id=\"edit-funding\" value=\"${project.funding_goal}\" min=\"0\" step=\"100\">\n                        </div>\n                        <div class=\"form-group\">\n                            <label for=\"edit-description\">Description</label>\n                            <textarea id=\"edit-description\" rows=\"6\" required>${escapeHtml(project.description)}</textarea>\n                        </div>\n                        <div class=\"modal-actions\">\n                            <button type=\"button\" class=\"cancel-btn\" onclick=\"closeEditModal()\">Cancel</button>\n                            <button type=\"submit\" class=\"save-btn\">\n                                <i class=\"fas fa-save\"></i> Save Changes\n                            </button>\n                        </div>\n                    </form>\n                </div>\n            </div>\n        `;\n        \n        document.body.insertAdjacentHTML('beforeend', modalHtml);\n        \n        // Handle form submission\n        document.getElementById('edit-project-form').addEventListener('submit', async (e) => {\n            e.preventDefault();\n            await updateProject(projectId);\n        });\n        \n    } catch (error) {\n        showMessage('Error loading project details: ' + error.message, 'error');\n    }\n}\n\nasync function updateProject(projectId) {\n    try {\n        const title = document.getElementById('edit-title').value;\n        const category = document.getElementById('edit-category').value;\n        const funding = document.getElementById('edit-funding').value;\n        const description = document.getElementById('edit-description').value;\n        \n        const response = await fetch(`/api/projects/${projectId}`, {\n            method: 'PUT',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                title: title,\n                category: category,\n                fundingGoal: funding,\n                description: description\n            })\n        });\n        \n        const data = await response.json();\n        \n        if (response.ok) {\n            showMessage('Project updated successfully!', 'success');\n            closeEditModal();\n            loadDashboardStats(); // Refresh the project list\n        } else {\n            showMessage(data.error || 'Failed to update project', 'error');\n        }\n        \n    } catch (error) {\n        showMessage('Network error: ' + error.message, 'error');\n    }\n}\n\nasync function deleteProject(projectId, projectTitle) {\n    if (!confirm(`Are you sure you want to delete \"${projectTitle}\"? This action cannot be undone.`)) {\n        return;\n    }\n    \n    try {\n        const response = await fetch(`/api/projects/${projectId}`, {\n            method: 'DELETE'\n        });\n        \n        const data = await response.json();\n        \n        if (response.ok) {\n            showMessage('Project deleted successfully!', 'success');\n            loadDashboardStats(); // Refresh the project list\n        } else {\n            showMessage(data.error || 'Failed to delete project', 'error');\n        }\n        \n    } catch (error) {\n        showMessage('Network error: ' + error.message, 'error');\n    }\n}\n\nfunction closeEditModal() {\n    const modal = document.getElementById('edit-project-modal');\n    if (modal) {\n        modal.remove();\n    }\n}\n\nasync function handleProjectSubmission(e) {\n    e.preventDefault();\n    \n    const title = document.getElementById('project-title').value;\n    const category = document.getElementById('project-category').value;\n    const description = document.getElementById('project-description').value;\n    const fundingGoal = document.getElementById('funding-goal').value;\n    \n    // Validate minimum word count for description\n    const words = description.trim().split(/\\s+/).filter(word => word.length > 0);\n    if (words.length < 50) {\n        showMessage('Project description must be at least 50 words. Please provide more details about your project idea.', 'error');\n        return;\n    }\n    \n    const submitBtn = e.target.querySelector('.submit-btn');\n    \n    // Disable submit button\n    submitBtn.disabled = true;\n    submitBtn.innerHTML = '<i class=\"fas fa-spinner fa-spin\"></i> Creating Project...';\n    \n    try {\n        // Send project data as JSON (no file uploads)\n        const projectData = {\n            title: title,\n            category: category,\n            description: description,\n            fundingGoal: fundingGoal || '0'\n        };\n        \n        const response = await fetch('/api/projects', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(projectData)\n        });\n        \n        const data = await response.json();\n        \n        if (response.ok) {\n            showMessage('Project created successfully!', 'success');\n            \n            // Reset form\n            e.target.reset();\n            \n            // Refresh dashboard data\n            loadDashboardStats();\n            \n            // Switch to my projects section\n            switchSection('my-projects');\n        } else {\n            showMessage(data.error || 'Failed to create project', 'error');\n        }\n    } catch (error) {\n        console.error('Project creation error:', error);\n        showMessage('Network error. Please try again.', 'error');\n    } finally {\n        // Re-enable submit button\n        submitBtn.disabled = false;\n        submitBtn.innerHTML = '<i class=\"fas fa-rocket\"></i> Launch Project';\n    }\n}\n\nasync function loadUserProjects() {\n    try {\n        const response = await fetch('/api/dashboard/stats');\n        if (response.ok) {\n            const data = await response.json();\n            displayUserProjects(data.projects);\n        }\n    } catch (error) {\n        console.error('Error loading user projects:', error);\n    }\n}\n\nfunction displayUserProjects(projects) {\n    const container = document.getElementById('user-projects');\n    if (!container) return;\n    \n    if (projects.length === 0) {\n        container.innerHTML = `\n            <div class=\"empty-state\">\n                <i class=\"fas fa-plus-circle\"></i>\n                <h3>No projects yet</h3>\n                <p>Create your first project to get started!</p>\n            </div>\n        `;\n        return;\n    }\n    \n    container.innerHTML = projects.map(project => `\n        <div class=\"user-project-card\">\n            <div class=\"project-header\">\n                <h3>${escapeHtml(project.title)}</h3>\n                <div class=\"project-actions\">\n                    <span class=\"project-status ${project.status}\">${project.status}</span>\n                    <div class=\"action-buttons\">\n                        <button class=\"edit-btn\" onclick=\"event.stopPropagation(); editProject(${project.id})\" title=\"Edit Project\">\n                            <i class=\"fas fa-edit\"></i>\n                        </button>\n                        <button class=\"delete-btn\" onclick=\"event.stopPropagation(); deleteProject(${project.id}, '${escapeHtml(project.title)}')\" title=\"Delete Project\">\n                            <i class=\"fas fa-trash\"></i>\n                        </button>\n                    </div>\n                </div>\n            </div>\n            <div class=\"project-meta\">\n                <span class=\"project-category\">${project.category}</span>\n                <span class=\"project-date\" data-timestamp=\"${project.created_at}\">${formatDate(project.created_at)}</span>\n            </div>\n            <p class=\"project-description\">${escapeHtml(project.description.substring(0, 140))}${project.description.length > 140 ? '...' : ''}</p>\n            <div class=\"project-stats\">\n                <div class=\"project-stat\">\n                    <i class=\"fas fa-thumbs-up\"></i>\n                    <span>${project.vote_count} votes</span>\n                </div>\n                <div class=\"project-stat\">\n                    <i class=\"fas fa-dollar-sign\"></i>\n                    <span>$${project.current_funding.toFixed(0)} / $${project.funding_goal.toFixed(0)}</span>\n                </div>\n                <div class=\"project-stat\">\n                    <i class=\"fas fa-users\"></i>\n                    <span>${project.collaboration_count} collaborators</span>\n                </div>\n                <div class=\"project-stat\">\n                    <i class=\"fas fa-comments\"></i>\n                    <span>${project.comment_count} comments</span>\n                </div>\n            </div>\n            <button class=\"project-view-details\" onclick=\"openProjectDetails(${project.id})\">\n                <i class=\"fas fa-eye\"></i> View Details & Manage\n            </button>\n        </div>\n    `).join('');\n}\n\nasync function loadCollaborations() {\n    const container = document.getElementById('collaboration-requests');\n    if (!container) return;\n    \n    try {\n        const response = await fetch('/api/collaborations');\n        if (response.ok) {\n            const data = await response.json();\n            displayCollaborations(data.collaborations || []);\n        } else {\n            displayEmptyCollaborations();\n        }\n    } catch (error) {\n        console.error('Error loading collaborations:', error);\n        displayEmptyCollaborations();\n    }\n}\n\nfunction displayCollaborations(collaborations) {\n    const container = document.getElementById('collaboration-requests');\n    if (!container) return;\n    \n    if (collaborations.length === 0) {\n        displayEmptyCollaborations();\n        return;\n    }\n    \n    container.innerHTML = collaborations.map(collab => `\n        <div class=\"collaboration-item\">\n            <div class=\"collaboration-header\">\n                <div class=\"collaboration-user\">\n                    <i class=\"fas fa-user\"></i>\n                    <span>${escapeHtml(collab.requester?.full_name || 'Unknown User')}</span>\n                </div>\n                <span class=\"collaboration-status ${collab.status}\">${collab.status}</span>\n            </div>\n            <div class=\"collaboration-project\">\n                <strong>Project:</strong> ${escapeHtml(collab.project?.title || 'Unknown Project')}\n            </div>\n            <div class=\"collaboration-message\">\n                \"${escapeHtml(collab.message || 'No message provided')}\"\n            </div>\n            <div class=\"collaboration-date\">\n                Requested <span data-timestamp=\"${collab.created_at}\">${formatDate(collab.created_at)}</span>\n            </div>\n            ${collab.status === 'pending' ? `\n                <div class=\"collaboration-actions\">\n                    <button class=\"action-btn accept\" onclick=\"handleCollaborationResponse(${collab.id}, 'accept')\">\n                        <i class=\"fas fa-check\"></i> Accept\n                    </button>\n                    <button class=\"action-btn reject\" onclick=\"handleCollaborationResponse(${collab.id}, 'reject')\">\n                        <i class=\"fas fa-times\"></i> Reject\n                    </button>\n                </div>\n            ` : ''}\n        </div>\n    `).join('');\n}\n\nfunction displayEmptyCollaborations() {\n    const container = document.getElementById('collaboration-requests');\n    if (!container) return;\n    \n    container.innerHTML = `\n        <div class=\"empty-state\">\n            <i class=\"fas fa-handshake\"></i>\n            <h3>No collaboration requests</h3>\n            <p>Collaboration requests will appear here when other users want to work with you.</p>\n        </div>\n    `;\n}\n\nasync function handleCollaborationResponse(collabId, action) {\n    try {\n        const response = await fetch(`/api/collaborations/${collabId}/${action}`, {\n            method: 'POST'\n        });\n        \n        const data = await response.json();\n        \n        if (response.ok) {\n            showMessage(`Collaboration request ${action}ed successfully!`, 'success');\n            loadCollaborations(); // Reload collaborations\n            \n            // If accepted, reload team data to show new team member\n            if (action === 'accept') {\n                if (currentSection === 'team') {\n                    loadTeam();\n                }\n                // Also reload notification count\n                try {\n                    const countResponse = await fetch('/api/notifications/count');\n                    if (countResponse.ok) {\n                        const countData = await countResponse.json();\n                        unreadCount = countData.unread_count || 0;\n                        updateNotificationCount();\n                    }\n                } catch (e) {\n                    console.log('Error updating notification count:', e);\n                }\n            }\n        } else {\n            showMessage(data.error || `Error ${action}ing collaboration request`, 'error');\n        }\n    } catch (error) {\n        console.error(`Error ${action}ing collaboration:`, error);\n        showMessage(`Error ${action}ing collaboration request`, 'error');\n    }\n}\n\nfunction setupLogout() {\n    const logoutBtn = document.getElementById('logout-btn');\n    if (logoutBtn) {\n        logoutBtn.addEventListener('click', handleLogout);\n    }\n}\n\nasync function handleLogout() {\n    try {\n        const response = await fetch('/api/logout', {\n            method: 'POST'\n        });\n        \n        if (response.ok) {\n            showMessage('Logged out successfully', 'success');\n            setTimeout(() => {\n                window.location.href = '/';\n            }, 1000);\n        }\n    } catch (error) {\n        console.error('Logout error:', error);\n        showMessage('Error logging out', 'error');\n    }\n}\n\n// Utility functions - Real-time date formatting\nfunction formatDate(dateString) {\n    try {\n        const date = new Date(dateString);\n        // Always return only the date part, no time\n        return date.toLocaleDateString('en-US', {\n            year: 'numeric',\n            month: 'short',\n            day: 'numeric'\n        });\n    } catch (error) {\n        return 'Invalid date';\n    }\n}\n\nfunction escapeHtml(text) {\n    const div = document.createElement('div');\n    div.textContent = text;\n    return div.innerHTML;\n}\n\nfunction showMessage(message, type = 'info') {\n    const container = document.getElementById('message-container') || createMessageContainer();\n    \n    const messageDiv = document.createElement('div');\n    messageDiv.className = `message ${type}`;\n    messageDiv.textContent = message;\n    \n    container.appendChild(messageDiv);\n    \n    // Remove message after 5 seconds\n    setTimeout(() => {\n        if (messageDiv.parentNode) {\n            messageDiv.parentNode.removeChild(messageDiv);\n        }\n    }, 5000);\n}\n\nfunction createMessageContainer() {\n    const container = document.createElement('div');\n    container.id = 'message-container';\n    container.className = 'message-container';\n    document.body.appendChild(container);\n    return container;\n}\n\n// Notification System\nfunction setupNotifications() {\n    // Setup notification filter buttons\n    const filterBtns = document.querySelectorAll('.filter-btn');\n    filterBtns.forEach(btn => {\n        btn.addEventListener('click', function() {\n            filterBtns.forEach(b => b.classList.remove('active'));\n            this.classList.add('active');\n            currentNotificationFilter = this.getAttribute('data-filter');\n            displayFilteredNotifications();\n        });\n    });\n    \n    // Setup notification action buttons\n    const markAllReadBtn = document.getElementById('mark-all-read');\n    if (markAllReadBtn) {\n        markAllReadBtn.addEventListener('click', markAllNotificationsAsRead);\n    }\n    \n    const clearAllBtn = document.getElementById('clear-notifications');\n    if (clearAllBtn) {\n        clearAllBtn.addEventListener('click', clearAllNotifications);\n    }\n}\n\nasync function loadNotifications() {\n    try {\n        const response = await fetch('/api/notifications');\n        if (response.ok) {\n            const data = await response.json();\n            notifications = data.notifications || [];\n            unreadCount = data.unread_count || 0;\n            console.log('Loaded notifications:', notifications.length, 'unread:', unreadCount);\n            updateNotificationCount();\n            displayFilteredNotifications();\n        }\n    } catch (error) {\n        console.error('Error loading notifications:', error);\n        displayEmptyNotifications('Error loading notifications');\n    }\n}\n\nfunction updateNotificationCount() {\n    const countEl = document.getElementById('notification-count');\n    if (countEl) {\n        console.log('Updating notification count:', unreadCount);\n        if (unreadCount > 0) {\n            countEl.textContent = unreadCount > 99 ? '99+' : unreadCount;\n            countEl.setAttribute('data-count', unreadCount);\n            countEl.style.display = 'inline-block';\n        } else {\n            countEl.textContent = '';\n            countEl.setAttribute('data-count', '0');\n            countEl.style.display = 'none';\n        }\n    }\n}\n\nfunction displayFilteredNotifications() {\n    const container = document.getElementById('notifications-list');\n    if (!container) return;\n    \n    let filteredNotifications = notifications;\n    \n    if (currentNotificationFilter !== 'all') {\n        filteredNotifications = notifications.filter(n => n.type === currentNotificationFilter);\n    }\n    \n    if (filteredNotifications.length === 0) {\n        displayEmptyNotifications('No notifications found');\n        return;\n    }\n    \n    container.innerHTML = filteredNotifications.map(notification => `\n        <div class=\"notification-item ${notification.is_read ? '' : 'unread'}\" data-id=\"${notification.id}\">\n            <div class=\"notification-icon ${notification.type}\">\n                ${getNotificationIcon(notification.type)}\n            </div>\n            <div class=\"notification-content\">\n                <div class=\"notification-title\">${escapeHtml(notification.title)}</div>\n                <div class=\"notification-message\">${escapeHtml(notification.message)}</div>\n                <div class=\"notification-time\" data-timestamp=\"${notification.created_at}\">${formatNotificationTime(notification.created_at)}</div>\n                ${!notification.is_read ? `\n                    <div class=\"notification-actions\">\n                        <button class=\"notification-action\" onclick=\"markNotificationAsRead(${notification.id})\">\n                            <i class=\"fas fa-check\"></i> Mark as Read\n                        </button>\n                    </div>\n                ` : ''}\n            </div>\n        </div>\n    `).join('');\n}\n\nfunction displayEmptyNotifications(message = 'No notifications yet') {\n    const container = document.getElementById('notifications-list');\n    if (!container) return;\n    \n    container.innerHTML = `\n        <div class=\"empty-state\">\n            <i class=\"fas fa-bell\"></i>\n            <h3>${message}</h3>\n            <p>You'll see notifications about your projects, collaborations, and interactions here.</p>\n        </div>\n    `;\n}\n\nfunction getNotificationIcon(type) {\n    const icons = {\n        'like': '<i class=\"fas fa-thumbs-up\"></i>',\n        'likes': '<i class=\"fas fa-thumbs-up\"></i>',\n        'comment': '<i class=\"fas fa-comment\"></i>',\n        'comments': '<i class=\"fas fa-comment\"></i>',\n        'collaboration': '<i class=\"fas fa-handshake\"></i>',\n        'collaborations': '<i class=\"fas fa-handshake\"></i>',\n        'project': '<i class=\"fas fa-rocket\"></i>',\n        'projects': '<i class=\"fas fa-rocket\"></i>',\n        'team_chat': '<i class=\"fas fa-comments\"></i>'\n    };\n    return icons[type] || '<i class=\"fas fa-bell\"></i>';\n}\n\nfunction formatNotificationTime(dateString) {\n    const date = new Date(dateString);\n    const now = new Date();\n    const diffTime = Math.abs(now - date);\n    const diffMinutes = Math.floor(diffTime / (1000 * 60));\n    const diffHours = Math.floor(diffTime / (1000 * 60 * 60));\n    const diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24));\n    \n    if (diffMinutes < 1) {\n        return 'Just now';\n    } else if (diffMinutes < 60) {\n        return `${diffMinutes} minute${diffMinutes === 1 ? '' : 's'} ago`;\n    } else if (diffHours < 24) {\n        return `${diffHours} hour${diffHours === 1 ? '' : 's'} ago`;\n    } else if (diffDays < 7) {\n        return `${diffDays} day${diffDays === 1 ? '' : 's'} ago`;\n    } else {\n        return date.toLocaleDateString();\n    }\n}\n\nfunction formatChatMessageTime(dateString) {\n    const date = new Date(dateString);\n    return date.toLocaleDateString('en-US', {\n        year: 'numeric',\n        month: 'short',\n        day: 'numeric'\n    });\n}\n\nasync function markNotificationAsRead(notificationId) {\n    try {\n        const response = await fetch(`/api/notifications/${notificationId}/read`, {\n            method: 'POST'\n        });\n        \n        if (response.ok) {\n            // Update the notification in the local array\n            const notification = notifications.find(n => n.id === notificationId);\n            if (notification && !notification.is_read) {\n                notification.is_read = true;\n                unreadCount = Math.max(0, unreadCount - 1);\n                updateNotificationCount();\n                displayFilteredNotifications();\n            }\n        }\n    } catch (error) {\n        console.error('Error marking notification as read:', error);\n        showMessage('Error updating notification', 'error');\n    }\n}\n\nasync function markAllNotificationsAsRead() {\n    try {\n        const response = await fetch('/api/notifications/mark-all-read', {\n            method: 'POST'\n        });\n        \n        if (response.ok) {\n            notifications.forEach(n => n.is_read = true);\n            unreadCount = 0;\n            updateNotificationCount();\n            displayFilteredNotifications();\n            showMessage('All notifications marked as read', 'success');\n        }\n    } catch (error) {\n        console.error('Error marking all notifications as read:', error);\n        showMessage('Error updating notifications', 'error');\n    }\n}\n\nasync function clearAllNotifications() {\n    if (!confirm('Are you sure you want to clear all notifications? This action cannot be undone.')) {\n        return;\n    }\n    \n    try {\n        const response = await fetch('/api/notifications/clear-all', {\n            method: 'DELETE'\n        });\n        \n        if (response.ok) {\n            notifications = [];\n            unreadCount = 0;\n            updateNotificationCount();\n            displayEmptyNotifications();\n            showMessage('All notifications cleared', 'success');\n        }\n    } catch (error) {\n        console.error('Error clearing notifications:', error);\n        showMessage('Error clearing notifications', 'error');\n    }\n}\n\nfunction startNotificationPolling() {\n    // Poll for new notifications every 30 seconds\n    setInterval(async () => {\n        try {\n            const response = await fetch('/api/notifications/count');\n            if (response.ok) {\n                const data = await response.json();\n                const newUnreadCount = data.unread_count || 0;\n                \n                if (newUnreadCount > unreadCount) {\n                    // New notifications arrived\n                    if (currentSection === 'notifications') {\n                        loadNotifications();\n                    } else {\n                        unreadCount = newUnreadCount;\n                        updateNotificationCount();\n                    }\n                }\n            }\n        } catch (error) {\n            console.log('Notification polling error:', error);\n        }\n    }, 30000);\n}\n\n// Real-time updates for timestamps\nfunction startRealTimeUpdates() {\n    // Update all timestamps every minute\n    setInterval(updateAllTimestamps, 60000);\n}\n\nfunction updateAllTimestamps() {\n    // Update project timestamps\n    document.querySelectorAll('[data-timestamp]').forEach(element => {\n        const timestamp = element.getAttribute('data-timestamp');\n        if (timestamp) {\n            element.textContent = formatDate(timestamp);\n        }\n    });\n    \n    // Update notification timestamps\n    document.querySelectorAll('.notification-time[data-timestamp]').forEach(element => {\n        const timestamp = element.getAttribute('data-timestamp');\n        if (timestamp) {\n            element.textContent = formatNotificationTime(timestamp);\n        }\n    });\n}\n\n// Project Details Modal\nasync function openProjectDetails(projectId) {\n    try {\n        const response = await fetch(`/api/projects/${projectId}`);\n        if (response.ok) {\n            const data = await response.json();\n            displayProjectDetails(data.project);\n        } else {\n            showMessage('Error loading project details', 'error');\n        }\n    } catch (error) {\n        console.error('Error loading project details:', error);\n        showMessage('Error loading project details', 'error');\n    }\n}\n\nfunction displayProjectDetails(project) {\n    const modal = document.getElementById('project-modal');\n    const title = document.getElementById('modal-project-title');\n    const content = document.getElementById('project-modal-content');\n    \n    title.textContent = project.title;\n    \n    const fundingProgress = project.funding_goal > 0 ? \n        (project.current_funding / project.funding_goal * 100).toFixed(1) : 0;\n    \n    content.innerHTML = `\n        <div class=\"project-detail-item\">\n            <label>Category:</label>\n            <p>${escapeHtml(project.category)}</p>\n        </div>\n        \n        <div class=\"project-detail-item\">\n            <label>Status:</label>\n            <p><span class=\"project-status ${project.status}\">${project.status}</span></p>\n        </div>\n        \n        <div class=\"project-detail-item\">\n            <label>Description:</label>\n            <p>${escapeHtml(project.description)}</p>\n        </div>\n        \n        <div class=\"project-stats-detail\">\n            <div class=\"stat-detail-card\">\n                <i class=\"fas fa-thumbs-up\"></i>\n                <div class=\"stat-value\">${project.vote_count}</div>\n                <div class=\"stat-label\">Votes</div>\n            </div>\n            <div class=\"stat-detail-card\">\n                <i class=\"fas fa-dollar-sign\"></i>\n                <div class=\"stat-value\">$${project.current_funding.toFixed(2)}</div>\n                <div class=\"stat-label\">Raised / $${project.funding_goal.toFixed(2)}</div>\n            </div>\n            <div class=\"stat-detail-card\">\n                <i class=\"fas fa-users\"></i>\n                <div class=\"stat-value\">${project.collaboration_count}</div>\n                <div class=\"stat-label\">Collaborators</div>\n            </div>\n            <div class=\"stat-detail-card\">\n                <i class=\"fas fa-comments\"></i>\n                <div class=\"stat-value\">${project.comment_count}</div>\n                <div class=\"stat-label\">Comments</div>\n            </div>\n        </div>\n        \n        ${project.funding_goal > 0 ? `\n        <div class=\"project-detail-item\">\n            <label>Funding Progress:</label>\n            <div style=\"background: #f0f0f0; border-radius: 10px; padding: 1rem; margin-top: 0.5rem;\">\n                <div style=\"display: flex; justify-content: space-between; margin-bottom: 0.5rem;\">\n                    <span>${fundingProgress}% funded</span>\n                    <span>$${project.current_funding.toFixed(2)} / $${project.funding_goal.toFixed(2)}</span>\n                </div>\n                <div style=\"background: #ddd; height: 10px; border-radius: 5px; overflow: hidden;\">\n                    <div style=\"background: linear-gradient(135deg, #6a11cb, #2575fc); height: 100%; width: ${fundingProgress}%; transition: width 0.3s ease;\"></div>\n                </div>\n            </div>\n        </div>\n        ` : ''}\n        \n        <div class=\"project-detail-item\">\n            <label>Created:</label>\n            <p>${formatDate(project.created_at)}</p>\n        </div>\n    `;\n    \n    modal.classList.add('show');\n}\n\nfunction closeProjectDetails() {\n    const modal = document.getElementById('project-modal');\n    modal.classList.remove('show');\n}\n\n// Global function for HTML onclick\nfunction closeProjectModal() {\n    closeProjectDetails();\n}\n\n// Close modal when clicking outside\nwindow.addEventListener('click', function(e) {\n    const projectModal = document.getElementById('project-modal');\n    \n    if (e.target === projectModal) {\n        closeProjectDetails();\n    }\n});\n\n// Load team members\nasync function loadTeam() {\n    try {\n        const response = await fetch('/api/user/team');\n        if (response.ok) {\n            const data = await response.json();\n            displayTeamMembers(data.team_members || []);\n        } else {\n            console.error('Error loading team members');\n            displayEmptyTeam();\n        }\n    } catch (error) {\n        console.error('Error loading team members:', error);\n        displayEmptyTeam();\n    }\n}\n\nfunction displayTeamMembers(teamMembers) {\n    const container = document.getElementById('team-container');\n    if (!container) return;\n\n    if (teamMembers.length === 0) {\n        displayEmptyTeam();\n        return;\n    }\n\n    // Group team members by project\n    const projectGroups = {};\n    teamMembers.forEach(member => {\n        if (!projectGroups[member.project_id]) {\n            projectGroups[member.project_id] = {\n                project_title: member.project_title,\n                members: []\n            };\n        }\n        projectGroups[member.project_id].members.push(member);\n    });\n\n    container.innerHTML = `\n        <div class=\"team-projects\">\n            ${Object.values(projectGroups).map(project => `\n                <div class=\"project-team-section\">\n                    <h3 class=\"project-title\">\n                        <i class=\"fas fa-project-diagram\"></i> ${escapeHtml(project.project_title)}\n                    </h3>\n                    <div class=\"team-grid\">\n                        ${project.members.map(member => `\n                            <div class=\"team-member-card\">\n                                <div class=\"member-avatar\">\n                                    <i class=\"fas fa-user\"></i>\n                                </div>\n                                <div class=\"member-info\">\n                                    <h4>${escapeHtml(member.user.full_name)}</h4>\n                                    <p class=\"member-username\">@${escapeHtml(member.user.username)}</p>\n                                    <p class=\"member-college\">${escapeHtml(member.user.college || 'No college specified')}</p>\n                                    <p class=\"member-role\">${member.is_owner ? 'Project Owner' : 'Collaborator'}</p>\n                                </div>\n                                <div class=\"member-actions\">\n                                    <button class=\"message-btn\" onclick=\"openProjectChatSidebar(${member.project_id}, '${escapeHtml(project.project_title)}')\">\n                                        <i class=\"fas fa-comments\"></i> Team Chat\n                                    </button>\n                                </div>\n                            </div>\n                        `).join('')}\n                    </div>\n                </div>\n            `).join('')}\n        </div>\n    `;\n}\n\nfunction displayEmptyTeam() {\n    const container = document.getElementById('team-container');\n    if (!container) return;\n\n    container.innerHTML = `\n        <div class=\"empty-state\">\n            <i class=\"fas fa-users\"></i>\n            <h3>No Team Members Yet</h3>\n            <p>Accept collaboration requests to form your team!</p>\n        </div>\n    `;\n}\n\n// Chat sidebar functionality\nlet currentChatProject = null;\n\nasync function openProjectChatSidebar(projectId, projectTitle) {\n    currentChatProject = { id: projectId, title: projectTitle };\n    \n    const sidebar = document.getElementById('chat-sidebar');\n    const container = document.querySelector('.dashboard-container');\n    const title = document.getElementById('chat-sidebar-title');\n    \n    title.textContent = `${projectTitle} - Team Chat`;\n    \n    sidebar.classList.add('show');\n    container.classList.add('chat-open');\n    \n    await loadChatParticipants(projectId);\n    await loadSidebarChatMessages(projectId);\n}\n\nfunction closeChatSidebar() {\n    const sidebar = document.getElementById('chat-sidebar');\n    const container = document.querySelector('.dashboard-container');\n    \n    sidebar.classList.remove('show');\n    container.classList.remove('chat-open');\n    \n    currentChatProject = null;\n}\n\nasync function loadChatParticipants(projectId) {\n    try {\n        const response = await fetch(`/api/projects/${projectId}/participants`);\n        if (response.ok) {\n            const data = await response.json();\n            displayChatParticipants(data.participants || []);\n        }\n    } catch (error) {\n        console.error('Error loading participants:', error);\n    }\n}\n\nfunction displayChatParticipants(participants) {\n    const container = document.getElementById('chat-participants-list');\n    if (!container) return;\n    \n    container.innerHTML = participants.map(participant => `\n        <div class=\"participant-badge ${participant.is_owner ? 'owner' : ''}\">\n            <i class=\"fas fa-user\"></i> ${escapeHtml(participant.user.full_name)}\n            ${participant.is_owner ? ' (Owner)' : ''}\n        </div>\n    `).join('');\n}\n\nasync function loadSidebarChatMessages(projectId) {\n    try {\n        const response = await fetch(`/api/projects/${projectId}/chat`);\n        if (response.ok) {\n            const data = await response.json();\n            displaySidebarChatMessages(data.messages || []);\n        }\n    } catch (error) {\n        console.error('Error loading chat messages:', error);\n    }\n}\n\nfunction displaySidebarChatMessages(messages) {\n    const container = document.getElementById('sidebar-chat-messages');\n    if (!container) return;\n    \n    if (messages.length === 0) {\n        container.innerHTML = `\n            <div style=\"text-align: center; color: #999; padding: 2rem;\">\n                <i class=\"fas fa-comments\" style=\"font-size: 2rem; margin-bottom: 1rem; opacity: 0.3;\"></i>\n                <p>Start a conversation with your team!</p>\n            </div>\n        `;\n        return;\n    }\n    \n    container.innerHTML = messages.map(message => `\n        <div class=\"chat-message\">\n            <div class=\"message-header\">\n                <span class=\"message-sender\">${escapeHtml(message.author.full_name)}</span>\n                <span class=\"message-time\">${formatChatMessageTime(message.created_at)}</span>\n            </div>\n            <div class=\"message-text\">${escapeHtml(message.message)}</div>\n        </div>\n    `).join('');\n    \n    container.scrollTop = container.scrollHeight;\n}\n\nasync function sendSidebarMessage() {\n    if (!currentChatProject) return;\n    \n    const input = document.getElementById('sidebar-chat-input');\n    const message = input.value.trim();\n    \n    if (!message) return;\n    \n    const sendBtn = document.querySelector('.chat-input-area .send-message-btn');\n    if (sendBtn) sendBtn.disabled = true;\n    \n    try {\n        const response = await fetch(`/api/projects/${currentChatProject.id}/chat`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({ message })\n        });\n        \n        if (response.ok) {\n            input.value = '';\n            await loadSidebarChatMessages(currentChatProject.id);\n            \n            // Refresh notification count after sending chat message\n            // This ensures any new notifications are reflected in the badge\n            try {\n                const notificationResponse = await fetch('/api/notifications/count');\n                if (notificationResponse.ok) {\n                    const notificationData = await notificationResponse.json();\n                    unreadCount = notificationData.unread_count || 0;\n                    updateNotificationCount();\n                }\n            } catch (e) {\n                console.log('Error refreshing notification count:', e);\n            }\n        } else {\n            const data = await response.json();\n            showMessage(data.error || 'Error sending message', 'error');\n        }\n    } catch (error) {\n        console.error('Error sending message:', error);\n        showMessage('Error sending message', 'error');\n    } finally {\n        if (sendBtn) sendBtn.disabled = false;\n    }\n}\n\nfunction handleChatKeyPress(event) {\n    if (event.key === 'Enter' && !event.shiftKey) {\n        event.preventDefault();\n        sendSidebarMessage();\n    }\n}\n\n// Utility function for HTML escaping\nfunction escapeHtml(text) {\n    const div = document.createElement('div');\n    div.textContent = text;\n    return div.innerHTML;\n}\n","size_bytes":48939},"static/js/discussion.js":{"content":"// Discussion page JavaScript functionality\n\nlet currentUser = null;\nlet currentPage = 1;\nlet currentFilters = {\n    search: '',\n    category: '',\n    sort: 'recent'\n};\nlet currentDiscussion = null;\nlet isLoading = false;\nlet selectedMedia = null;\nlet mediaData = null;\n\ndocument.addEventListener('DOMContentLoaded', function() {\n    initializeDiscussionPage();\n});\n\nasync function initializeDiscussionPage() {\n    await checkAuthStatus();\n    loadDiscussions();\n    setupEventListeners();\n}\n\nfunction setupEventListeners() {\n    // Discussion form submission\n    const discussionForm = document.getElementById('discussion-form');\n    if (discussionForm) {\n        discussionForm.addEventListener('submit', handleDiscussionSubmit);\n    }\n\n    // Image upload handler\n    const imageInput = document.getElementById('discussion-image');\n    if (imageInput) {\n        imageInput.addEventListener('change', handleImageUpload);\n    }\n\n    // Comment form submission\n    const commentForm = document.getElementById('comment-form');\n    if (commentForm) {\n        commentForm.addEventListener('submit', handleCommentSubmit);\n    }\n\n    // Edit discussion form submission\n    const editForm = document.getElementById('edit-discussion-form');\n    if (editForm) {\n        editForm.addEventListener('submit', handleEditDiscussionSubmit);\n    }\n\n    // Search input\n    const searchInput = document.getElementById('search-input');\n    if (searchInput) {\n        searchInput.addEventListener('keypress', function(e) {\n            if (e.key === 'Enter') {\n                searchDiscussions();\n            }\n        });\n    }\n\n    // Modal close handlers\n    window.addEventListener('click', function(event) {\n        const modal = document.getElementById('discussion-modal');\n        const editModal = document.getElementById('edit-discussion-modal');\n        \n        if (event.target === modal) {\n            closeDiscussionModal();\n        }\n        if (event.target === editModal) {\n            closeEditModal();\n        }\n    });\n}\n\n// Toggle create discussion form\nfunction toggleCreateForm() {\n    const form = document.getElementById('discussion-form');\n    const button = document.querySelector('.btn-create-toggle');\n    \n    if (form.style.display === 'none' || form.style.display === '') {\n        form.style.display = 'block';\n        button.innerHTML = '<i class=\"fas fa-minus\"></i> Cancel';\n        button.classList.add('cancel');\n    } else {\n        form.style.display = 'none';\n        button.innerHTML = '<i class=\"fas fa-plus\"></i> Create Post';\n        button.classList.remove('cancel');\n        // Clear form\n        form.reset();\n        clearImagePreview();\n    }\n}\n\n// Clear image preview\nfunction clearImagePreview() {\n    const preview = document.getElementById('image-preview');\n    if (preview) {\n        preview.remove();\n    }\n    selectedMedia = null;\n    mediaData = null;\n}\n\nasync function checkAuthStatus() {\n    try {\n        const response = await fetch('/api/user');\n        if (response.ok) {\n            const data = await response.json();\n            currentUser = data.user;\n            showAuthenticatedUI();\n        } else {\n            showGuestUI();\n        }\n    } catch (error) {\n        console.error('Error checking auth status:', error);\n        showGuestUI();\n    }\n}\n\nfunction showAuthenticatedUI() {\n    const createSection = document.getElementById('create-discussion-section');\n    const dashboardLink = document.getElementById('dashboard-link');\n    const profileLink = document.getElementById('profile-link');\n    const userMenu = document.getElementById('user-menu');\n    const userName = document.getElementById('user-name');\n    const loginBtn = document.getElementById('login-btn');\n    const registerBtn = document.getElementById('register-btn');\n    \n    if (createSection) createSection.style.display = 'block';\n    if (dashboardLink) dashboardLink.style.display = 'inline-flex';\n    if (profileLink) profileLink.style.display = 'inline-flex';\n    if (loginBtn) loginBtn.style.display = 'none';\n    if (registerBtn) registerBtn.style.display = 'none';\n    \n    if (userMenu) {\n        userMenu.style.display = 'inline-block';\n        if (userName) {\n            userName.textContent = currentUser.first_name || currentUser.username || 'User';\n        }\n    }\n}\n\nfunction showGuestUI() {\n    const createSection = document.getElementById('create-discussion-section');\n    const dashboardLink = document.getElementById('dashboard-link');\n    \n    if (createSection) createSection.style.display = 'none';\n    if (dashboardLink) dashboardLink.style.display = 'none';\n}\n\n\n\nfunction handleImageUpload(event) {\n    const file = event.target.files[0];\n    if (!file) return;\n\n    // Validate file type\n    if (!file.type.startsWith('image/')) {\n        alert('Please select an image file.');\n        return;\n    }\n\n    // Validate file size (5MB limit)\n    if (file.size > 5 * 1024 * 1024) {\n        alert('Image size should be less than 5MB.');\n        return;\n    }\n\n    const reader = new FileReader();\n    reader.onload = function(e) {\n        mediaData = e.target.result;\n        showImagePreview(e.target.result);\n    };\n    reader.readAsDataURL(file);\n}\n\nfunction showImagePreview(src) {\n    const preview = document.getElementById('image-preview');\n    const img = document.getElementById('preview-img');\n    \n    if (preview && img) {\n        img.src = src;\n        preview.style.display = 'block';\n    }\n}\n\nfunction removeImage() {\n    const preview = document.getElementById('image-preview');\n    const input = document.getElementById('discussion-image');\n    \n    if (preview) preview.style.display = 'none';\n    if (input) input.value = '';\n    mediaData = null;\n}\n\nfunction resetDiscussionForm() {\n    const form = document.getElementById('discussion-form');\n    if (form) {\n        form.reset();\n        removeImage();\n    }\n}\n\nfunction cancelDiscussion() {\n    toggleCreateForm();\n}\n\nasync function handleDiscussionSubmit(event) {\n    event.preventDefault();\n    \n    if (!currentUser) {\n        alert('Please log in to create a discussion.');\n        return;\n    }\n\n    const submitBtn = document.getElementById('submit-discussion-btn');\n    submitBtn.disabled = true;\n    submitBtn.innerHTML = '<i class=\"fas fa-spinner fa-spin\"></i> Posting...';\n\n    const formData = new FormData(event.target);\n    \n    // Convert FormData to JSON for easier handling\n    const data = {\n        title: formData.get('title'),\n        content: formData.get('content'),\n        category: formData.get('category'),\n        tags: formData.get('tags') ? formData.get('tags').split(',').map(tag => tag.trim()).filter(tag => tag) : []\n    };\n    \n    // Add image data if present\n    if (mediaData) {\n        data.media_data = mediaData;\n        data.media_type = 'image';\n    }\n\n    try {\n        const response = await fetch('/api/discussions', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(data)\n        });\n\n        const result = await response.json();\n\n        if (response.ok) {\n            showNotification('Discussion created successfully!', 'success');\n            resetDiscussionForm();\n            toggleCreateForm();\n            loadDiscussions(); // Refresh the discussions list\n        } else {\n            throw new Error(result.error || 'Failed to create discussion');\n        }\n    } catch (error) {\n        console.error('Error creating discussion:', error);\n        showNotification(error.message, 'error');\n    } finally {\n        submitBtn.disabled = false;\n        submitBtn.innerHTML = '<i class=\"fas fa-paper-plane\"></i> Post Discussion';\n    }\n}\n\nasync function loadDiscussions() {\n    if (isLoading) return;\n    \n    isLoading = true;\n    const discussionsList = document.getElementById('discussions-list');\n    \n    // Show loading state on first load\n    if (currentPage === 1) {\n        discussionsList.innerHTML = `\n            <div class=\"loading\">\n                <i class=\"fas fa-spinner fa-spin\"></i>\n                <p>Loading discussions...</p>\n            </div>\n        `;\n    }\n\n    try {\n        const params = new URLSearchParams({\n            page: currentPage,\n            search: currentFilters.search,\n            category: currentFilters.category,\n            sort: currentFilters.sort,\n            has_more: true\n        });\n\n        const response = await fetch(`/api/discussions?${params}`);\n        const data = await response.json();\n\n        if (response.ok) {\n            if (currentPage === 1) {\n                discussionsList.innerHTML = '';\n            }\n            \n            if (data.discussions.length === 0 && currentPage === 1) {\n                showEmptyState();\n            } else {\n                renderDiscussions(data.discussions);\n                updateLoadMoreButton(data.has_more);\n            }\n        } else {\n            throw new Error(data.error || 'Failed to load discussions');\n        }\n    } catch (error) {\n        console.error('Error loading discussions:', error);\n        discussionsList.innerHTML = `\n            <div class=\"empty-state\">\n                <i class=\"fas fa-exclamation-triangle\"></i>\n                <h3>Error Loading Discussions</h3>\n                <p>Please try again later.</p>\n            </div>\n        `;\n    } finally {\n        isLoading = false;\n    }\n}\n\nfunction renderDiscussions(discussions) {\n    const discussionsList = document.getElementById('discussions-list');\n    \n    discussions.forEach(discussion => {\n        const discussionCard = createDiscussionCard(discussion);\n        discussionsList.appendChild(discussionCard);\n    });\n}\n\nfunction createDiscussionCard(discussion) {\n    const card = document.createElement('div');\n    card.className = 'discussion-card';\n    card.onclick = () => openDiscussionModal(discussion.id);\n\n    const canEdit = currentUser && currentUser.id === discussion.author.id;\n    const editOverlay = canEdit ? `\n        <div class=\"discussion-edit-overlay\">\n            <button class=\"btn btn-secondary\" onclick=\"event.stopPropagation(); editDiscussion(${discussion.id})\">\n                <i class=\"fas fa-edit\"></i>\n            </button>\n            <button class=\"btn btn-danger\" onclick=\"event.stopPropagation(); deleteDiscussion(${discussion.id})\">\n                <i class=\"fas fa-trash\"></i>\n            </button>\n        </div>\n    ` : '';\n\n    const imageSection = discussion.media_url ? `\n        <div class=\"discussion-image\">\n            <img src=\"${discussion.media_url}\" alt=\"Discussion image\">\n        </div>\n    ` : '';\n\n    const tagsSection = discussion.tags && discussion.tags.length > 0 ? `\n        <div class=\"discussion-tags\">\n            ${discussion.tags.map(tag => `<span class=\"tag\">${tag}</span>`).join('')}\n        </div>\n    ` : '';\n\n    card.innerHTML = `\n        ${editOverlay}\n        <div class=\"discussion-header-card\">\n            <div>\n                <div class=\"discussion-title\">${escapeHtml(discussion.title)}</div>\n                <div class=\"discussion-meta\">\n                    <span class=\"discussion-category\">${escapeHtml(discussion.category)}</span>\n                    <span class=\"author-info\">\n                        <i class=\"fas fa-user\"></i> ${escapeHtml(discussion.author.username)}\n                    </span>\n                    <span><i class=\"fas fa-clock\"></i> ${formatDate(discussion.created_at)}</span>\n                </div>\n            </div>\n        </div>\n        \n        <div class=\"discussion-content\">\n            ${escapeHtml(discussion.content).substring(0, 300)}${discussion.content.length > 300 ? '...' : ''}\n        </div>\n        \n        ${imageSection}\n        ${tagsSection}\n        \n        <div class=\"discussion-stats\">\n            <div class=\"discussion-actions\">\n                <button class=\"action-btn ${discussion.is_liked ? 'liked' : ''}\" \n                        onclick=\"event.stopPropagation(); toggleDiscussionLike(${discussion.id})\">\n                    <i class=\"fas fa-heart\"></i> ${discussion.like_count}\n                </button>\n                <button class=\"action-btn\" onclick=\"event.stopPropagation(); openDiscussionModal(${discussion.id})\">\n                    <i class=\"fas fa-comment\"></i> ${discussion.reply_count}\n                </button>\n                <button class=\"action-btn\" onclick=\"event.stopPropagation(); shareDiscussion(${discussion.id})\">\n                    <i class=\"fas fa-share\"></i> Share\n                </button>\n            </div>\n        </div>\n    `;\n\n    return card;\n}\n\nasync function openDiscussionModal(discussionId) {\n    const modal = document.getElementById('discussion-modal');\n    const modalTitle = document.getElementById('modal-discussion-title');\n    const discussionDetail = document.getElementById('discussion-detail');\n    const commentsList = document.getElementById('comments-list');\n    const addCommentBtn = document.getElementById('add-comment-btn');\n\n    modal.style.display = 'block';\n    \n    // Show loading state\n    discussionDetail.innerHTML = '<div class=\"loading\"><i class=\"fas fa-spinner fa-spin\"></i><p>Loading...</p></div>';\n    commentsList.innerHTML = '';\n\n    try {\n        const response = await fetch(`/api/discussions/${discussionId}`);\n        const data = await response.json();\n\n        if (response.ok) {\n            currentDiscussion = data.discussion;\n            modalTitle.textContent = data.discussion.title;\n            \n            renderDiscussionDetail(data.discussion);\n            await loadComments(discussionId);\n            \n            if (currentUser) {\n                addCommentBtn.style.display = 'block';\n            }\n        } else {\n            throw new Error(data.error || 'Failed to load discussion');\n        }\n    } catch (error) {\n        console.error('Error loading discussion:', error);\n        discussionDetail.innerHTML = `\n            <div class=\"empty-state\">\n                <i class=\"fas fa-exclamation-triangle\"></i>\n                <h3>Error Loading Discussion</h3>\n                <p>Please try again later.</p>\n            </div>\n        `;\n    }\n}\n\nfunction renderDiscussionDetail(discussion) {\n    const discussionDetail = document.getElementById('discussion-detail');\n    \n    const imageSection = discussion.media_url ? `\n        <div class=\"discussion-image\">\n            <img src=\"${discussion.media_url}\" alt=\"Discussion image\">\n        </div>\n    ` : '';\n\n    const tagsSection = discussion.tags && discussion.tags.length > 0 ? `\n        <div class=\"discussion-tags\">\n            ${discussion.tags.map(tag => `<span class=\"tag\">${tag}</span>`).join('')}\n        </div>\n    ` : '';\n\n    discussionDetail.innerHTML = `\n        <div class=\"discussion-detail-header\">\n            <h2 class=\"discussion-detail-title\">${escapeHtml(discussion.title)}</h2>\n            <div class=\"discussion-detail-meta\">\n                <span class=\"discussion-category\">${escapeHtml(discussion.category)}</span>\n                <span class=\"author-info\">\n                    <i class=\"fas fa-user\"></i> ${escapeHtml(discussion.author.username)}\n                </span>\n                <span><i class=\"fas fa-clock\"></i> ${formatDate(discussion.created_at)}</span>\n            </div>\n        </div>\n        \n        <div class=\"discussion-detail-content\">\n            ${escapeHtml(discussion.content).replace(/\\n/g, '<br>')}\n        </div>\n        \n        ${imageSection}\n        ${tagsSection}\n        \n        <div class=\"discussion-actions\">\n            <button class=\"action-btn ${discussion.is_liked ? 'liked' : ''}\" \n                    onclick=\"toggleDiscussionLike(${discussion.id})\">\n                <i class=\"fas fa-heart\"></i> ${discussion.like_count}\n            </button>\n            <button class=\"action-btn\" onclick=\"shareDiscussion(${discussion.id})\">\n                <i class=\"fas fa-share\"></i> Share\n            </button>\n        </div>\n    `;\n}\n\nasync function loadComments(discussionId) {\n    const commentsList = document.getElementById('comments-list');\n    \n    try {\n        const response = await fetch(`/api/discussions/${discussionId}/comments`);\n        const data = await response.json();\n\n        if (response.ok) {\n            if (data.comments.length === 0) {\n                commentsList.innerHTML = `\n                    <div class=\"empty-state\">\n                        <i class=\"fas fa-comments\"></i>\n                        <h3>No Comments Yet</h3>\n                        <p>Be the first to comment on this discussion!</p>\n                    </div>\n                `;\n            } else {\n                commentsList.innerHTML = '';\n                data.comments.forEach(comment => {\n                    const commentCard = createCommentCard(comment);\n                    commentsList.appendChild(commentCard);\n                });\n            }\n        } else {\n            throw new Error(data.error || 'Failed to load comments');\n        }\n    } catch (error) {\n        console.error('Error loading comments:', error);\n        commentsList.innerHTML = `\n            <div class=\"empty-state\">\n                <i class=\"fas fa-exclamation-triangle\"></i>\n                <h3>Error Loading Comments</h3>\n                <p>Please try again later.</p>\n            </div>\n        `;\n    }\n}\n\nfunction createCommentCard(comment) {\n    const card = document.createElement('div');\n    card.className = 'comment-card';\n    card.dataset.commentId = comment.id;\n\n    const canEdit = currentUser && currentUser.id === comment.author.id;\n    const editOverlay = canEdit ? `\n        <div class=\"comment-edit-overlay\">\n            <button class=\"edit-comment-btn\" onclick=\"editComment(${comment.id})\">\n                <i class=\"fas fa-edit\"></i>\n            </button>\n            <button class=\"delete-comment-btn\" onclick=\"deleteComment(${comment.id})\">\n                <i class=\"fas fa-trash\"></i>\n            </button>\n        </div>\n    ` : '';\n\n    card.innerHTML = `\n        ${editOverlay}\n        <div class=\"comment-header\">\n            <span class=\"comment-author\">${escapeHtml(comment.author.username)}</span>\n            <span class=\"comment-date\">${formatDate(comment.created_at)}</span>\n        </div>\n        <div class=\"comment-content\" id=\"comment-content-${comment.id}\">\n            ${escapeHtml(comment.content).replace(/\\n/g, '<br>')}\n        </div>\n        <div class=\"comment-actions-bar\">\n            <button class=\"comment-action-btn ${comment.user_reaction === 'like' ? 'liked' : ''}\" \n                    onclick=\"toggleCommentReaction(${comment.id}, 'like')\">\n                <i class=\"fas fa-heart\"></i> ${comment.like_count}\n            </button>\n            <button class=\"comment-action-btn\" onclick=\"toggleReplyForm(${comment.id})\">\n                <i class=\"fas fa-reply\"></i> Reply\n            </button>\n        </div>\n        <div id=\"reply-form-${comment.id}\" class=\"reply-form\" style=\"display: none;\">\n            <textarea placeholder=\"Write a reply...\" rows=\"2\"></textarea>\n            <div class=\"comment-actions\">\n                <button type=\"button\" onclick=\"cancelReply(${comment.id})\">Cancel</button>\n                <button type=\"button\" onclick=\"submitReply(${comment.id})\">Reply</button>\n            </div>\n        </div>\n        <div id=\"replies-${comment.id}\" class=\"replies-container\">\n            <!-- Replies will be loaded here if any -->\n        </div>\n    `;\n\n    return card;\n}\n\nfunction showCommentForm() {\n    const form = document.getElementById('comment-form');\n    const button = document.getElementById('add-comment-btn');\n    \n    form.style.display = 'block';\n    button.style.display = 'none';\n}\n\nfunction cancelComment() {\n    const form = document.getElementById('comment-form');\n    const button = document.getElementById('add-comment-btn');\n    const textarea = document.getElementById('comment-content');\n    \n    form.style.display = 'none';\n    button.style.display = 'block';\n    if (textarea) textarea.value = '';\n}\n\nasync function handleCommentSubmit(event) {\n    event.preventDefault();\n    \n    if (!currentUser || !currentDiscussion) {\n        alert('Please log in to comment.');\n        return;\n    }\n\n    const textarea = document.getElementById('comment-content');\n    const content = textarea.value.trim();\n    \n    if (!content) {\n        alert('Please enter a comment.');\n        return;\n    }\n\n    try {\n        const response = await fetch(`/api/discussions/${currentDiscussion.id}/comments`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({ content })\n        });\n\n        const result = await response.json();\n\n        if (response.ok) {\n            showNotification('Comment posted successfully!', 'success');\n            cancelComment();\n            await loadComments(currentDiscussion.id);\n        } else {\n            throw new Error(result.error || 'Failed to post comment');\n        }\n    } catch (error) {\n        console.error('Error posting comment:', error);\n        showNotification(error.message, 'error');\n    }\n}\n\nasync function toggleDiscussionLike(discussionId) {\n    if (!currentUser) {\n        alert('Please log in to like discussions.');\n        return;\n    }\n\n    try {\n        const response = await fetch(`/api/discussions/${discussionId}/like`, {\n            method: 'POST'\n        });\n\n        const result = await response.json();\n\n        if (response.ok) {\n            // Update UI\n            const actionBtns = document.querySelectorAll(`[onclick*=\"toggleDiscussionLike(${discussionId})\"]`);\n            actionBtns.forEach(btn => {\n                const icon = btn.querySelector('i');\n                if (result.liked) {\n                    btn.classList.add('liked');\n                    btn.innerHTML = `<i class=\"fas fa-heart\"></i> ${result.like_count}`;\n                } else {\n                    btn.classList.remove('liked');\n                    btn.innerHTML = `<i class=\"fas fa-heart\"></i> ${result.like_count}`;\n                }\n            });\n        } else {\n            throw new Error(result.error || 'Failed to toggle like');\n        }\n    } catch (error) {\n        console.error('Error toggling like:', error);\n        showNotification(error.message, 'error');\n    }\n}\n\nasync function toggleCommentReaction(commentId, reactionType) {\n    if (!currentUser) {\n        alert('Please log in to react to comments.');\n        return;\n    }\n\n    try {\n        const response = await fetch(`/api/discussion-comments/${commentId}/react`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({ reaction_type: reactionType })\n        });\n\n        const result = await response.json();\n\n        if (response.ok) {\n            // Update UI\n            const actionBtn = document.querySelector(`[onclick*=\"toggleCommentReaction(${commentId}, '${reactionType}')\"]`);\n            if (actionBtn) {\n                if (result.reacted) {\n                    actionBtn.classList.add('liked');\n                } else {\n                    actionBtn.classList.remove('liked');\n                }\n                actionBtn.innerHTML = `<i class=\"fas fa-heart\"></i> ${result.reaction_count}`;\n            }\n        } else {\n            throw new Error(result.error || 'Failed to toggle reaction');\n        }\n    } catch (error) {\n        console.error('Error toggling reaction:', error);\n        showNotification(error.message, 'error');\n    }\n}\n\nfunction toggleReplyForm(commentId) {\n    const form = document.getElementById(`reply-form-${commentId}`);\n    if (form) {\n        form.style.display = form.style.display === 'none' ? 'block' : 'none';\n    }\n}\n\nfunction cancelReply(commentId) {\n    const form = document.getElementById(`reply-form-${commentId}`);\n    if (form) {\n        form.style.display = 'none';\n        const textarea = form.querySelector('textarea');\n        if (textarea) textarea.value = '';\n    }\n}\n\nasync function submitReply(commentId) {\n    if (!currentUser) {\n        alert('Please log in to reply.');\n        return;\n    }\n\n    const form = document.getElementById(`reply-form-${commentId}`);\n    const textarea = form.querySelector('textarea');\n    const content = textarea.value.trim();\n    \n    if (!content) {\n        alert('Please enter a reply.');\n        return;\n    }\n\n    try {\n        const response = await fetch(`/api/discussion-comments/${commentId}/replies`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({ content })\n        });\n\n        const result = await response.json();\n\n        if (response.ok) {\n            showNotification('Reply posted successfully!', 'success');\n            cancelReply(commentId);\n            // Reload comments to show the new reply\n            await loadComments(currentDiscussion.id);\n        } else {\n            throw new Error(result.error || 'Failed to post reply');\n        }\n    } catch (error) {\n        console.error('Error posting reply:', error);\n        showNotification(error.message, 'error');\n    }\n}\n\nasync function editDiscussion(discussionId) {\n    try {\n        const response = await fetch(`/api/discussions/${discussionId}`);\n        const data = await response.json();\n\n        if (response.ok) {\n            const discussion = data.discussion;\n            \n            // Populate edit form\n            document.getElementById('edit-title').value = discussion.title;\n            document.getElementById('edit-category').value = discussion.category;\n            document.getElementById('edit-content').value = discussion.content;\n            document.getElementById('edit-tags').value = discussion.tags ? discussion.tags.join(', ') : '';\n            \n            // Store discussion ID for form submission\n            document.getElementById('edit-discussion-form').dataset.discussionId = discussionId;\n            \n            // Show modal\n            document.getElementById('edit-discussion-modal').style.display = 'block';\n        } else {\n            throw new Error(data.error || 'Failed to load discussion for editing');\n        }\n    } catch (error) {\n        console.error('Error loading discussion for edit:', error);\n        showNotification(error.message, 'error');\n    }\n}\n\nasync function handleEditDiscussionSubmit(event) {\n    event.preventDefault();\n    \n    const discussionId = event.target.dataset.discussionId;\n    if (!discussionId) return;\n\n    const formData = new FormData(event.target);\n    const data = {\n        title: formData.get('title'),\n        category: formData.get('category'),\n        content: formData.get('content'),\n        tags: formData.get('tags')\n    };\n\n    try {\n        const response = await fetch(`/api/discussions/${discussionId}`, {\n            method: 'PUT',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(data)\n        });\n\n        const result = await response.json();\n\n        if (response.ok) {\n            showNotification('Discussion updated successfully!', 'success');\n            closeEditModal();\n            loadDiscussions(); // Refresh discussions list\n            \n            // If modal is open, refresh it too\n            if (currentDiscussion && currentDiscussion.id == discussionId) {\n                openDiscussionModal(discussionId);\n            }\n        } else {\n            throw new Error(result.error || 'Failed to update discussion');\n        }\n    } catch (error) {\n        console.error('Error updating discussion:', error);\n        showNotification(error.message, 'error');\n    }\n}\n\nasync function deleteDiscussion(discussionId) {\n    if (!confirm('Are you sure you want to delete this discussion? This action cannot be undone.')) {\n        return;\n    }\n\n    try {\n        const response = await fetch(`/api/discussions/${discussionId}`, {\n            method: 'DELETE'\n        });\n\n        const result = await response.json();\n\n        if (response.ok) {\n            showNotification('Discussion deleted successfully!', 'success');\n            loadDiscussions(); // Refresh discussions list\n            \n            // Close modal if it's open\n            if (currentDiscussion && currentDiscussion.id == discussionId) {\n                closeDiscussionModal();\n            }\n        } else {\n            throw new Error(result.error || 'Failed to delete discussion');\n        }\n    } catch (error) {\n        console.error('Error deleting discussion:', error);\n        showNotification(error.message, 'error');\n    }\n}\n\nasync function editComment(commentId) {\n    const commentCard = document.querySelector(`[data-comment-id=\"${commentId}\"]`);\n    const contentDiv = document.getElementById(`comment-content-${commentId}`);\n    const originalContent = contentDiv.textContent.trim();\n    \n    // Replace content with textarea\n    contentDiv.innerHTML = `\n        <textarea id=\"edit-textarea-${commentId}\" rows=\"3\" style=\"width: 100%; margin-bottom: 1rem;\">${originalContent}</textarea>\n        <div class=\"comment-actions\">\n            <button type=\"button\" onclick=\"cancelEditComment(${commentId}, '${escapeHtml(originalContent)}')\">Cancel</button>\n            <button type=\"button\" onclick=\"saveEditComment(${commentId})\">Save</button>\n        </div>\n    `;\n}\n\nfunction cancelEditComment(commentId, originalContent) {\n    const contentDiv = document.getElementById(`comment-content-${commentId}`);\n    contentDiv.innerHTML = originalContent.replace(/\\n/g, '<br>');\n}\n\nasync function saveEditComment(commentId) {\n    const textarea = document.getElementById(`edit-textarea-${commentId}`);\n    const newContent = textarea.value.trim();\n    \n    if (!newContent) {\n        alert('Comment cannot be empty.');\n        return;\n    }\n\n    try {\n        const response = await fetch(`/api/discussion-comments/${commentId}`, {\n            method: 'PUT',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({ content: newContent })\n        });\n\n        const result = await response.json();\n\n        if (response.ok) {\n            showNotification('Comment updated successfully!', 'success');\n            const contentDiv = document.getElementById(`comment-content-${commentId}`);\n            contentDiv.innerHTML = escapeHtml(newContent).replace(/\\n/g, '<br>');\n        } else {\n            throw new Error(result.error || 'Failed to update comment');\n        }\n    } catch (error) {\n        console.error('Error updating comment:', error);\n        showNotification(error.message, 'error');\n    }\n}\n\nasync function deleteComment(commentId) {\n    if (!confirm('Are you sure you want to delete this comment?')) {\n        return;\n    }\n\n    try {\n        const response = await fetch(`/api/discussion-comments/${commentId}`, {\n            method: 'DELETE'\n        });\n\n        const result = await response.json();\n\n        if (response.ok) {\n            showNotification('Comment deleted successfully!', 'success');\n            await loadComments(currentDiscussion.id);\n        } else {\n            throw new Error(result.error || 'Failed to delete comment');\n        }\n    } catch (error) {\n        console.error('Error deleting comment:', error);\n        showNotification(error.message, 'error');\n    }\n}\n\nfunction searchDiscussions() {\n    const searchInput = document.getElementById('search-input');\n    currentFilters.search = searchInput.value.trim();\n    currentPage = 1;\n    loadDiscussions();\n}\n\nfunction filterDiscussions() {\n    const categoryFilter = document.getElementById('category-filter');\n    const sortFilter = document.getElementById('sort-filter');\n    \n    currentFilters.category = categoryFilter.value;\n    currentFilters.sort = sortFilter.value;\n    currentPage = 1;\n    loadDiscussions();\n}\n\nfunction loadMoreDiscussions() {\n    currentPage++;\n    loadDiscussions();\n}\n\nfunction updateLoadMoreButton(hasMore) {\n    const loadMoreBtn = document.getElementById('load-more-btn');\n    if (loadMoreBtn) {\n        loadMoreBtn.style.display = hasMore ? 'block' : 'none';\n    }\n}\n\nfunction shareDiscussion(discussionId) {\n    const url = `${window.location.origin}/discussion.html?id=${discussionId}`;\n    \n    if (navigator.share) {\n        navigator.share({\n            title: 'Check out this discussion',\n            url: url\n        });\n    } else {\n        // Fallback: copy to clipboard\n        navigator.clipboard.writeText(url).then(() => {\n            showNotification('Link copied to clipboard!', 'success');\n        }).catch(() => {\n            // Fallback for older browsers\n            const textArea = document.createElement('textarea');\n            textArea.value = url;\n            document.body.appendChild(textArea);\n            textArea.select();\n            document.execCommand('copy');\n            document.body.removeChild(textArea);\n            showNotification('Link copied to clipboard!', 'success');\n        });\n    }\n}\n\nfunction closeDiscussionModal() {\n    const modal = document.getElementById('discussion-modal');\n    modal.style.display = 'none';\n    currentDiscussion = null;\n    \n    // Reset comment form\n    cancelComment();\n}\n\nfunction closeEditModal() {\n    const modal = document.getElementById('edit-discussion-modal');\n    modal.style.display = 'none';\n    \n    // Reset form\n    const form = document.getElementById('edit-discussion-form');\n    form.reset();\n    delete form.dataset.discussionId;\n}\n\nfunction showEmptyState() {\n    const discussionsList = document.getElementById('discussions-list');\n    discussionsList.innerHTML = `\n        <div class=\"empty-state\">\n            <i class=\"fas fa-comments\"></i>\n            <h3>No Discussions Found</h3>\n            <p>Be the first to start a discussion in the community!</p>\n        </div>\n    `;\n}\n\nfunction showNotification(message, type = 'info') {\n    // Create notification element\n    const notification = document.createElement('div');\n    notification.className = `notification notification-${type}`;\n    notification.style.cssText = `\n        position: fixed;\n        top: 20px;\n        right: 20px;\n        background: ${type === 'success' ? '#28a745' : type === 'error' ? '#dc3545' : '#17a2b8'};\n        color: white;\n        padding: 1rem 1.5rem;\n        border-radius: 8px;\n        z-index: 10000;\n        box-shadow: 0 4px 12px rgba(0,0,0,0.2);\n        animation: slideIn 0.3s ease;\n        max-width: 300px;\n    `;\n    \n    notification.textContent = message;\n    document.body.appendChild(notification);\n    \n    // Add animation styles\n    const style = document.createElement('style');\n    style.textContent = `\n        @keyframes slideIn {\n            from {\n                opacity: 0;\n                transform: translateX(100%);\n            }\n            to {\n                opacity: 1;\n                transform: translateX(0);\n            }\n        }\n    `;\n    document.head.appendChild(style);\n    \n    // Remove after 3 seconds\n    setTimeout(() => {\n        if (notification.parentNode) {\n            notification.parentNode.removeChild(notification);\n        }\n    }, 3000);\n}\n\nfunction formatDate(dateString) {\n    const date = new Date(dateString);\n    const now = new Date();\n    const diffTime = Math.abs(now - date);\n    const diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24));\n    const diffHours = Math.floor(diffTime / (1000 * 60 * 60));\n    const diffMinutes = Math.floor(diffTime / (1000 * 60));\n\n    if (diffMinutes < 60) {\n        return `${diffMinutes} minutes ago`;\n    } else if (diffHours < 24) {\n        return `${diffHours} hours ago`;\n    } else if (diffDays < 7) {\n        return `${diffDays} days ago`;\n    } else {\n        return date.toLocaleDateString();\n    }\n}\n\nfunction escapeHtml(text) {\n    const div = document.createElement('div');\n    div.textContent = text;\n    return div.innerHTML;\n}\n\nasync function logout() {\n    try {\n        const response = await fetch('/api/auth/logout', {\n            method: 'POST'\n        });\n        \n        if (response.ok) {\n            showNotification('Logged out successfully!', 'success');\n            setTimeout(() => {\n                window.location.reload();\n            }, 1000);\n        }\n    } catch (error) {\n        console.error('Error logging out:', error);\n    }\n}","size_bytes":36457},"static/js/main.js":{"content":"// Main page JavaScript functionality\n\ndocument.addEventListener('DOMContentLoaded', function() {\n    // Initialize typewriter effect\n    initTypeWriter();\n    \n    // Load featured projects and stats\n    loadFeaturedProjects();\n    loadStats();\n    \n    // Check authentication status\n    checkAuthStatus();\n});\n\n// Typewriter effect for hero text\nfunction initTypeWriter() {\n    const text = \"Turn Your College Projects Into Reality\";\n    let i = 0;\n    const speed = 100;\n    const element = document.getElementById(\"type-text\");\n\n    function typeWriter() {\n        if (i < text.length) {\n            element.innerHTML += text.charAt(i);\n            i++;\n            setTimeout(typeWriter, speed);\n        }\n    }\n    \n    if (element) {\n        typeWriter();\n    }\n}\n\n// Check authentication status and update navbar\nasync function checkAuthStatus() {\n    try {\n        const response = await fetch('/api/user');\n        if (response.ok) {\n            const data = await response.json();\n            updateNavbarForLoggedInUser(data.user);\n        }\n    } catch (error) {\n        console.log('User not authenticated');\n    }\n}\n\nfunction updateNavbarForLoggedInUser(user) {\n    const loginBtn = document.getElementById('login-btn');\n    const registerBtn = document.getElementById('register-btn');\n    const dashboardLink = document.getElementById('dashboard-link');\n    const profileLink = document.getElementById('profile-link');\n    const userMenu = document.getElementById('user-menu');\n    const userName = document.getElementById('user-name');\n    \n    if (user) {\n        // Hide login/register buttons\n        if (loginBtn) loginBtn.style.display = 'none';\n        if (registerBtn) registerBtn.style.display = 'none';\n        \n        // Show authenticated user elements\n        if (dashboardLink) dashboardLink.style.display = 'inline-flex';\n        if (profileLink) profileLink.style.display = 'inline-flex';\n        if (userMenu) {\n            userMenu.style.display = 'inline-block';\n            if (userName) {\n                userName.textContent = user.first_name || user.username || 'User';\n            }\n        }\n    }\n}\n\nasync function logout() {\n    try {\n        const response = await fetch('/api/logout', {\n            method: 'POST'\n        });\n        \n        if (response.ok) {\n            showMessage('Logged out successfully', 'success');\n            setTimeout(() => {\n                window.location.reload();\n            }, 1000);\n        }\n    } catch (error) {\n        console.error('Logout error:', error);\n        showMessage('Error logging out', 'error');\n    }\n}\n\n// Load featured projects for homepage\nasync function loadFeaturedProjects() {\n    try {\n        const response = await fetch('/api/projects?per_page=6&sort=recent');\n        \n        if (response.ok) {\n            const data = await response.json();\n            displayFeaturedProjects(data.projects);\n        } else {\n            console.error('Failed to load featured projects');\n        }\n    } catch (error) {\n        console.error('Error loading featured projects:', error);\n    }\n}\n\nfunction displayFeaturedProjects(projects) {\n    const projectsGrid = document.getElementById('projects-grid');\n    if (!projectsGrid || projects.length === 0) return;\n\n    projectsGrid.innerHTML = projects.map(project => `\n        <div class=\"project-card\" onclick=\"viewProject(${project.id})\">\n            <div class=\"project-header\">\n                <span class=\"project-category\">${project.category}</span>\n                <span class=\"project-date\">${formatDate(project.created_at)}</span>\n            </div>\n            <h3 class=\"project-title\">${escapeHtml(project.title)}</h3>\n            <div class=\"project-owner\">\n                <i class=\"fas fa-user\"></i>\n                <span>${escapeHtml(project.owner?.full_name || 'Unknown')}</span>\n            </div>\n            <p class=\"project-description\">${escapeHtml(project.description)}</p>\n            <div class=\"project-stats\">\n                <div class=\"project-stat\">\n                    <i class=\"fas fa-thumbs-up\"></i>\n                    <span>${project.vote_count}</span>\n                </div>\n                <div class=\"project-stat\">\n                    <i class=\"fas fa-dollar-sign\"></i>\n                    <span>$${project.current_funding.toFixed(2)}</span>\n                </div>\n                <div class=\"project-stat\">\n                    <i class=\"fas fa-users\"></i>\n                    <span>${project.collaboration_count}</span>\n                </div>\n            </div>\n        </div>\n    `).join('');\n}\n\nfunction viewProject(projectId) {\n    window.location.href = `browse.html?project=${projectId}`;\n}\n\n// Load platform statistics\nasync function loadStats() {\n    try {\n        const response = await fetch('/api/homepage/stats'); // Get homepage stats including donations\n        \n        if (response.ok) {\n            const data = await response.json();\n            updateStatsElements(data.totalProjects, data.totalUsers, data.totalFunding);\n        } else {\n            // Fallback to projects API if homepage stats not available\n            const projectsResponse = await fetch('/api/projects?per_page=1000');\n            if (projectsResponse.ok) {\n                const projectsData = await projectsResponse.json();\n                updateStats(projectsData);\n            }\n        }\n    } catch (error) {\n        console.error('Error loading stats:', error);\n        // Set default values if API fails\n        updateStatsElements(0, 0, 0);\n    }\n}\n\nfunction updateStats(data) {\n    const projects = data.projects || [];\n    const totalProjects = projects.length;\n    const totalUsers = new Set(projects.map(p => p.owner?.id)).size;\n    const totalFunding = projects.reduce((sum, p) => sum + (p.current_funding || 0), 0);\n    \n    updateStatsElements(totalProjects, totalUsers, totalFunding);\n}\n\nfunction updateStatsElements(projects, users, funding) {\n    const totalProjectsEl = document.getElementById('total-projects');\n    const totalUsersEl = document.getElementById('total-users');\n    const totalFundingEl = document.getElementById('total-funding');\n    \n    if (totalProjectsEl) {\n        totalProjectsEl.textContent = `${projects}+`;\n    }\n    \n    if (totalUsersEl) {\n        totalUsersEl.textContent = `${users}+`;\n    }\n    \n    if (totalFundingEl) {\n        // Format funding amount appropriately\n        if (funding >= 1000) {\n            totalFundingEl.textContent = `$${(funding / 1000).toFixed(1)}K+`;\n        } else if (funding > 0) {\n            totalFundingEl.textContent = `$${funding.toFixed(0)}+`;\n        } else {\n            totalFundingEl.textContent = `$0`;\n        }\n    }\n}\n\n// Utility functions\nfunction formatDate(dateString) {\n    const date = new Date(dateString);\n    return date.toLocaleDateString('en-US', {\n        year: 'numeric',\n        month: 'short',\n        day: 'numeric'\n    });\n}\n\nfunction escapeHtml(text) {\n    const div = document.createElement('div');\n    div.textContent = text;\n    return div.innerHTML;\n}\n\nfunction showMessage(message, type = 'info') {\n    const container = document.getElementById('message-container') || createMessageContainer();\n    \n    const messageDiv = document.createElement('div');\n    messageDiv.className = `message ${type}`;\n    messageDiv.textContent = message;\n    \n    container.appendChild(messageDiv);\n    \n    // Remove message after 5 seconds\n    setTimeout(() => {\n        if (messageDiv.parentNode) {\n            messageDiv.parentNode.removeChild(messageDiv);\n        }\n    }, 5000);\n}\n\nfunction createMessageContainer() {\n    const container = document.createElement('div');\n    container.id = 'message-container';\n    container.className = 'message-container';\n    document.body.appendChild(container);\n    return container;\n}\n\n// Toggle user dropdown menu\nfunction toggleUserMenu() {\n    const dropdown = document.getElementById('user-dropdown');\n    if (dropdown) {\n        dropdown.classList.toggle('show');\n    }\n}\n\n// Close dropdown when clicking outside\ndocument.addEventListener('click', function(event) {\n    const userMenu = document.querySelector('.user-menu');\n    if (userMenu && !userMenu.contains(event.target)) {\n        const dropdown = document.getElementById('user-dropdown');\n        if (dropdown) {\n            dropdown.classList.remove('show');\n        }\n    }\n});\n\n// Initialize everything when DOM loads\ndocument.addEventListener('DOMContentLoaded', function() {\n    checkAuthStatus();\n    \n    // Check if we're on the home page and load stats\n    if (window.location.pathname === '/' || window.location.pathname === '/index.html') {\n        loadStats();\n    }\n    \n    // Get any error message from session storage\n    const errorMessage = sessionStorage.getItem('errorMessage');\n    if (errorMessage) {\n        showNotification(errorMessage, 'error');\n        sessionStorage.removeItem('errorMessage');\n    }\n    \n    // Get any success message from session storage\n    const successMessage = sessionStorage.getItem('successMessage');\n    if (successMessage) {\n        showNotification(successMessage, 'success');\n        sessionStorage.removeItem('successMessage');\n    }\n});\n","size_bytes":9189},"static/js/profile.js":{"content":"// Profile page JavaScript functionality\n\nlet currentUser = null;\nlet viewingUserId = null;\n\ndocument.addEventListener('DOMContentLoaded', function() {\n    // Check if viewing another user's profile\n    const urlParams = new URLSearchParams(window.location.search);\n    viewingUserId = urlParams.get('user_id');\n    \n    // First verify authentication for any profile access\n    checkAuthStatus().then(() => {\n        if (viewingUserId) {\n            // Load other user's profile\n            loadOtherUserProfile(viewingUserId);\n        } else {\n            // Load own profile data\n            loadProfileData();\n        }\n        \n        // Setup modals (only for own profile)\n        if (!viewingUserId) {\n            setupModals();\n            setupProfileImage();\n        }\n        \n        // Setup search functionality\n        setupSearchFunction();\n        \n        // Load all sections\n        loadAllSections();\n        \n        // Start real-time updates\n        startRealTimeUpdates();\n    });\n});\n\nasync function checkAuthStatus() {\n    try {\n        const response = await fetch('/api/user');\n        if (response.ok) {\n            const data = await response.json();\n            currentUser = data.user;\n            // Only update profile info if we're not viewing another user's profile\n            if (!viewingUserId) {\n                updateProfileInfo();\n            }\n            return true;\n        } else {\n            // Redirect to login if not authenticated\n            window.location.href = 'login.html';\n            return false;\n        }\n    } catch (error) {\n        console.error('Auth check error:', error);\n        window.location.href = 'login.html';\n        return false;\n    }\n}\n\nasync function loadOtherUserProfile(userId) {\n    console.log('Loading profile for user ID:', userId);\n    try {\n        const response = await fetch(`/api/users/${userId}/profile`);\n        console.log('API response status:', response.status);\n        \n        if (response.ok) {\n            const data = await response.json();\n            console.log('Profile data received:', data);\n            \n            currentUser = data.profile;\n            updateProfileInfo();\n            updateProfileStats(data.profile);\n            displayUserProjects(data.profile.projects || []);\n            \n            // Hide edit button for other users' profiles\n            const editBtn = document.getElementById('edit-profile-btn');\n            if (editBtn) editBtn.style.display = 'none';\n            \n            // Hide profile image overlay for other users\n            const overlay = document.getElementById('profile-image-overlay');\n            if (overlay) overlay.style.display = 'none';\n            \n            // Update page title to show whose profile this is\n            document.title = `${data.profile.full_name}'s Profile | CollabFund`;\n            \n            // Show a banner indicating viewing another user's profile\n            showViewingOtherProfileBanner(data.profile.full_name);\n            \n        } else {\n            const errorText = await response.text();\n            console.error('Failed to load user profile:', response.status, errorText);\n            showMessage('User profile not found', 'error');\n        }\n    } catch (error) {\n        console.error('Error loading user profile:', error);\n        showMessage('Error loading user profile', 'error');\n    }\n}\n\nfunction showViewingOtherProfileBanner(userName) {\n    const existingBanner = document.querySelector('.viewing-other-profile-banner');\n    if (existingBanner) {\n        existingBanner.remove();\n    }\n    \n    const banner = document.createElement('div');\n    banner.className = 'viewing-other-profile-banner';\n    banner.innerHTML = `\n        <div class=\"banner-content\">\n            <i class=\"fas fa-eye\"></i>\n            <span>Viewing ${userName}'s Profile</span>\n            <a href=\"profile.html\" class=\"btn-secondary btn-small\">\n                <i class=\"fas fa-user\"></i> My Profile\n            </a>\n        </div>\n    `;\n    \n    const main = document.querySelector('.profile-main');\n    if (main) {\n        main.insertBefore(banner, main.firstChild);\n    }\n}\n\nfunction updateProfileInfo(profileData = null) {\n    const user = profileData || currentUser;\n    if (!user) return;\n    \n    // Update sidebar profile info\n    document.getElementById('profile-name').textContent = user.full_name || 'Nave Name';\n    \n    // Update title/role\n    const titleElement = document.getElementById('profile-title');\n    if (user.title) {\n        titleElement.textContent = user.title;\n    } else {\n        titleElement.textContent = 'Your Softation';\n    }\n    \n    // Update contact item links with actual data when available\n    updateContactItems(user);\n    \n    // Update profile image\n    const profileImage = document.getElementById('profile-image');\n    const defaultAvatar = document.getElementById('default-avatar');\n    if (user.profile_image) {\n        profileImage.src = user.profile_image;\n        profileImage.style.display = 'block';\n        defaultAvatar.style.display = 'none';\n    } else {\n        profileImage.style.display = 'none';\n        defaultAvatar.style.display = 'flex';\n    }\n}\n\nfunction updateContactItems(user) {\n    // Update bio in about section\n    const bioElement = document.getElementById('profile-bio');\n    if (user.bio && user.bio.trim() !== '') {\n        bioElement.textContent = user.bio;\n    } else {\n        bioElement.textContent = 'Student developer passionate about creating innovative solutions.';\n    }\n    \n    // Update LinkedIn\n    const linkedinItem = document.querySelector('.contact-item:nth-child(1)');\n    if (linkedinItem && user.linkedin) {\n        linkedinItem.style.cursor = 'pointer';\n        linkedinItem.onclick = () => window.open(user.linkedin.startsWith('http') ? user.linkedin : `https://linkedin.com/in/${user.linkedin}`, '_blank');\n    }\n    \n    // Update Phone\n    const phoneItem = document.querySelector('.contact-item:nth-child(2) span');\n    if (phoneItem) {\n        phoneItem.textContent = user.phone || 'Phone';\n    }\n    \n    // Update Location\n    const locationItem = document.querySelector('.contact-item:nth-child(3) span');\n    if (locationItem) {\n        locationItem.textContent = user.location || 'Location';\n    }\n    \n    // Update GitHub\n    const githubItem = document.querySelector('.contact-item:nth-child(4)');\n    if (githubItem && user.github) {\n        githubItem.style.cursor = 'pointer';\n        githubItem.onclick = () => window.open(user.github.startsWith('http') ? user.github : `https://github.com/${user.github}`, '_blank');\n    }\n    \n    // Update Twitter\n    const twitterItem = document.querySelector('.contact-item:nth-child(5)');\n    if (twitterItem && user.twitter) {\n        twitterItem.style.cursor = 'pointer';\n        twitterItem.onclick = () => window.open(user.twitter.startsWith('http') ? user.twitter : `https://twitter.com/${user.twitter.replace('@', '')}`, '_blank');\n    }\n}\n\nfunction updateSocialLinks(user) {\n    // Update Twitter link\n    const twitterLink = document.getElementById('twitter-link');\n    if (user.twitter) {\n        twitterLink.href = user.twitter.startsWith('http') ? user.twitter : `https://twitter.com/${user.twitter.replace('@', '')}`;\n        twitterLink.style.display = 'flex';\n    } else {\n        twitterLink.style.display = 'none';\n    }\n    \n    // Update LinkedIn link\n    const linkedinLink = document.getElementById('linkedin-link');\n    if (user.linkedin) {\n        linkedinLink.href = user.linkedin.startsWith('http') ? user.linkedin : `https://linkedin.com/in/${user.linkedin}`;\n        linkedinLink.style.display = 'flex';\n    } else {\n        linkedinLink.style.display = 'none';\n    }\n    \n    // Update GitHub link\n    const githubLink = document.getElementById('github-link');\n    if (user.github) {\n        githubLink.href = user.github.startsWith('http') ? user.github : `https://github.com/${user.github}`;\n        githubLink.style.display = 'flex';\n    } else {\n        githubLink.style.display = 'none';\n    }\n}\n\nfunction updateProfileStats(stats) {\n    document.getElementById('user-projects-count').textContent = stats.total_projects || 0;\n    document.getElementById('user-collaborations').textContent = stats.total_collaborations || 0;\n    document.getElementById('user-funding').textContent = `$${(stats.total_funding || 0).toFixed(2)}`;\n    document.getElementById('user-votes').textContent = stats.total_votes || 0;\n}\n\nasync function loadProfileData() {\n    try {\n        // Load user statistics\n        await loadUserStats();\n        \n        // Load user projects\n        await loadUserProjects();\n        \n        // Load collaborations\n        await loadUserCollaborations();\n        \n        // Load donations\n        await loadUserDonations();\n        \n        // Load activity\n        await loadUserActivity();\n        \n    } catch (error) {\n        console.error('Error loading profile data:', error);\n    }\n}\n\nasync function loadUserStats() {\n    try {\n        const response = await fetch('/api/dashboard/stats');\n        if (response.ok) {\n            const data = await response.json();\n            \n            document.getElementById('user-projects').textContent = data.total_projects || 0;\n            document.getElementById('user-collaborations').textContent = data.total_collaborations || 0;\n            document.getElementById('user-funding').textContent = `$${(data.total_funding || 0).toFixed(2)}`;\n            document.getElementById('user-votes').textContent = data.total_votes || 0;\n        }\n    } catch (error) {\n        console.error('Error loading user stats:', error);\n    }\n}\n\nasync function loadUserProjects() {\n    const projectsGrid = document.getElementById('user-projects-grid');\n    const emptyState = document.querySelector('#projects-section .empty-state');\n    if (!projectsGrid || !emptyState) return;\n    \n    try {\n        const response = await fetch('/api/dashboard/stats');\n        if (response.ok) {\n            const data = await response.json();\n            const projects = data.projects || [];\n            \n            if (projects.length > 0) {\n                emptyState.style.display = 'none';\n                projectsGrid.style.display = 'grid';\n                displayUserProjects(projects);\n            } else {\n                emptyState.style.display = 'flex';\n                projectsGrid.style.display = 'none';\n            }\n        } else {\n            emptyState.style.display = 'flex';\n            projectsGrid.style.display = 'none';\n        }\n    } catch (error) {\n        console.error('Error loading user projects:', error);\n        emptyState.style.display = 'flex';\n        projectsGrid.style.display = 'none';\n    }\n}\n\nfunction displayUserProjects(projects) {\n    const projectsGrid = document.getElementById('user-projects-grid');\n    if (!projectsGrid) return;\n    \n    if (projects.length === 0) {\n        projectsGrid.innerHTML = `\n            <div class=\"empty-state\">\n                <i class=\"fas fa-rocket\"></i>\n                <h3>No Projects Yet</h3>\n                <p>Create your first project to get started!</p>\n                <button class=\"btn-primary\" onclick=\"window.location.href='dashboard.html'\">\n                    <i class=\"fas fa-plus\"></i> Create Project\n                </button>\n            </div>\n        `;\n        return;\n    }\n    \n    // Sample project data with images and tech stacks for demonstration\n    const sampleProjects = [\n        {\n            id: 1,\n            title: \"Project\",\n            description: \"Velit qui anim id excepturi amet quis and placerat ante.\",\n            category: \"React\",\n            tech: \"React\",\n            badge: \"Beta\",\n            image: null,\n            gradient: \"linear-gradient(135deg, #667eea, #764ba2)\"\n        },\n        {\n            id: 2,\n            title: \"Saven\",\n            description: \"Velit qui anim sed esse consectetur enim and laborum et dolore magna.\",\n            category: \"React\",  \n            tech: \"Python\",\n            badge: \"Rust\",\n            image: null,\n            gradient: \"linear-gradient(135deg, #f093fb, #f5576c)\"\n        },\n        {\n            id: 3,\n            title: \"Clomtpotion\",\n            description: \"Velit qui nisi sed consectetur enim and laborum et dolore magna.\",\n            category: \"Python\",\n            tech: \"Heltiq\",\n            badge: \"AWS\",\n            image: null,\n            gradient: \"linear-gradient(135deg, #4facfe, #00f2fe)\"\n        },\n        {\n            id: 4,\n            title: \"Python\", \n            description: \"Carry text and consectetur enim and laborum et magna consequat.\",\n            category: \"Programming\",\n            tech: \"NumPy\",\n            badge: \"Beta\",\n            image: null,\n            gradient: \"linear-gradient(135deg, #43e97b, #38f9d7)\"\n        },\n        {\n            id: 5,\n            title: \"Python\",\n            description: \"Carry text eur mollit enim and laborum et dolore magna consequat.\",\n            category: \"Data Science\",\n            tech: \"Python\",\n            badge: \"Beta\",\n            image: null,\n            gradient: \"linear-gradient(135deg, #fa709a, #fee140)\"\n        },\n        {\n            id: 6,\n            title: \"Soovuts\",\n            description: \"Velit qui anim eum esse consectetur enim and laborum et magna consequat.\",\n            category: \"Web Development\",\n            tech: \"Django\",\n            badge: \"AWS\",\n            image: null,\n            gradient: \"linear-gradient(135deg, #a8edea, #fed6e3)\"\n        },\n        {\n            id: 7,\n            title: \"Pood rons\",\n            description: \"Velit qui anim in pariatur cillum mollit and magna consequat dolore.\",\n            category: \"Mobile\",\n            tech: \"Flutter\",\n            badge: \"Beta\",\n            image: null,\n            gradient: \"linear-gradient(135deg, #ff9a9e, #fecfef)\"\n        },\n        {\n            id: 8,\n            title: \"Varion\",\n            description: \"Carry test sunt anim dolore cillum and laborum et magna consequat.\", \n            category: \"AI/ML\",\n            tech: \"Python\",\n            badge: \"Beta\",\n            image: null,\n            gradient: \"linear-gradient(135deg, #a18cd1, #fbc2eb)\"\n        },\n        {\n            id: 9,\n            title: \"Licediains\",\n            description: \"Velit qui anim dolore consequat et and laborum et magna consequat.\",\n            category: \"Blockchain\",\n            tech: \"Remix\",\n            badge: \"Beta\",\n            image: null,\n            gradient: \"linear-gradient(135deg, #ffecd2, #fcb69f)\"\n        }\n    ];\n    \n    // Use sample projects for demonstration, but in real implementation use actual projects\n    const displayProjects = projects.length > 0 ? projects : sampleProjects;\n    \n    projectsGrid.innerHTML = displayProjects.map((project, index) => {\n        const sampleProject = sampleProjects[index % sampleProjects.length];\n        return `\n            <div class=\"project-card\" onclick=\"viewProject(${project.id || sampleProject.id})\">\n                <div class=\"project-image\" style=\"background: ${getProjectImage(project, sampleProject)}\">\n                    ${getProjectImageElement(project, sampleProject)}\n                    <div class=\"project-badge\">${sampleProject.badge}</div>\n                </div>\n                <div class=\"project-info\">\n                    <h3 class=\"project-title\">${escapeHtml(project.title || sampleProject.title)}</h3>\n                    <div class=\"project-category\">${escapeHtml(project.category || sampleProject.category)}</div>\n                    <div class=\"project-actions\">\n                        <button class=\"action-btn btn-view\" onclick=\"event.stopPropagation(); viewProject(${project.id || sampleProject.id})\">View Project</button>\n                    </div>\n                </div>\n            </div>\n        `;\n    }).join('');\n}\n\nfunction getProjectImage(project, sampleProject) {\n    // Check if project has image attachments\n    if (project.attachments && project.attachments.length > 0) {\n        const imageAttachment = project.attachments.find(att => \n            att.file_type && att.file_type.startsWith('image/')\n        );\n        if (imageAttachment) {\n            return `url('/static/${imageAttachment.file_path}') center/cover`;\n        }\n    }\n    return sampleProject.gradient;\n}\n\nfunction getProjectImageElement(project, sampleProject) {\n    // Check if project has image attachments\n    if (project.attachments && project.attachments.length > 0) {\n        const imageAttachment = project.attachments.find(att => \n            att.file_type && att.file_type.startsWith('image/')\n        );\n        if (imageAttachment) {\n            return `<img src=\"/static/${imageAttachment.file_path}\" alt=\"${escapeHtml(project.title || sampleProject.title)}\" style=\"width: 100%; height: 100%; object-fit: cover;\">`;\n        }\n    }\n    return sampleProject.image ? `<img src=\"${sampleProject.image}\" alt=\"${escapeHtml(project.title || sampleProject.title)}\">` : '';\n}\n\nfunction viewProject(projectId) {\n    // Navigate to browse dashboard to view project details\n    window.location.href = `/browse.html?project=${projectId}`;\n}\n\n// Load collaborations for the collaboration tab\nfunction loadUserCollaborations() {\n    const collaborationsList = document.getElementById('user-collaborations-list');\n    if (!collaborationsList) return;\n    \n    // Sample collaboration data\n    const collaborations = [\n        {\n            id: 1,\n            project_title: \"EcoTrack App\",\n            role: \"Frontend Developer\",\n            status: \"Active\",\n            owner: \"Sarah Johnson\",\n            created_date: \"2024-02-15\"\n        },\n        {\n            id: 2,\n            project_title: \"Smart Campus System\",\n            role: \"Backend Developer\", \n            status: \"Completed\",\n            owner: \"Mike Chen\",\n            created_date: \"2024-01-20\"\n        },\n        {\n            id: 3,\n            project_title: \"Study Buddy Platform\",\n            role: \"UI/UX Designer\",\n            status: \"Active\",\n            owner: \"Lisa Williams\",\n            created_date: \"2024-03-01\"\n        }\n    ];\n    \n    if (collaborations.length === 0) {\n        collaborationsList.innerHTML = `\n            <div class=\"empty-state\">\n                <i class=\"fas fa-handshake\"></i>\n                <h3>No Collaborations Yet</h3>\n                <p>Start collaborating on projects to see them here!</p>\n            </div>\n        `;\n        return;\n    }\n    \n    collaborationsList.innerHTML = `\n        <div class=\"collaborations-grid\">\n            ${collaborations.map(collab => `\n                <div class=\"collaboration-card\">\n                    <div class=\"collaboration-header\">\n                        <h3>${escapeHtml(collab.project_title)}</h3>\n                        <span class=\"status-badge ${collab.status.toLowerCase()}\">${collab.status}</span>\n                    </div>\n                    <div class=\"collaboration-details\">\n                        <p><strong>Role:</strong> ${escapeHtml(collab.role)}</p>\n                        <p><strong>Project Owner:</strong> ${escapeHtml(collab.owner)}</p>\n                        <p><strong>Started:</strong> ${new Date(collab.created_date).toLocaleDateString()}</p>\n                    </div>\n                    <div class=\"collaboration-actions\">\n                        <button class=\"action-btn btn-view\" onclick=\"viewProject(${collab.id})\">View Project</button>\n                        <button class=\"action-btn btn-github\">Contact Owner</button>\n                    </div>\n                </div>\n            `).join('')}\n        </div>\n    `;\n}\n\n// Load donations for the donation tab\nfunction loadUserDonations() {\n    const donationsList = document.getElementById('user-donations-list');\n    if (!donationsList) return;\n    \n    // Sample donation data\n    const donations = [\n        {\n            id: 1,\n            project_title: \"Clean Water Initiative\",\n            amount: 50.00,\n            date: \"2024-03-10\",\n            status: \"Completed\"\n        },\n        {\n            id: 2,\n            project_title: \"Student Learning App\",\n            amount: 25.00,\n            date: \"2024-03-05\",\n            status: \"Completed\"\n        },\n        {\n            id: 3,\n            project_title: \"Community Garden Project\",\n            amount: 75.00,\n            date: \"2024-02-28\",\n            status: \"Completed\"\n        }\n    ];\n    \n    if (donations.length === 0) {\n        donationsList.innerHTML = `\n            <div class=\"empty-state\">\n                <i class=\"fas fa-donate\"></i>\n                <h3>No Donations Yet</h3>\n                <p>Support projects you believe in to see your donation history here!</p>\n            </div>\n        `;\n        return;\n    }\n    \n    donationsList.innerHTML = `\n        <div class=\"donations-grid\">\n            ${donations.map(donation => `\n                <div class=\"donation-card\">\n                    <div class=\"donation-header\">\n                        <h3>${escapeHtml(donation.project_title)}</h3>\n                        <span class=\"amount\">$${donation.amount.toFixed(2)}</span>\n                    </div>\n                    <div class=\"donation-details\">\n                        <p><strong>Date:</strong> ${new Date(donation.date).toLocaleDateString()}</p>\n                        <p><strong>Status:</strong> ${donation.status}</p>\n                    </div>\n                    <div class=\"donation-actions\">\n                        <button class=\"action-btn btn-view\" onclick=\"viewProject(${donation.id})\">View Project</button>\n                    </div>\n                </div>\n            `).join('')}\n        </div>\n    `;\n}\n\n// Load activity history for the history tab\nfunction loadUserActivity() {\n    const activityFeed = document.getElementById('user-activity-feed');\n    if (!activityFeed) return;\n    \n    // Sample activity data\n    const activities = [\n        {\n            id: 1,\n            type: \"project_created\",\n            description: \"Created a new project 'AI Study Assistant'\",\n            date: \"2024-03-15\",\n            icon: \"fa-rocket\"\n        },\n        {\n            id: 2,\n            type: \"collaboration\",\n            description: \"Joined collaboration on 'EcoTrack App'\",\n            date: \"2024-03-10\",\n            icon: \"fa-handshake\"\n        },\n        {\n            id: 3,\n            type: \"donation\",\n            description: \"Donated $50 to 'Clean Water Initiative'\",\n            date: \"2024-03-10\",\n            icon: \"fa-donate\"\n        },\n        {\n            id: 4,\n            type: \"vote\",\n            description: \"Voted for 'Smart Campus System'\",\n            date: \"2024-03-08\",\n            icon: \"fa-thumbs-up\"\n        },\n        {\n            id: 5,\n            type: \"comment\",\n            description: \"Commented on 'Student Learning App'\",\n            date: \"2024-03-05\",\n            icon: \"fa-comment\"\n        }\n    ];\n    \n    if (activities.length === 0) {\n        activityFeed.innerHTML = `\n            <div class=\"empty-state\">\n                <i class=\"fas fa-history\"></i>\n                <h3>No Activity Yet</h3>\n                <p>Your activity history will appear here as you use the platform!</p>\n            </div>\n        `;\n        return;\n    }\n    \n    activityFeed.innerHTML = `\n        <div class=\"activity-timeline\">\n            ${activities.map(activity => `\n                <div class=\"activity-item\">\n                    <div class=\"activity-icon\">\n                        <i class=\"fas ${activity.icon}\"></i>\n                    </div>\n                    <div class=\"activity-content\">\n                        <p>${escapeHtml(activity.description)}</p>\n                        <span class=\"activity-date\">${new Date(activity.date).toLocaleDateString()}</span>\n                    </div>\n                </div>\n            `).join('')}\n        </div>\n    `;\n}\n\nasync function loadUserCollaborations() {\n    const collaborationsList = document.getElementById('user-collaborations-list');\n    const emptyState = document.querySelector('#collaboration-section .empty-state');\n    if (!collaborationsList || !emptyState) return;\n    \n    try {\n        const response = await fetch('/api/dashboard/user-collaborations');\n        if (response.ok) {\n            const data = await response.json();\n            const collaborations = data.collaborations || [];\n            \n            if (collaborations.length > 0) {\n                emptyState.style.display = 'none';\n                collaborationsList.style.display = 'grid';\n                displayUserCollaborations(collaborations);\n            } else {\n                emptyState.style.display = 'flex';\n                collaborationsList.style.display = 'none';\n            }\n        } else {\n            emptyState.style.display = 'flex';\n            collaborationsList.style.display = 'none';\n        }\n    } catch (error) {\n        console.error('Error loading collaborations:', error);\n        emptyState.style.display = 'flex';\n        collaborationsList.style.display = 'none';\n    }\n}\n\nfunction displayUserCollaborations(collaborations) {\n    const collaborationsList = document.getElementById('user-collaborations-list');\n    if (!collaborationsList) return;\n    \n    if (collaborations.length === 0) {\n        collaborationsList.innerHTML = `\n            <div class=\"empty-state\">\n                <i class=\"fas fa-handshake\"></i>\n                <h3>No Collaborations Yet</h3>\n                <p>Start collaborating with other students on their projects!</p>\n                <button class=\"btn-primary\" onclick=\"window.location.href='browse.html'\">\n                    <i class=\"fas fa-search\"></i> Browse Projects\n                </button>\n            </div>\n        `;\n        return;\n    }\n    \n    collaborationsList.innerHTML = collaborations.map(collab => `\n        <div class=\"list-item\">\n            <div class=\"list-item-header\">\n                <span class=\"list-item-title\">${escapeHtml(collab.project_title)}</span>\n                <span class=\"collaboration-status ${collab.status}\">${collab.status}</span>\n            </div>\n            <div class=\"list-item-content\">\n                <p><strong>Project Owner:</strong> ${escapeHtml(collab.owner_name)}</p>\n                ${collab.message ? `<p><strong>Message:</strong> ${escapeHtml(collab.message)}</p>` : ''}\n                <span class=\"list-item-date\" data-timestamp=\"${collab.created_at}\">${formatDate(collab.created_at)}</span>\n            </div>\n        </div>\n    `).join('');\n}\n\nasync function loadUserDonations() {\n    const donationsList = document.getElementById('user-donations-list');\n    const emptyState = document.querySelector('#donation-section .empty-state');\n    if (!donationsList || !emptyState) return;\n    \n    try {\n        const response = await fetch('/api/dashboard/user-donations');\n        if (response.ok) {\n            const data = await response.json();\n            const donations = data.donations || [];\n            \n            if (donations.length > 0) {\n                emptyState.style.display = 'none';\n                donationsList.style.display = 'grid';\n                displayUserDonations(donations);\n            } else {\n                emptyState.style.display = 'flex';\n                donationsList.style.display = 'none';\n            }\n        } else {\n            emptyState.style.display = 'flex';\n            donationsList.style.display = 'none';\n        }\n    } catch (error) {\n        console.error('Error loading donations:', error);\n        emptyState.style.display = 'flex';\n        donationsList.style.display = 'none';\n    }\n}\n\nfunction displayUserDonations(donations) {\n    const donationsList = document.getElementById('user-donations-list');\n    if (!donationsList) return;\n    \n    if (donations.length === 0) {\n        donationsList.innerHTML = `\n            <div class=\"empty-state\">\n                <i class=\"fas fa-donate\"></i>\n                <h3>No Donations Yet</h3>\n                <p>Support amazing student projects by making your first donation!</p>\n                <button class=\"btn-primary\" onclick=\"window.location.href='browse.html'\">\n                    <i class=\"fas fa-search\"></i> Browse Projects\n                </button>\n            </div>\n        `;\n        return;\n    }\n    \n    donationsList.innerHTML = donations.map(donation => `\n        <div class=\"list-item\">\n            <div class=\"list-item-header\">\n                <span class=\"list-item-title\">${escapeHtml(donation.project_title)}</span>\n                <span class=\"donation-amount\">$${donation.amount.toFixed(2)}</span>\n            </div>\n            <div class=\"list-item-content\">\n                <p><strong>Project Owner:</strong> ${escapeHtml(donation.owner_name)}</p>\n                ${donation.message ? `<p><strong>Message:</strong> ${escapeHtml(donation.message)}</p>` : ''}\n                <span class=\"list-item-date\" data-timestamp=\"${donation.created_at}\">${formatDate(donation.created_at)}</span>\n            </div>\n        </div>\n    `).join('');\n}\n\nasync function loadUserActivity() {\n    const activityFeed = document.getElementById('user-activity-feed');\n    const emptyState = document.querySelector('#history-section .empty-state');\n    if (!activityFeed || !emptyState) return;\n    \n    try {\n        const response = await fetch('/api/dashboard/user-activity');\n        if (response.ok) {\n            const data = await response.json();\n            const activities = data.activities || [];\n            \n            if (activities.length > 0) {\n                emptyState.style.display = 'none';\n                activityFeed.style.display = 'flex';\n                displayUserActivity(activities);\n            } else {\n                emptyState.style.display = 'flex';\n                activityFeed.style.display = 'none';\n            }\n        } else {\n            emptyState.style.display = 'flex';\n            activityFeed.style.display = 'none';\n        }\n    } catch (error) {\n        console.error('Error loading activity:', error);\n        emptyState.style.display = 'flex';\n        activityFeed.style.display = 'none';\n    }\n}\n\nfunction displayUserActivity(activities) {\n    const activityFeed = document.getElementById('user-activity-feed');\n    if (!activityFeed) return;\n    \n    if (activities.length === 0) {\n        activityFeed.innerHTML = `\n            <div class=\"empty-state\">\n                <i class=\"fas fa-history\"></i>\n                <h3>No Activity Yet</h3>\n                <p>Start creating projects, collaborating, and engaging with the community!</p>\n            </div>\n        `;\n        return;\n    }\n    \n    activityFeed.innerHTML = activities.map(activity => `\n        <div class=\"activity-item\">\n            <div class=\"activity-icon\">\n                <i class=\"fas ${getActivityIcon(activity.type)}\"></i>\n            </div>\n            <div class=\"activity-content\">\n                <div class=\"activity-text\">${activity.text}</div>\n                <div class=\"activity-time\" data-timestamp=\"${activity.time}\">${formatDate(activity.time)}</div>\n            </div>\n        </div>\n    `).join('');\n}\n\nfunction getActivityIcon(type) {\n    const icons = {\n        'project_created': 'fa-rocket',\n        'collaboration': 'fa-handshake',\n        'donation': 'fa-donate',\n        'vote': 'fa-thumbs-up',\n        'comment': 'fa-comment'\n    };\n    return icons[type] || 'fa-circle';\n}\n\nfunction setupTabs() {\n    const tabButtons = document.querySelectorAll('.tab-btn');\n    const tabContents = document.querySelectorAll('.tab-content');\n    \n    tabButtons.forEach(button => {\n        button.addEventListener('click', function() {\n            const targetTab = this.getAttribute('data-tab');\n            \n            // Remove active class from all buttons and contents\n            tabButtons.forEach(btn => btn.classList.remove('active'));\n            tabContents.forEach(content => content.classList.remove('active'));\n            \n            // Add active class to clicked button and corresponding content\n            this.classList.add('active');\n            const targetContent = document.getElementById(targetTab + '-tab');\n            if (targetContent) {\n                targetContent.classList.add('active');\n            }\n            \n            // Update content header title based on tab\n            const contentHeader = document.querySelector('.content-header h2');\n            if (contentHeader) {\n                switch(targetTab) {\n                    case 'projects':\n                        contentHeader.textContent = 'Projects';\n                        break;\n                    case 'collaboration':\n                        contentHeader.textContent = 'Collaboration';\n                        break;\n                    case 'donation':\n                        contentHeader.textContent = 'Donation';\n                        break;\n                    case 'history':\n                        contentHeader.textContent = 'History';\n                        break;\n                    default:\n                        contentHeader.textContent = this.textContent;\n                }\n            }\n            \n            // Clear any existing search notifications\n            const existingNotification = document.querySelector('.search-notification');\n            if (existingNotification) {\n                existingNotification.remove();\n            }\n            \n            // Update search placeholder for the new tab\n            updateSearchPlaceholder();\n            \n            // Load data for the selected tab - only load if content is empty\n            switch(targetTab) {\n                case 'projects':\n                    const projectsGrid = document.getElementById('user-projects-grid');\n                    if (!projectsGrid || projectsGrid.children.length === 0) {\n                        loadUserProjects();\n                    }\n                    break;\n                case 'collaboration':\n                    const collaborationsList = document.getElementById('user-collaborations-list');\n                    if (!collaborationsList || collaborationsList.children.length === 0) {\n                        loadUserCollaborations();\n                    }\n                    break;\n                case 'donation':\n                    const donationsList = document.getElementById('user-donations-list');\n                    if (!donationsList || donationsList.children.length === 0) {\n                        loadUserDonations();\n                    }\n                    break;\n                case 'history':\n                    const activityFeed = document.getElementById('user-activity-feed');\n                    if (!activityFeed || activityFeed.children.length === 0) {\n                        loadUserActivity();\n                    }\n                    break;\n            }\n        });\n    });\n}\n\nfunction setupModals() {\n    const editProfileBtn = document.getElementById('edit-profile-btn');\n    const saveProfileBtn = document.getElementById('save-profile-btn');\n    const closeModalBtns = document.querySelectorAll('.close-modal');\n    \n    if (editProfileBtn) {\n        editProfileBtn.addEventListener('click', openEditProfileModal);\n    }\n    \n    if (saveProfileBtn) {\n        saveProfileBtn.addEventListener('click', handleSaveProfile);\n    }\n    \n    closeModalBtns.forEach(btn => {\n        btn.addEventListener('click', closeModals);\n    });\n    \n    // Close modal when clicking outside\n    document.addEventListener('click', function(e) {\n        if (e.target.classList.contains('modal')) {\n            closeModals();\n        }\n    });\n}\n\nfunction setupProfileImage() {\n    const profileAvatar = document.getElementById('profile-avatar-container');\n    const imageInput = document.getElementById('profile-image-input');\n    const removeImageBtn = document.getElementById('remove-image-btn');\n    \n    if (profileAvatar && !viewingUserId) {\n        profileAvatar.addEventListener('click', () => {\n            if (imageInput) imageInput.click();\n        });\n    }\n    \n    if (imageInput) {\n        imageInput.addEventListener('change', handleImageSelect);\n    }\n    \n    if (removeImageBtn) {\n        removeImageBtn.addEventListener('click', handleImageRemove);\n    }\n}\n\nfunction handleImageSelect(event) {\n    const file = event.target.files[0];\n    if (!file) return;\n    \n    // Validate file type\n    if (!file.type.startsWith('image/')) {\n        alert('Please select an image file.');\n        return;\n    }\n    \n    // Validate file size (max 2MB)\n    if (file.size > 2 * 1024 * 1024) {\n        alert('Image size should be less than 2MB.');\n        return;\n    }\n    \n    const reader = new FileReader();\n    reader.onload = function(e) {\n        const base64Image = e.target.result;\n        \n        // Update preview in modal\n        const previewImg = document.getElementById('edit-preview-img');\n        const defaultPreview = document.getElementById('edit-default-preview');\n        const removeBtn = document.getElementById('remove-image-btn');\n        \n        if (previewImg && defaultPreview && removeBtn) {\n            previewImg.src = base64Image;\n            previewImg.style.display = 'block';\n            defaultPreview.style.display = 'none';\n            removeBtn.style.display = 'inline-flex';\n        }\n        \n        // Store the base64 image for saving\n        document.getElementById('edit-image-preview').dataset.imageData = base64Image;\n    };\n    reader.readAsDataURL(file);\n}\n\nfunction handleImageRemove() {\n    const previewImg = document.getElementById('edit-preview-img');\n    const defaultPreview = document.getElementById('edit-default-preview');\n    const removeBtn = document.getElementById('remove-image-btn');\n    const imageInput = document.getElementById('profile-image-input');\n    \n    if (previewImg && defaultPreview && removeBtn && imageInput) {\n        previewImg.style.display = 'none';\n        previewImg.src = '';\n        defaultPreview.style.display = 'flex';\n        removeBtn.style.display = 'none';\n        imageInput.value = '';\n        \n        // Mark for removal\n        document.getElementById('edit-image-preview').dataset.imageData = 'REMOVE';\n    }\n}\n\nfunction openEditProfileModal() {\n    if (!currentUser) return;\n    \n    // Pre-fill form with current user data\n    document.getElementById('edit-full-name').value = currentUser.full_name || '';\n    document.getElementById('edit-email').value = currentUser.email || '';\n    document.getElementById('edit-college').value = currentUser.college || '';\n    document.getElementById('edit-bio').value = currentUser.bio || '';\n    document.getElementById('edit-skills').value = currentUser.skills || '';\n    document.getElementById('edit-phone').value = currentUser.phone || '';\n    document.getElementById('edit-location').value = currentUser.location || '';\n    document.getElementById('edit-title').value = currentUser.title || '';\n    document.getElementById('edit-twitter').value = currentUser.twitter || '';\n    document.getElementById('edit-linkedin').value = currentUser.linkedin || '';\n    document.getElementById('edit-github').value = currentUser.github || '';\n    \n    // Set up image preview\n    const previewImg = document.getElementById('edit-preview-img');\n    const defaultPreview = document.getElementById('edit-default-preview');\n    const removeBtn = document.getElementById('remove-image-btn');\n    \n    if (currentUser.profile_image) {\n        previewImg.src = currentUser.profile_image;\n        previewImg.style.display = 'block';\n        defaultPreview.style.display = 'none';\n        removeBtn.style.display = 'inline-flex';\n    } else {\n        previewImg.style.display = 'none';\n        defaultPreview.style.display = 'flex';\n        removeBtn.style.display = 'none';\n    }\n    \n    const modal = document.getElementById('edit-profile-modal');\n    modal.classList.add('show');\n}\n\nasync function handleSaveProfile() {\n    const fullName = document.getElementById('edit-full-name').value;\n    const email = document.getElementById('edit-email').value;\n    const college = document.getElementById('edit-college').value;\n    const bio = document.getElementById('edit-bio').value;\n    const skills = document.getElementById('edit-skills').value;\n    const phone = document.getElementById('edit-phone').value;\n    const location = document.getElementById('edit-location').value;\n    const title = document.getElementById('edit-title').value;\n    const twitter = document.getElementById('edit-twitter').value;\n    const linkedin = document.getElementById('edit-linkedin').value;\n    const github = document.getElementById('edit-github').value;\n    \n    if (!fullName.trim() || !email.trim() || !college.trim()) {\n        showMessage('Please fill in all required fields', 'error');\n        return;\n    }\n    \n    const saveBtn = document.getElementById('save-profile-btn');\n    saveBtn.disabled = true;\n    saveBtn.innerHTML = '<i class=\"fas fa-spinner fa-spin\"></i> Saving...';\n    \n    try {\n        // Get image data if any\n        const imagePreview = document.getElementById('edit-image-preview');\n        const imageData = imagePreview ? imagePreview.dataset.imageData : null;\n        \n        const requestBody = {\n            full_name: fullName,\n            email: email,\n            college: college,\n            bio: bio,\n            skills: skills,\n            phone: phone,\n            location: location,\n            title: title,\n            twitter: twitter,\n            linkedin: linkedin,\n            github: github\n        };\n        \n        // Include image data if available\n        if (imageData) {\n            if (imageData === 'REMOVE') {\n                requestBody.profile_image = null;\n            } else {\n                requestBody.profile_image = imageData;\n            }\n        }\n        \n        const response = await fetch('/api/profile', {\n            method: 'PUT',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(requestBody)\n        });\n        \n        if (response.ok) {\n            const data = await response.json();\n            currentUser = data.user;\n            updateProfileInfo();\n            showMessage('Profile updated successfully!', 'success');\n            closeModals();\n        } else {\n            const errorData = await response.json();\n            showMessage(errorData.error || 'Error updating profile', 'error');\n        }\n        \n    } catch (error) {\n        console.error('Error updating profile:', error);\n        showMessage('Error updating profile', 'error');\n    } finally {\n        saveBtn.disabled = false;\n        saveBtn.innerHTML = '<i class=\"fas fa-save\"></i> Save Changes';\n    }\n}\n\nfunction closeModals() {\n    const modals = document.querySelectorAll('.modal');\n    modals.forEach(modal => modal.classList.remove('show'));\n}\n\n// Function to handle clicking on user names in comments and collaborations\nfunction handleUserNameClick(userId, username) {\n    if (userId && userId !== currentUser?.id) {\n        window.location.href = `/profile.html?user_id=${userId}`;\n    }\n}\n\n// Make user names clickable in generated content\nfunction makeUserNamesClickable(container) {\n    const userElements = container.querySelectorAll('[data-user-id]');\n    userElements.forEach(element => {\n        const userId = element.dataset.userId;\n        const username = element.textContent;\n        if (userId && userId !== currentUser?.id) {\n            element.style.cursor = 'pointer';\n            element.style.color = '#28a745';\n            element.style.textDecoration = 'underline';\n            element.addEventListener('click', () => handleUserNameClick(userId, username));\n        }\n    });\n}\n\n// Utility functions\nfunction escapeHtml(text) {\n    if (!text) return '';\n    const map = {\n        '&': '&amp;',\n        '<': '&lt;',\n        '>': '&gt;',\n        '\"': '&quot;',\n        \"'\": '&#039;'\n    };\n    return text.replace(/[&<>\"']/g, function(m) { return map[m]; });\n}\n\nfunction formatDate(dateString) {\n    try {\n        const date = new Date(dateString);\n        // Always return only the date part, no time\n        return date.toLocaleDateString('en-US', {\n            year: 'numeric',\n            month: 'short',\n            day: 'numeric'\n        });\n    } catch (error) {\n        return 'Invalid date';\n    }\n}\n\nfunction showMessage(message, type) {\n    // Remove popup messages - just log to console instead\n    console.log(`${type}: ${message}`);\n}\n\n// Handle logout\nasync function handleLogout() {\n    try {\n        const response = await fetch('/api/logout', { method: 'POST' });\n        if (response.ok) {\n            window.location.href = '/';\n        }\n    } catch (error) {\n        console.error('Logout error:', error);\n    }\n}\n\n// Real-time updates for timestamps\nfunction startRealTimeUpdates() {\n    // Update all timestamps every minute\n    setInterval(updateAllTimestamps, 60000);\n}\n\nfunction updateAllTimestamps() {\n    // Update project timestamps\n    document.querySelectorAll('[data-timestamp]').forEach(element => {\n        const timestamp = element.getAttribute('data-timestamp');\n        if (timestamp) {\n            element.textContent = formatDate(timestamp);\n        }\n    });\n    \n    // Update activity timestamps\n    document.querySelectorAll('.activity-time[data-timestamp]').forEach(element => {\n        const timestamp = element.getAttribute('data-timestamp');\n        if (timestamp) {\n            element.textContent = formatDate(timestamp);\n        }\n    });\n    \n    // Update list item timestamps\n    document.querySelectorAll('.list-item-date[data-timestamp]').forEach(element => {\n        const timestamp = element.getAttribute('data-timestamp');\n        if (timestamp) {\n            element.textContent = formatDate(timestamp);\n        }\n    });\n}\n\n// Search functionality\nfunction setupSearchFunction() {\n    const searchBtn = document.querySelector('.search-btn');\n    const searchInput = document.getElementById('search-input');\n    \n    if (searchBtn) {\n        searchBtn.addEventListener('click', performSearch);\n    }\n    \n    if (searchInput) {\n        // Allow Enter key to trigger search\n        searchInput.addEventListener('keypress', function(e) {\n            if (e.key === 'Enter') {\n                performSearch();\n            }\n        });\n    }\n}\n\nfunction handleSearch() {\n    const searchQuery = prompt('Enter search term:');\n    if (!searchQuery || searchQuery.trim() === '') return;\n    \n    const activeTab = document.querySelector('.tab-btn.active').getAttribute('data-tab');\n    performSearch(searchQuery.trim(), activeTab);\n}\n\nfunction performSearch() {\n    const searchInput = document.getElementById('search-input');\n    \n    if (!searchInput) return;\n    \n    const searchTerm = searchInput.value.trim();\n    \n    if (!searchTerm) {\n        alert('Please enter a search term');\n        return;\n    }\n    \n    // Show search notification\n    showSearchNotification(searchTerm, 'all');\n    \n    // Perform search across all sections\n    searchAllSections(searchTerm.toLowerCase());\n    \n    // Clear the search input\n    searchInput.value = '';\n}\n\nfunction loadAllSections() {\n    // Load all sections at once since we no longer have tabs\n    loadUserProjects();\n    loadUserCollaborations();\n    loadUserDonations();\n    loadUserActivity();\n}\n\nfunction searchAllSections(searchTerm) {\n    // Search across all sections\n    searchProjects(searchTerm);\n    searchCollaborations(searchTerm);\n    searchDonations(searchTerm);\n    searchActivity(searchTerm);\n}\n\nfunction showSearchNotification(searchTerm, section) {\n    // Remove existing notifications\n    const existingNotification = document.querySelector('.search-notification');\n    if (existingNotification) {\n        existingNotification.remove();\n    }\n    \n    // Create new notification\n    const notification = document.createElement('div');\n    notification.className = 'search-notification';\n    notification.innerHTML = `\n        <span>Searching for \"${searchTerm}\" across all sections</span>\n        <button class=\"clear-search-btn\" onclick=\"clearSearch()\">Clear</button>\n    `;\n    \n    // Insert after search section\n    const searchSection = document.querySelector('.search-section');\n    if (searchSection) {\n        searchSection.parentNode.insertBefore(notification, searchSection.nextSibling);\n    }\n}\n\nfunction clearSearch() {\n    // Remove search notification\n    const notification = document.querySelector('.search-notification');\n    if (notification) {\n        notification.remove();\n    }\n    \n    // Reload all sections to show all content\n    loadAllSections();\n}\n\nfunction searchProjects(searchTerm) {\n    const projectCards = document.querySelectorAll('.project-card');\n    let visibleCount = 0;\n    \n    projectCards.forEach(card => {\n        const title = card.querySelector('.project-title').textContent.toLowerCase();\n        const description = card.querySelector('.project-description').textContent.toLowerCase();\n        const techLabel = card.querySelector('.tech-label');\n        const tech = techLabel ? techLabel.textContent.toLowerCase() : '';\n        \n        if (title.includes(searchTerm) || description.includes(searchTerm) || tech.includes(searchTerm)) {\n            card.style.display = 'block';\n            visibleCount++;\n        } else {\n            card.style.display = 'none';\n        }\n    });\n    \n    showSearchResults(visibleCount, searchTerm);\n}\n\nfunction searchCollaborations(searchTerm) {\n    const collaborationCards = document.querySelectorAll('.collaboration-card');\n    let visibleCount = 0;\n    \n    collaborationCards.forEach(card => {\n        const title = card.querySelector('h3').textContent.toLowerCase();\n        const role = card.textContent.toLowerCase();\n        \n        if (title.includes(searchTerm) || role.includes(searchTerm)) {\n            card.style.display = 'block';\n            visibleCount++;\n        } else {\n            card.style.display = 'none';\n        }\n    });\n    \n    showSearchResults(visibleCount, searchTerm);\n}\n\nfunction searchDonations(searchTerm) {\n    const donationCards = document.querySelectorAll('.donation-card');\n    let visibleCount = 0;\n    \n    donationCards.forEach(card => {\n        const title = card.querySelector('h3').textContent.toLowerCase();\n        \n        if (title.includes(searchTerm)) {\n            card.style.display = 'block';\n            visibleCount++;\n        } else {\n            card.style.display = 'none';\n        }\n    });\n    \n    showSearchResults(visibleCount, searchTerm);\n}\n\nfunction searchActivity(searchTerm) {\n    const activityItems = document.querySelectorAll('.activity-item');\n    let visibleCount = 0;\n    \n    activityItems.forEach(item => {\n        const description = item.querySelector('p').textContent.toLowerCase();\n        \n        if (description.includes(searchTerm)) {\n            item.style.display = 'flex';\n            visibleCount++;\n        } else {\n            item.style.display = 'none';\n        }\n    });\n    \n    showSearchResults(visibleCount, searchTerm);\n}\n\nfunction showSearchResults(count, searchTerm) {\n    // Show search results notification\n    const existingNotification = document.querySelector('.search-notification');\n    if (existingNotification) {\n        existingNotification.remove();\n    }\n    \n    const notification = document.createElement('div');\n    notification.className = 'search-notification';\n    notification.innerHTML = `\n        <span>Found ${count} results for \"${searchTerm}\"</span>\n        <button onclick=\"clearSearch()\" class=\"clear-search-btn\">Clear</button>\n    `;\n    \n    const contentHeader = document.querySelector('.content-header');\n    contentHeader.appendChild(notification);\n    \n    // Auto-remove after 5 seconds\n    setTimeout(() => {\n        if (notification.parentNode) {\n            notification.remove();\n        }\n    }, 5000);\n}\n\nfunction clearSearch() {\n    // Show all items again\n    const allCards = document.querySelectorAll('.project-card, .collaboration-card, .donation-card, .activity-item');\n    allCards.forEach(card => {\n        card.style.display = '';\n    });\n    \n    // Remove notification\n    const notification = document.querySelector('.search-notification');\n    if (notification) {\n        notification.remove();\n    }\n}","size_bytes":52459},"static/user-profile.css":{"content":"/* User Profile Page Dark Theme Styles */\n\n/* Base Dark Theme Override */\nbody {\n    background-color: #1a1a2e !important;\n    color: #ffffff !important;\n    font-family: 'Segoe UI', sans-serif !important;\n    margin: 0 !important;\n    padding: 0 !important;\n}\n\n/* Dark navbar override */\n.navbar {\n    background-color: #1a1a2e !important;\n    border-bottom: 1px solid #333 !important;\n}\n\n/* Main Container */\n.user-profile-container {\n    max-width: 1200px;\n    margin: 0 auto;\n    padding: 2rem 20px;\n    min-height: 100vh;\n}\n\n/* Loading State */\n.loading-container {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    min-height: 60vh;\n}\n\n.loading-spinner {\n    text-align: center;\n    color: rgba(255, 255, 255, 0.7);\n}\n\n.loading-spinner i {\n    font-size: 3rem;\n    color: #ffd700;\n    margin-bottom: 1rem;\n}\n\n.loading-spinner p {\n    font-size: 1.1rem;\n}\n\n/* Error State */\n.error-container {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    min-height: 60vh;\n}\n\n.error-message {\n    text-align: center;\n    background: rgba(255, 255, 255, 0.05);\n    backdrop-filter: blur(12px);\n    border-radius: 16px;\n    padding: 3rem;\n    border: 1px solid rgba(255, 255, 255, 0.1);\n}\n\n.error-message i {\n    font-size: 4rem;\n    color: #ff6b6b;\n    margin-bottom: 1rem;\n}\n\n.error-message h2 {\n    color: white;\n    margin-bottom: 1rem;\n}\n\n.error-message p {\n    color: rgba(255, 255, 255, 0.7);\n    margin-bottom: 2rem;\n}\n\n/* Profile Header */\n.profile-header {\n    background: rgba(255, 255, 255, 0.05);\n    backdrop-filter: blur(12px);\n    border-radius: 20px;\n    padding: 2.5rem;\n    margin-bottom: 2rem;\n    border: 1px solid rgba(255, 255, 255, 0.1);\n    display: flex;\n    gap: 2rem;\n    align-items: center;\n}\n\n.profile-avatar {\n    flex-shrink: 0;\n}\n\n.profile-avatar i {\n    font-size: 8rem;\n    color: #ffd700;\n    background: rgba(255, 215, 0, 0.1);\n    border-radius: 50%;\n    padding: 1rem;\n}\n\n.profile-info {\n    flex: 1;\n}\n\n.user-name {\n    font-size: 2.5rem;\n    font-weight: 700;\n    color: white;\n    margin-bottom: 0.5rem;\n}\n\n.user-college {\n    font-size: 1.2rem;\n    color: rgba(255, 255, 255, 0.8);\n    margin-bottom: 0.5rem;\n}\n\n.user-username {\n    font-size: 1rem;\n    color: #ffd700;\n    margin-bottom: 1.5rem;\n}\n\n.user-stats {\n    display: flex;\n    gap: 2rem;\n}\n\n.stat {\n    text-align: center;\n}\n\n.stat-number {\n    display: block;\n    font-size: 1.8rem;\n    font-weight: bold;\n    color: #ffd700;\n}\n\n.stat-label {\n    font-size: 0.9rem;\n    color: rgba(255, 255, 255, 0.6);\n    text-transform: uppercase;\n    letter-spacing: 0.5px;\n}\n\n/* Profile Actions */\n.profile-actions {\n    display: flex;\n    flex-direction: column;\n    gap: 1rem;\n    flex-shrink: 0;\n}\n\n.action-btn {\n    background: linear-gradient(135deg, #ffd700, #ffed4e);\n    color: #1a1a2e;\n    border: none;\n    border-radius: 25px;\n    padding: 12px 24px;\n    font-weight: 600;\n    cursor: pointer;\n    transition: all 0.3s ease;\n    display: flex;\n    align-items: center;\n    gap: 8px;\n    min-width: 160px;\n    justify-content: center;\n}\n\n.action-btn:hover {\n    transform: translateY(-2px);\n    box-shadow: 0 6px 20px rgba(255, 215, 0, 0.3);\n}\n\n.action-btn.secondary {\n    background: rgba(255, 255, 255, 0.1);\n    color: rgba(255, 255, 255, 0.8);\n    border: 1px solid rgba(255, 255, 255, 0.2);\n}\n\n.action-btn.secondary:hover {\n    background: rgba(255, 255, 255, 0.15);\n    color: white;\n    box-shadow: 0 6px 20px rgba(255, 255, 255, 0.1);\n}\n\n.action-btn.pending {\n    background: rgba(255, 152, 0, 0.2);\n    color: #ff9800;\n    border: 1px solid #ff9800;\n    cursor: not-allowed;\n}\n\n.action-btn.following {\n    background: rgba(76, 175, 80, 0.2);\n    color: #4caf50;\n    border: 1px solid #4caf50;\n}\n\n/* Profile Tabs */\n.profile-tabs {\n    display: flex;\n    gap: 8px;\n    margin-bottom: 2rem;\n    border-bottom: 1px solid rgba(255, 255, 255, 0.1);\n}\n\n.tab-btn {\n    background: none;\n    border: none;\n    color: rgba(255, 255, 255, 0.7);\n    padding: 1rem 1.5rem;\n    cursor: pointer;\n    border-radius: 8px 8px 0 0;\n    transition: all 0.3s ease;\n    font-size: 1rem;\n    font-weight: 500;\n    display: flex;\n    align-items: center;\n    gap: 8px;\n}\n\n.tab-btn:hover {\n    color: white;\n    background: rgba(255, 255, 255, 0.05);\n}\n\n.tab-btn.active {\n    color: #ffd700;\n    background: rgba(255, 215, 0, 0.1);\n    border-bottom: 2px solid #ffd700;\n}\n\n/* Tab Content */\n.tab-content {\n    min-height: 400px;\n}\n\n.tab-pane {\n    display: none;\n}\n\n.tab-pane.active {\n    display: block;\n}\n\n/* Projects Grid */\n.projects-grid {\n    display: grid;\n    grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));\n    gap: 1.5rem;\n}\n\n.project-card {\n    background: rgba(255, 255, 255, 0.05);\n    backdrop-filter: blur(12px);\n    border-radius: 16px;\n    padding: 1.5rem;\n    border: 1px solid rgba(255, 255, 255, 0.1);\n    transition: all 0.3s ease;\n    cursor: pointer;\n}\n\n.project-card:hover {\n    background: rgba(255, 255, 255, 0.08);\n    transform: translateY(-2px);\n    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);\n}\n\n.project-header {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    margin-bottom: 1rem;\n}\n\n.project-category {\n    background: linear-gradient(135deg, #ffd700, #ffed4e);\n    color: #1a1a2e;\n    padding: 4px 12px;\n    border-radius: 12px;\n    font-size: 0.8rem;\n    font-weight: 600;\n}\n\n.project-status {\n    padding: 4px 12px;\n    border-radius: 12px;\n    font-size: 0.8rem;\n    font-weight: 600;\n    text-transform: uppercase;\n}\n\n.project-status.active {\n    background: rgba(76, 175, 80, 0.2);\n    color: #4caf50;\n}\n\n.project-title {\n    color: white;\n    font-size: 1.3rem;\n    font-weight: 600;\n    margin-bottom: 0.5rem;\n}\n\n.project-description {\n    color: rgba(255, 255, 255, 0.8);\n    line-height: 1.6;\n    margin-bottom: 1rem;\n}\n\n.project-stats {\n    display: flex;\n    gap: 1rem;\n    align-items: center;\n}\n\n.project-stat {\n    display: flex;\n    align-items: center;\n    gap: 4px;\n    color: rgba(255, 255, 255, 0.6);\n    font-size: 0.9rem;\n}\n\n.project-stat i {\n    color: #ffd700;\n}\n\n/* About Section */\n.about-section {\n    background: rgba(255, 255, 255, 0.05);\n    backdrop-filter: blur(12px);\n    border-radius: 16px;\n    padding: 2rem;\n    border: 1px solid rgba(255, 255, 255, 0.1);\n}\n\n.about-section h3 {\n    color: white;\n    font-size: 1.3rem;\n    margin-bottom: 1rem;\n    display: flex;\n    align-items: center;\n    gap: 8px;\n}\n\n.about-section h3 i {\n    color: #ffd700;\n}\n\n.about-section p {\n    color: rgba(255, 255, 255, 0.8);\n    line-height: 1.6;\n    margin-bottom: 2rem;\n}\n\n.stats-grid {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n    gap: 1rem;\n}\n\n.stat-card {\n    background: rgba(255, 255, 255, 0.03);\n    border-radius: 12px;\n    padding: 1.5rem;\n    display: flex;\n    align-items: center;\n    gap: 1rem;\n    border: 1px solid rgba(255, 255, 255, 0.1);\n}\n\n.stat-card i {\n    font-size: 2rem;\n    color: #ffd700;\n}\n\n.stat-card .stat-info h4 {\n    color: white;\n    font-size: 1.5rem;\n    font-weight: 700;\n    margin-bottom: 0.25rem;\n}\n\n.stat-card .stat-info p {\n    color: rgba(255, 255, 255, 0.6);\n    font-size: 0.9rem;\n    margin: 0;\n}\n\n/* Modal Styles */\n.modal {\n    display: none;\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background: rgba(0, 0, 0, 0.8);\n    backdrop-filter: blur(8px);\n    z-index: 1000;\n    justify-content: center;\n    align-items: center;\n}\n\n.modal.show {\n    display: flex;\n}\n\n.modal-content {\n    background: #1a1a2e;\n    backdrop-filter: blur(12px);\n    border-radius: 16px;\n    width: 90%;\n    max-width: 500px;\n    border: 1px solid rgba(255, 255, 255, 0.2);\n}\n\n.modal-header {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    padding: 1.5rem 2rem;\n    border-bottom: 1px solid rgba(255, 255, 255, 0.1);\n}\n\n.modal-header h3 {\n    color: white;\n    font-size: 1.3rem;\n    font-weight: 600;\n    margin: 0;\n}\n\n.close-btn {\n    background: none;\n    border: none;\n    color: rgba(255, 255, 255, 0.7);\n    cursor: pointer;\n    font-size: 1.2rem;\n    padding: 4px;\n    border-radius: 50%;\n    transition: all 0.3s ease;\n}\n\n.close-btn:hover {\n    background: rgba(255, 255, 255, 0.1);\n    color: white;\n}\n\n.modal-body {\n    padding: 2rem;\n}\n\n.modal-body p {\n    color: rgba(255, 255, 255, 0.8);\n    margin-bottom: 1.5rem;\n}\n\n.form-group {\n    margin-bottom: 1.5rem;\n}\n\n.form-group label {\n    display: block;\n    color: white;\n    font-weight: 500;\n    margin-bottom: 0.5rem;\n}\n\n.form-group select,\n.form-group textarea {\n    width: 100%;\n    background: rgba(255, 255, 255, 0.1);\n    border: 1px solid rgba(255, 255, 255, 0.2);\n    border-radius: 8px;\n    padding: 12px 16px;\n    color: white;\n    font-size: 1rem;\n    font-family: inherit;\n    resize: vertical;\n}\n\n.form-group select:focus,\n.form-group textarea:focus {\n    outline: none;\n    border-color: #ffd700;\n    background: rgba(255, 255, 255, 0.15);\n}\n\n.form-group textarea {\n    min-height: 100px;\n}\n\n.modal-actions {\n    display: flex;\n    gap: 1rem;\n    justify-content: flex-end;\n    padding: 1.5rem 2rem;\n    border-top: 1px solid rgba(255, 255, 255, 0.1);\n}\n\n.btn-secondary,\n.btn-primary {\n    padding: 10px 20px;\n    border-radius: 8px;\n    font-size: 0.9rem;\n    font-weight: 600;\n    cursor: pointer;\n    transition: all 0.3s ease;\n    border: none;\n}\n\n.btn-secondary {\n    background: rgba(255, 255, 255, 0.1);\n    color: rgba(255, 255, 255, 0.8);\n    border: 1px solid rgba(255, 255, 255, 0.2);\n}\n\n.btn-secondary:hover {\n    background: rgba(255, 255, 255, 0.15);\n    color: white;\n}\n\n.btn-primary {\n    background: linear-gradient(135deg, #ffd700, #ffed4e);\n    color: #1a1a2e;\n}\n\n.btn-primary:hover {\n    transform: translateY(-1px);\n    box-shadow: 0 4px 12px rgba(255, 215, 0, 0.3);\n}\n\n/* Message Container */\n.message-container {\n    position: fixed;\n    top: 20px;\n    right: 20px;\n    z-index: 1100;\n    display: flex;\n    flex-direction: column;\n    gap: 10px;\n}\n\n.message {\n    background: #1a1a2e;\n    backdrop-filter: blur(12px);\n    border-radius: 8px;\n    padding: 12px 20px;\n    color: white;\n    font-weight: 500;\n    border-left: 4px solid;\n    animation: slideInFromRight 0.3s ease-out;\n    max-width: 300px;\n    border: 1px solid rgba(255, 255, 255, 0.1);\n}\n\n.message.success {\n    border-left-color: #4caf50;\n    background: rgba(76, 175, 80, 0.1);\n}\n\n.message.error {\n    border-left-color: #f44336;\n    background: rgba(244, 67, 54, 0.1);\n}\n\n.message.info {\n    border-left-color: #2196f3;\n    background: rgba(33, 150, 243, 0.1);\n}\n\n@keyframes slideInFromRight {\n    from {\n        transform: translateX(100%);\n        opacity: 0;\n    }\n    to {\n        transform: translateX(0);\n        opacity: 1;\n    }\n}\n\n/* Responsive Design */\n@media (max-width: 768px) {\n    .profile-header {\n        flex-direction: column;\n        text-align: center;\n        padding: 2rem;\n    }\n    \n    .profile-actions {\n        flex-direction: row;\n        justify-content: center;\n        width: 100%;\n    }\n    \n    .user-stats {\n        justify-content: center;\n    }\n    \n    .projects-grid {\n        grid-template-columns: 1fr;\n    }\n    \n    .stats-grid {\n        grid-template-columns: 1fr;\n    }\n}\n\n/* Empty State */\n.empty-state {\n    text-align: center;\n    padding: 3rem;\n    color: rgba(255, 255, 255, 0.6);\n}\n\n.empty-state i {\n    font-size: 4rem;\n    color: rgba(255, 255, 255, 0.3);\n    margin-bottom: 1rem;\n}\n\n.empty-state h3 {\n    color: white;\n    font-size: 1.5rem;\n    margin-bottom: 0.5rem;\n}\n\n.empty-state p {\n    font-size: 1rem;\n}","size_bytes":11613},"static/users.css":{"content":"/* Users Discovery Page Dark Theme Styles - Consistent with Discussion Page */\n\n/* Base Dark Theme Override - Match Discussion Page */\nbody {\n    background-color: #0d0d0d !important;\n    color: #ffffff !important;\n    font-family: 'Segoe UI', sans-serif !important;\n    margin: 0 !important;\n    padding: 0 !important;\n}\n\n/* Dark navbar override - Match Discussion Page */\n.navbar {\n    background-color: #0d0d0d !important;\n    background: #0d0d0d !important;\n    border-bottom: 1px solid #333 !important;\n}\n\n/* Ensure all scrollable areas maintain dark background */\nhtml, body, * {\n    scrollbar-color: #333 #0d0d0d;\n}\n\n*::-webkit-scrollbar {\n    width: 8px;\n    background-color: #0d0d0d;\n}\n\n*::-webkit-scrollbar-track {\n    background-color: #0d0d0d;\n}\n\n*::-webkit-scrollbar-thumb {\n    background-color: #333;\n    border-radius: 4px;\n}\n\n*::-webkit-scrollbar-thumb:hover {\n    background-color: #555;\n}\n\n/* Active navigation state */\n.nav-links a.active {\n    color: #ffd700;\n    border-bottom: 2px solid #ffd700;\n}\n\n/* User Profile Dropdown - Match Discussion Page */\n.user-profile {\n    position: relative;\n}\n\n.profile-btn {\n    background: rgba(255, 255, 255, 0.1);\n    border: 1px solid rgba(255, 255, 255, 0.2);\n    border-radius: 25px;\n    color: white;\n    padding: 8px 16px;\n    cursor: pointer;\n    display: flex;\n    align-items: center;\n    gap: 8px;\n    font-size: 0.9rem;\n    transition: all 0.3s ease;\n}\n\n.profile-btn:hover {\n    background: rgba(255, 255, 255, 0.15);\n    border-color: #ffd700;\n}\n\n.dropdown-menu {\n    position: absolute;\n    top: 100%;\n    right: 0;\n    background: #0d0d0d;\n    backdrop-filter: blur(12px);\n    border-radius: 8px;\n    border: 1px solid rgba(255, 255, 255, 0.2);\n    padding: 8px 0;\n    min-width: 160px;\n    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.5);\n    z-index: 1000;\n    display: none;\n    margin-top: 8px;\n}\n\n.dropdown-item {\n    display: flex;\n    align-items: center;\n    gap: 8px;\n    padding: 10px 16px;\n    color: rgba(255, 255, 255, 0.8);\n    text-decoration: none;\n    font-size: 0.9rem;\n    transition: all 0.3s ease;\n}\n\n.dropdown-item:hover {\n    background: rgba(255, 255, 255, 0.1);\n    color: white;\n}\n\n.dropdown-divider {\n    height: 1px;\n    background: rgba(255, 255, 255, 0.1);\n    margin: 4px 0;\n}\n\n/* Main Container */\n.users-container {\n    max-width: 1200px;\n    margin: 0 auto;\n    padding: 2rem 20px;\n    min-height: 100vh;\n}\n\n/* Page Header */\n.page-header {\n    text-align: center;\n    margin-bottom: 3rem;\n}\n\n.page-header h1 {\n    font-size: 3rem;\n    font-weight: 700;\n    color: white;\n    margin-bottom: 1rem;\n}\n\n.page-header h1 i {\n    color: #ffd700;\n    margin-right: 1rem;\n}\n\n.page-header p {\n    font-size: 1.2rem;\n    color: rgba(255, 255, 255, 0.7);\n    max-width: 600px;\n    margin: 0 auto;\n}\n\n/* Search Section */\n.search-section {\n    background: rgba(255, 255, 255, 0.05);\n    backdrop-filter: blur(12px);\n    border-radius: 20px;\n    padding: 2rem;\n    margin-bottom: 2rem;\n    border: 1px solid rgba(255, 255, 255, 0.1);\n}\n\n.search-bar {\n    display: flex;\n    gap: 1rem;\n    align-items: center;\n    margin-bottom: 1rem;\n}\n\n.search-input-container {\n    flex: 1;\n    position: relative;\n    display: flex;\n    align-items: center;\n}\n\n.search-input-container i {\n    position: absolute;\n    left: 16px;\n    color: rgba(255, 255, 255, 0.5);\n    font-size: 1.1rem;\n}\n\n#search-input {\n    width: 100%;\n    background: rgba(255, 255, 255, 0.1);\n    border: 1px solid rgba(255, 255, 255, 0.2);\n    border-radius: 25px;\n    padding: 16px 50px 16px 50px;\n    color: white;\n    font-size: 1rem;\n    transition: all 0.3s ease;\n}\n\n#search-input::placeholder {\n    color: rgba(255, 255, 255, 0.5);\n}\n\n#search-input:focus {\n    outline: none;\n    border-color: #ffd700;\n    background: rgba(255, 255, 255, 0.15);\n    box-shadow: 0 0 0 3px rgba(255, 215, 0, 0.1);\n}\n\n.clear-search {\n    position: absolute;\n    right: 16px;\n    background: none;\n    border: none;\n    color: rgba(255, 255, 255, 0.5);\n    cursor: pointer;\n    padding: 4px;\n    border-radius: 50%;\n    transition: all 0.3s ease;\n    display: none;\n}\n\n.clear-search:hover {\n    background: rgba(255, 255, 255, 0.1);\n    color: white;\n}\n\n.clear-search.visible {\n    display: block;\n}\n\n.search-btn {\n    background: linear-gradient(135deg, #ffd700, #ffed4e);\n    color: #1a1a2e;\n    border: none;\n    border-radius: 25px;\n    padding: 16px 24px;\n    font-weight: 600;\n    cursor: pointer;\n    transition: all 0.3s ease;\n    white-space: nowrap;\n}\n\n.search-btn:hover {\n    transform: translateY(-2px);\n    box-shadow: 0 6px 20px rgba(255, 215, 0, 0.3);\n}\n\n.search-stats {\n    text-align: center;\n    color: rgba(255, 255, 255, 0.7);\n    font-size: 1rem;\n}\n\n.search-stats span {\n    color: #ffd700;\n    font-weight: 600;\n}\n\n/* Users Grid */\n.users-grid {\n    display: grid;\n    grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));\n    gap: 1.5rem;\n    margin-bottom: 2rem;\n}\n\n.user-card {\n    background: rgba(255, 255, 255, 0.05);\n    backdrop-filter: blur(12px);\n    border-radius: 20px;\n    padding: 2rem;\n    border: 1px solid rgba(255, 255, 255, 0.1);\n    transition: all 0.3s ease;\n    cursor: pointer;\n    position: relative;\n    overflow: hidden;\n}\n\n.user-card:hover {\n    background: rgba(255, 255, 255, 0.08);\n    transform: translateY(-5px);\n    box-shadow: 0 12px 40px rgba(0, 0, 0, 0.3);\n}\n\n.user-card::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    height: 4px;\n    background: linear-gradient(135deg, #ffd700, #ffed4e);\n    opacity: 0;\n    transition: opacity 0.3s ease;\n}\n\n.user-card:hover::before {\n    opacity: 1;\n}\n\n.user-header {\n    display: flex;\n    align-items: center;\n    gap: 1rem;\n    margin-bottom: 1.5rem;\n}\n\n.user-avatar {\n    flex-shrink: 0;\n}\n\n.user-avatar i {\n    font-size: 3.5rem;\n    color: #ffd700;\n    background: rgba(255, 215, 0, 0.1);\n    border-radius: 50%;\n    padding: 0.8rem;\n}\n\n.user-info h3 {\n    color: white;\n    font-size: 1.3rem;\n    font-weight: 600;\n    margin-bottom: 0.25rem;\n}\n\n.user-info .username {\n    color: #ffd700;\n    font-size: 0.9rem;\n    margin-bottom: 0.5rem;\n}\n\n.user-info .college {\n    color: rgba(255, 255, 255, 0.7);\n    font-size: 0.9rem;\n}\n\n.user-stats {\n    display: flex;\n    justify-content: space-around;\n    margin-bottom: 1.5rem;\n    padding: 1rem 0;\n    border-top: 1px solid rgba(255, 255, 255, 0.1);\n    border-bottom: 1px solid rgba(255, 255, 255, 0.1);\n}\n\n.user-stat {\n    text-align: center;\n}\n\n.user-stat .stat-number {\n    display: block;\n    font-size: 1.4rem;\n    font-weight: bold;\n    color: #ffd700;\n    margin-bottom: 0.25rem;\n}\n\n.user-stat .stat-label {\n    font-size: 0.8rem;\n    color: rgba(255, 255, 255, 0.6);\n    text-transform: uppercase;\n    letter-spacing: 0.5px;\n}\n\n.user-actions {\n    display: flex;\n    gap: 0.75rem;\n}\n\n.action-btn {\n    flex: 1;\n    background: linear-gradient(135deg, #ffd700, #ffed4e);\n    color: #1a1a2e;\n    border: none;\n    border-radius: 20px;\n    padding: 8px 16px;\n    font-weight: 600;\n    cursor: pointer;\n    transition: all 0.3s ease;\n    font-size: 0.9rem;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    gap: 6px;\n}\n\n.action-btn:hover {\n    transform: translateY(-1px);\n    box-shadow: 0 4px 12px rgba(255, 215, 0, 0.3);\n}\n\n.action-btn.secondary {\n    background: rgba(255, 255, 255, 0.1);\n    color: rgba(255, 255, 255, 0.8);\n    border: 1px solid rgba(255, 255, 255, 0.2);\n}\n\n.action-btn.secondary:hover {\n    background: rgba(255, 255, 255, 0.15);\n    color: white;\n    box-shadow: 0 4px 12px rgba(255, 255, 255, 0.1);\n}\n\n.action-btn.login-required {\n    background: rgba(255, 152, 0, 0.2);\n    color: #ff9800;\n    border: 1px solid #ff9800;\n    cursor: not-allowed;\n}\n\n/* Loading State */\n.loading-container {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    min-height: 60vh;\n}\n\n.loading-spinner {\n    text-align: center;\n    color: rgba(255, 255, 255, 0.7);\n}\n\n.loading-spinner i {\n    font-size: 3rem;\n    color: #ffd700;\n    margin-bottom: 1rem;\n}\n\n.loading-spinner p {\n    font-size: 1.1rem;\n}\n\n/* Empty State */\n.empty-container {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    min-height: 60vh;\n}\n\n.empty-state {\n    text-align: center;\n    background: rgba(255, 255, 255, 0.05);\n    backdrop-filter: blur(12px);\n    border-radius: 20px;\n    padding: 3rem;\n    border: 1px solid rgba(255, 255, 255, 0.1);\n}\n\n.empty-state i {\n    font-size: 4rem;\n    color: rgba(255, 255, 255, 0.3);\n    margin-bottom: 1rem;\n}\n\n.empty-state h3 {\n    color: white;\n    font-size: 1.5rem;\n    margin-bottom: 0.5rem;\n}\n\n.empty-state p {\n    color: rgba(255, 255, 255, 0.7);\n    font-size: 1rem;\n}\n\n/* Pagination */\n.pagination {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    gap: 1rem;\n    margin-top: 2rem;\n}\n\n.page-btn {\n    background: rgba(255, 255, 255, 0.1);\n    color: rgba(255, 255, 255, 0.8);\n    border: 1px solid rgba(255, 255, 255, 0.2);\n    border-radius: 8px;\n    padding: 10px 16px;\n    cursor: pointer;\n    transition: all 0.3s ease;\n    font-weight: 500;\n}\n\n.page-btn:hover:not(:disabled) {\n    background: rgba(255, 255, 255, 0.15);\n    color: white;\n    border-color: #ffd700;\n}\n\n.page-btn:disabled {\n    opacity: 0.5;\n    cursor: not-allowed;\n}\n\n.page-info {\n    color: rgba(255, 255, 255, 0.8);\n    font-weight: 500;\n    padding: 0 1rem;\n}\n\n/* Guest Notice */\n.guest-notice {\n    position: fixed;\n    bottom: 20px;\n    left: 50%;\n    transform: translateX(-50%);\n    z-index: 1000;\n    animation: slideUpFromBottom 0.3s ease-out;\n}\n\n.notice-content {\n    background: linear-gradient(135deg, rgba(255, 215, 0, 0.15), rgba(255, 215, 0, 0.1));\n    backdrop-filter: blur(12px);\n    border: 1px solid rgba(255, 215, 0, 0.3);\n    border-radius: 12px;\n    padding: 16px 24px;\n    color: white;\n    display: flex;\n    align-items: center;\n    gap: 12px;\n    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);\n}\n\n.notice-content i {\n    color: #ffd700;\n    font-size: 1.2rem;\n    flex-shrink: 0;\n}\n\n.notice-content a {\n    color: #ffd700;\n    text-decoration: none;\n    font-weight: 600;\n}\n\n.notice-content a:hover {\n    text-decoration: underline;\n}\n\n@keyframes slideUpFromBottom {\n    from {\n        transform: translateX(-50%) translateY(100%);\n        opacity: 0;\n    }\n    to {\n        transform: translateX(-50%) translateY(0);\n        opacity: 1;\n    }\n}\n\n/* Message Container */\n.message-container {\n    position: fixed;\n    top: 20px;\n    right: 20px;\n    z-index: 1100;\n    display: flex;\n    flex-direction: column;\n    gap: 10px;\n}\n\n.message {\n    background: #1a1a2e;\n    backdrop-filter: blur(12px);\n    border-radius: 8px;\n    padding: 12px 20px;\n    color: white;\n    font-weight: 500;\n    border-left: 4px solid;\n    animation: slideInFromRight 0.3s ease-out;\n    max-width: 300px;\n    border: 1px solid rgba(255, 255, 255, 0.1);\n}\n\n.message.success {\n    border-left-color: #4caf50;\n    background: rgba(76, 175, 80, 0.1);\n}\n\n.message.error {\n    border-left-color: #f44336;\n    background: rgba(244, 67, 54, 0.1);\n}\n\n.message.info {\n    border-left-color: #2196f3;\n    background: rgba(33, 150, 243, 0.1);\n}\n\n@keyframes slideInFromRight {\n    from {\n        transform: translateX(100%);\n        opacity: 0;\n    }\n    to {\n        transform: translateX(0);\n        opacity: 1;\n    }\n}\n\n/* Responsive Design */\n@media (max-width: 768px) {\n    .users-container {\n        padding: 1rem 15px;\n    }\n    \n    .page-header h1 {\n        font-size: 2.5rem;\n    }\n    \n    .search-bar {\n        flex-direction: column;\n        gap: 1rem;\n    }\n    \n    .search-btn {\n        width: 100%;\n    }\n    \n    .users-grid {\n        grid-template-columns: 1fr;\n        gap: 1rem;\n    }\n    \n    .user-card {\n        padding: 1.5rem;\n    }\n    \n    .user-actions {\n        flex-direction: column;\n    }\n    \n    .pagination {\n        flex-direction: column;\n        gap: 0.5rem;\n    }\n    \n    .guest-notice {\n        left: 10px;\n        right: 10px;\n        transform: none;\n    }\n}\n\n@media (max-width: 480px) {\n    .user-header {\n        flex-direction: column;\n        text-align: center;\n        gap: 1rem;\n    }\n    \n    .user-stats {\n        justify-content: space-around;\n    }\n}","size_bytes":12244},"static/js/user-profile.js":{"content":"// User Profile JavaScript functionality\n\nlet currentUser = null;\nlet profileUser = null;\nlet currentUserId = null;\n\ndocument.addEventListener('DOMContentLoaded', function() {\n    // Check authentication\n    checkAuthStatus();\n    \n    // Get user ID from URL parameters\n    const urlParams = new URLSearchParams(window.location.search);\n    const userId = urlParams.get('id');\n    \n    if (!userId) {\n        showError('No user ID provided');\n        return;\n    }\n    \n    currentUserId = parseInt(userId);\n    \n    // Load user profile\n    loadUserProfile(currentUserId);\n    \n    // Setup tab switching\n    setupTabs();\n});\n\nasync function checkAuthStatus() {\n    try {\n        const response = await fetch('/api/auth/status');\n        if (response.ok) {\n            const data = await response.json();\n            if (data.authenticated) {\n                currentUser = data.user;\n                updateNavbarForLoggedInUser(data.user);\n            }\n        }\n    } catch (error) {\n        console.log('User not authenticated');\n    }\n}\n\nfunction updateNavbarForLoggedInUser(user) {\n    const navAuth = document.getElementById('nav-auth');\n    if (navAuth) {\n        navAuth.innerHTML = `\n            <div class=\"user-dropdown\">\n                <button class=\"user-profile-btn\" id=\"user-profile-btn\">\n                    <i class=\"fas fa-user-circle\"></i>\n                    <span>Welcome, ${user.username}!</span>\n                    <i class=\"fas fa-chevron-down\"></i>\n                </button>\n                <div class=\"dropdown-menu\" id=\"dropdown-menu\">\n                    <a href=\"profile.html\" class=\"dropdown-item\">\n                        <i class=\"fas fa-user\"></i> View Profile\n                    </a>\n                    <div class=\"dropdown-divider\"></div>\n                    <a href=\"#\" class=\"dropdown-item\" onclick=\"handleLogout()\">\n                        <i class=\"fas fa-sign-out-alt\"></i> Logout\n                    </a>\n                </div>\n            </div>\n        `;\n        \n        // Setup dropdown functionality\n        setupUserDropdown();\n    }\n    \n    // Hide auth-only elements for guests\n    const authOnlyElements = document.querySelectorAll('.auth-only');\n    authOnlyElements.forEach(element => {\n        element.style.display = 'block';\n    });\n}\n\nfunction setupUserDropdown() {\n    const profileBtn = document.getElementById('user-profile-btn');\n    const dropdownMenu = document.getElementById('dropdown-menu');\n    \n    if (profileBtn && dropdownMenu) {\n        profileBtn.addEventListener('click', function(e) {\n            e.stopPropagation();\n            dropdownMenu.classList.toggle('active');\n            profileBtn.classList.toggle('active');\n        });\n        \n        // Close dropdown when clicking outside\n        document.addEventListener('click', function() {\n            dropdownMenu.classList.remove('active');\n            profileBtn.classList.remove('active');\n        });\n        \n        // Prevent dropdown from closing when clicking inside\n        dropdownMenu.addEventListener('click', function(e) {\n            e.stopPropagation();\n        });\n    }\n}\n\nasync function loadUserProfile(userId) {\n    try {\n        const response = await fetch(`/api/users/${userId}`);\n        const data = await response.json();\n        \n        if (response.ok) {\n            profileUser = data.user;\n            displayUserProfile(data);\n            hideLoading();\n            showProfileContent();\n        } else {\n            showError(data.error || 'Failed to load user profile');\n        }\n    } catch (error) {\n        console.error('Error loading user profile:', error);\n        showError('Network error. Please try again.');\n    }\n}\n\nfunction displayUserProfile(data) {\n    const { user, projects, stats, following_status, can_interact } = data;\n    \n    // Update profile header\n    document.getElementById('user-name').textContent = user.full_name;\n    document.getElementById('user-college').textContent = user.college;\n    document.getElementById('user-username').textContent = `@${user.username}`;\n    \n    // Update stats\n    document.getElementById('followers-count').textContent = stats.followers_count;\n    document.getElementById('following-count').textContent = stats.following_count;\n    document.getElementById('projects-count').textContent = stats.projects_count;\n    document.getElementById('posts-count').textContent = stats.posts_count;\n    \n    // Update about section\n    document.getElementById('about-college').textContent = user.college;\n    document.getElementById('total-funding').textContent = `$${stats.total_funding_received.toFixed(2)}`;\n    document.getElementById('member-since').textContent = formatDate(user.created_at);\n    \n    // Display projects\n    displayUserProjects(projects);\n    \n    // Setup action buttons\n    setupActionButtons(following_status, can_interact, user);\n}\n\nfunction displayUserProjects(projects) {\n    const container = document.getElementById('user-projects');\n    \n    if (projects.length === 0) {\n        container.innerHTML = `\n            <div class=\"empty-state\">\n                <i class=\"fas fa-folder-open\"></i>\n                <h3>No projects yet</h3>\n                <p>This user hasn't created any projects yet.</p>\n            </div>\n        `;\n        return;\n    }\n    \n    container.innerHTML = projects.map(project => `\n        <div class=\"project-card\" onclick=\"viewProject(${project.id})\">\n            <div class=\"project-header\">\n                <span class=\"project-category\">${project.category}</span>\n                <span class=\"project-status ${project.status}\">${project.status}</span>\n            </div>\n            <h3 class=\"project-title\">${escapeHtml(project.title)}</h3>\n            <p class=\"project-description\">${escapeHtml(project.description.substring(0, 150))}${project.description.length > 150 ? '...' : ''}</p>\n            <div class=\"project-stats\">\n                <div class=\"project-stat\">\n                    <i class=\"fas fa-thumbs-up\"></i>\n                    <span>${project.vote_count}</span>\n                </div>\n                <div class=\"project-stat\">\n                    <i class=\"fas fa-dollar-sign\"></i>\n                    <span>$${project.current_funding.toFixed(2)}</span>\n                </div>\n                <div class=\"project-stat\">\n                    <i class=\"fas fa-users\"></i>\n                    <span>${project.collaboration_count}</span>\n                </div>\n                <div class=\"project-stat\">\n                    <i class=\"fas fa-comments\"></i>\n                    <span>${project.comment_count}</span>\n                </div>\n            </div>\n        </div>\n    `).join('');\n}\n\nfunction setupActionButtons(followingStatus, canInteract, user) {\n    const container = document.getElementById('profile-actions');\n    \n    if (!canInteract) {\n        // Show login prompt or own profile message\n        if (!currentUser) {\n            container.innerHTML = `\n                <p style=\"color: rgba(255, 255, 255, 0.7); text-align: center; margin: 0;\">\n                    <a href=\"login.html\" style=\"color: #ffd700;\">Login</a> to connect with this user\n                </p>\n            `;\n        } else if (currentUser.id === currentUserId) {\n            container.innerHTML = `\n                <a href=\"profile.html\" class=\"action-btn\">\n                    <i class=\"fas fa-edit\"></i> Edit Profile\n                </a>\n            `;\n        }\n        return;\n    }\n    \n    let followButton = '';\n    if (followingStatus === 'following') {\n        followButton = `\n            <button class=\"action-btn following\" disabled>\n                <i class=\"fas fa-check\"></i> Following\n            </button>\n        `;\n    } else if (followingStatus === 'pending') {\n        followButton = `\n            <button class=\"action-btn pending\" disabled>\n                <i class=\"fas fa-clock\"></i> Request Sent\n            </button>\n        `;\n    } else {\n        followButton = `\n            <button class=\"action-btn\" onclick=\"openFollowModal('${user.full_name}')\">\n                <i class=\"fas fa-user-plus\"></i> Follow\n            </button>\n        `;\n    }\n    \n    container.innerHTML = `\n        ${followButton}\n        <button class=\"action-btn secondary\" onclick=\"openCollaborationModal()\">\n            <i class=\"fas fa-handshake\"></i> Collaborate\n        </button>\n    `;\n}\n\nfunction setupTabs() {\n    const tabBtns = document.querySelectorAll('.tab-btn');\n    const tabPanes = document.querySelectorAll('.tab-pane');\n    \n    tabBtns.forEach(btn => {\n        btn.addEventListener('click', function() {\n            const targetTab = this.getAttribute('data-tab');\n            \n            // Remove active class from all tabs and panes\n            tabBtns.forEach(b => b.classList.remove('active'));\n            tabPanes.forEach(p => p.classList.remove('active'));\n            \n            // Add active class to clicked tab and corresponding pane\n            this.classList.add('active');\n            document.getElementById(`${targetTab}-tab`).classList.add('active');\n        });\n    });\n}\n\n// Modal functions\nfunction openFollowModal(userName) {\n    document.getElementById('follow-user-name').textContent = userName;\n    document.getElementById('follow-modal').classList.add('show');\n}\n\nfunction closeFollowModal() {\n    document.getElementById('follow-modal').classList.remove('show');\n}\n\nfunction openCollaborationModal() {\n    loadUserProjects().then(() => {\n        document.getElementById('collaboration-modal').classList.add('show');\n    });\n}\n\nfunction closeCollaborationModal() {\n    document.getElementById('collaboration-modal').classList.remove('show');\n}\n\nasync function loadUserProjects() {\n    if (!currentUser) return;\n    \n    try {\n        const response = await fetch('/api/dashboard/stats');\n        if (response.ok) {\n            const data = await response.json();\n            const projectSelect = document.getElementById('project-select');\n            \n            projectSelect.innerHTML = '<option value=\"\">Choose a project...</option>';\n            \n            data.projects.forEach(project => {\n                if (project.status === 'active') {\n                    projectSelect.innerHTML += `\n                        <option value=\"${project.id}\">${escapeHtml(project.title)}</option>\n                    `;\n                }\n            });\n        }\n    } catch (error) {\n        console.error('Error loading user projects:', error);\n    }\n}\n\nasync function sendFollowRequest() {\n    if (!currentUser) {\n        showMessage('Please login to send follow requests', 'error');\n        return;\n    }\n    \n    try {\n        const response = await fetch('/api/follow-requests', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                user_id: currentUserId\n            })\n        });\n        \n        const data = await response.json();\n        \n        if (response.ok) {\n            showMessage('Follow request sent successfully!', 'success');\n            closeFollowModal();\n            // Reload profile to update button state\n            setTimeout(() => {\n                loadUserProfile(currentUserId);\n            }, 1000);\n        } else {\n            showMessage(data.error || 'Failed to send follow request', 'error');\n        }\n    } catch (error) {\n        console.error('Error sending follow request:', error);\n        showMessage('Network error. Please try again.', 'error');\n    }\n}\n\nasync function sendCollaborationRequest() {\n    if (!currentUser) {\n        showMessage('Please login to send collaboration requests', 'error');\n        return;\n    }\n    \n    const projectId = document.getElementById('project-select').value;\n    const message = document.getElementById('collaboration-message').value;\n    \n    if (!projectId) {\n        showMessage('Please select a project', 'error');\n        return;\n    }\n    \n    try {\n        const response = await fetch('/api/collaboration-requests', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                project_id: parseInt(projectId),\n                message: message\n            })\n        });\n        \n        const data = await response.json();\n        \n        if (response.ok) {\n            showMessage('Collaboration request sent successfully!', 'success');\n            closeCollaborationModal();\n            // Reset form\n            document.getElementById('project-select').value = '';\n            document.getElementById('collaboration-message').value = '';\n        } else {\n            showMessage(data.error || 'Failed to send collaboration request', 'error');\n        }\n    } catch (error) {\n        console.error('Error sending collaboration request:', error);\n        showMessage('Network error. Please try again.', 'error');\n    }\n}\n\n// Helper functions\nfunction viewProject(projectId) {\n    window.location.href = `browse.html?project=${projectId}`;\n}\n\nfunction hideLoading() {\n    document.getElementById('loading-container').style.display = 'none';\n}\n\nfunction showProfileContent() {\n    document.getElementById('profile-content').style.display = 'block';\n}\n\nfunction showError(message) {\n    hideLoading();\n    document.getElementById('error-container').style.display = 'block';\n    showMessage(message, 'error');\n}\n\nasync function handleLogout() {\n    try {\n        const response = await fetch('/api/logout', {\n            method: 'POST'\n        });\n        \n        if (response.ok) {\n            showMessage('Logged out successfully', 'success');\n            setTimeout(() => {\n                window.location.reload();\n            }, 1000);\n        }\n    } catch (error) {\n        console.error('Logout error:', error);\n        showMessage('Error logging out', 'error');\n    }\n}\n\n// Utility functions\nfunction formatDate(dateString) {\n    const date = new Date(dateString);\n    return date.toLocaleDateString('en-US', {\n        year: 'numeric',\n        month: 'long'\n    });\n}\n\nfunction escapeHtml(text) {\n    const div = document.createElement('div');\n    div.textContent = text;\n    return div.innerHTML;\n}\n\nfunction showMessage(message, type = 'info') {\n    const container = document.getElementById('message-container') || createMessageContainer();\n    \n    const messageDiv = document.createElement('div');\n    messageDiv.className = `message ${type}`;\n    messageDiv.textContent = message;\n    \n    container.appendChild(messageDiv);\n    \n    // Remove message after 3 seconds\n    setTimeout(() => {\n        if (messageDiv.parentNode) {\n            messageDiv.parentNode.removeChild(messageDiv);\n        }\n    }, 3000);\n}\n\nfunction createMessageContainer() {\n    const container = document.createElement('div');\n    container.id = 'message-container';\n    container.className = 'message-container';\n    document.body.appendChild(container);\n    return container;\n}","size_bytes":15033},"static/js/users.js":{"content":"// Users Discovery JavaScript functionality\n\nlet currentUser = null;\nlet currentPage = 1;\nlet currentSearch = '';\nlet isLoading = false;\nlet hasNextPage = false;\nlet totalUsers = 0;\n\ndocument.addEventListener('DOMContentLoaded', function() {\n    // Check authentication\n    checkAuthStatus();\n    \n    // Load initial users\n    loadUsers();\n    \n    // Setup search functionality\n    setupSearch();\n    \n    // Setup enter key for search\n    document.getElementById('search-input').addEventListener('keypress', function(e) {\n        if (e.key === 'Enter') {\n            performSearch();\n        }\n    });\n    \n    // Setup search input changes\n    document.getElementById('search-input').addEventListener('input', function() {\n        const searchInput = this;\n        const clearBtn = document.getElementById('clear-search');\n        \n        if (searchInput.value.trim()) {\n            clearBtn.classList.add('visible');\n        } else {\n            clearBtn.classList.remove('visible');\n        }\n    });\n});\n\nasync function checkAuthStatus() {\n    try {\n        const response = await fetch('/api/auth/status');\n        if (response.ok) {\n            const data = await response.json();\n            if (data.authenticated) {\n                currentUser = data.user;\n                updateNavbarForLoggedInUser(data.user);\n            } else {\n                showGuestNotice();\n            }\n        } else {\n            showGuestNotice();\n        }\n    } catch (error) {\n        console.log('User not authenticated');\n        showGuestNotice();\n    }\n}\n\nfunction updateNavbarForLoggedInUser(user) {\n    const navAuth = document.getElementById('nav-auth');\n    if (navAuth) {\n        navAuth.innerHTML = `\n            <div class=\"user-profile\">\n                <button class=\"profile-btn\" id=\"user-profile-btn\">\n                    <i class=\"fas fa-user-circle\"></i>\n                    <span id=\"user-greeting\">${user.username}</span>\n                    <i class=\"fas fa-chevron-down\"></i>\n                </button>\n                <div class=\"dropdown-menu\" id=\"dropdown-menu\">\n                    <a href=\"/dashboard.html\" class=\"dropdown-item\">\n                        <i class=\"fas fa-tachometer-alt\"></i>\n                        Dashboard\n                    </a>\n                    <a href=\"/profile.html\" class=\"dropdown-item\">\n                        <i class=\"fas fa-user\"></i>\n                        View Profile\n                    </a>\n                    <div class=\"dropdown-divider\"></div>\n                    <a href=\"#\" class=\"dropdown-item\" id=\"logout-btn\">\n                        <i class=\"fas fa-sign-out-alt\"></i>\n                        Logout\n                    </a>\n                </div>\n            </div>\n        `;\n        \n        // Setup dropdown functionality\n        setupUserDropdown();\n    }\n}\n\nfunction setupUserDropdown() {\n    const profileBtn = document.getElementById('user-profile-btn');\n    const dropdownMenu = document.getElementById('dropdown-menu');\n    const logoutBtn = document.getElementById('logout-btn');\n    \n    if (profileBtn && dropdownMenu) {\n        profileBtn.addEventListener('click', function(e) {\n            e.stopPropagation();\n            dropdownMenu.style.display = dropdownMenu.style.display === 'block' ? 'none' : 'block';\n        });\n        \n        // Close dropdown when clicking outside\n        document.addEventListener('click', function() {\n            if (dropdownMenu) {\n                dropdownMenu.style.display = 'none';\n            }\n        });\n        \n        // Prevent dropdown from closing when clicking inside\n        dropdownMenu.addEventListener('click', function(e) {\n            e.stopPropagation();\n        });\n    }\n    \n    if (logoutBtn) {\n        logoutBtn.addEventListener('click', function(e) {\n            e.preventDefault();\n            handleLogout();\n        });\n    }\n}\n\nfunction showGuestNotice() {\n    document.getElementById('guest-notice').style.display = 'block';\n}\n\nfunction setupSearch() {\n    // Setup search functionality is already handled in DOMContentLoaded\n}\n\nasync function loadUsers(page = 1, search = '') {\n    if (isLoading) return;\n    \n    isLoading = true;\n    showLoading();\n    \n    try {\n        const params = new URLSearchParams({\n            page: page.toString(),\n            per_page: '20'\n        });\n        \n        if (search.trim()) {\n            params.append('search', search.trim());\n        }\n        \n        const response = await fetch(`/api/users?${params}`);\n        const data = await response.json();\n        \n        if (response.ok) {\n            // Filter out current user from the list if authenticated\n            let filteredUsers = data.users;\n            if (currentUser) {\n                filteredUsers = data.users.filter(user => user.id !== currentUser.id);\n            }\n            displayUsers(filteredUsers);\n            totalUsers = data.total;\n            hasNextPage = data.has_next;\n            \n            updateSearchStats();\n            updatePagination(page, data.has_prev, data.has_next);\n            \n            if (data.users.length === 0) {\n                showEmptyState();\n            } else {\n                hideEmptyState();\n            }\n        } else {\n            showMessage(data.error || 'Failed to load users', 'error');\n            showEmptyState();\n        }\n    } catch (error) {\n        console.error('Error loading users:', error);\n        showMessage('Network error. Please try again.', 'error');\n        showEmptyState();\n    } finally {\n        isLoading = false;\n        hideLoading();\n    }\n}\n\nfunction displayUsers(users) {\n    const container = document.getElementById('users-grid');\n    \n    container.innerHTML = users.map(user => {\n        const canInteract = currentUser && currentUser.id !== user.id;\n        const isOwnProfile = currentUser && currentUser.id === user.id;\n        \n        let actionButtons = '';\n        \n        if (isOwnProfile) {\n            actionButtons = `\n                <div class=\"user-actions\">\n                    <a href=\"profile.html\" class=\"action-btn\">\n                        <i class=\"fas fa-edit\"></i> Edit Profile\n                    </a>\n                </div>\n            `;\n        } else if (canInteract) {\n            actionButtons = `\n                <div class=\"user-actions\">\n                    <button class=\"action-btn\" onclick=\"followUser(${user.id})\">\n                        <i class=\"fas fa-user-plus\"></i> Follow\n                    </button>\n                    <button class=\"action-btn secondary\" onclick=\"viewProfile(${user.id})\">\n                        <i class=\"fas fa-eye\"></i> View\n                    </button>\n                </div>\n            `;\n        } else if (!currentUser) {\n            actionButtons = `\n                <div class=\"user-actions\">\n                    <button class=\"action-btn login-required\" onclick=\"promptLogin()\">\n                        <i class=\"fas fa-sign-in-alt\"></i> Login to Connect\n                    </button>\n                </div>\n            `;\n        }\n        \n        return `\n            <div class=\"user-card\" onclick=\"viewProfile(${user.id})\">\n                <div class=\"user-header\">\n                    <div class=\"user-avatar\">\n                        <i class=\"fas fa-user-circle\"></i>\n                    </div>\n                    <div class=\"user-info\">\n                        <h3>${escapeHtml(user.full_name)}</h3>\n                        <p class=\"username\">@${escapeHtml(user.username)}</p>\n                        <p class=\"college\">${escapeHtml(user.college)}</p>\n                    </div>\n                </div>\n                <div class=\"user-stats\">\n                    <div class=\"user-stat\">\n                        <span class=\"stat-number\">0</span>\n                        <span class=\"stat-label\">Followers</span>\n                    </div>\n                    <div class=\"user-stat\">\n                        <span class=\"stat-number\">0</span>\n                        <span class=\"stat-label\">Projects</span>\n                    </div>\n                    <div class=\"user-stat\">\n                        <span class=\"stat-number\">0</span>\n                        <span class=\"stat-label\">Posts</span>\n                    </div>\n                </div>\n                ${actionButtons}\n            </div>\n        `;\n    }).join('');\n}\n\nfunction performSearch() {\n    const searchInput = document.getElementById('search-input');\n    const searchTerm = searchInput.value.trim();\n    \n    currentSearch = searchTerm;\n    currentPage = 1;\n    \n    loadUsers(currentPage, currentSearch);\n}\n\nfunction clearSearch() {\n    const searchInput = document.getElementById('search-input');\n    const clearBtn = document.getElementById('clear-search');\n    \n    searchInput.value = '';\n    clearBtn.classList.remove('visible');\n    \n    currentSearch = '';\n    currentPage = 1;\n    \n    loadUsers(currentPage, currentSearch);\n}\n\nfunction updateSearchStats() {\n    document.getElementById('total-users').textContent = totalUsers;\n}\n\nfunction updatePagination(page, hasPrev, hasNext) {\n    const pagination = document.getElementById('pagination');\n    const prevBtn = document.getElementById('prev-btn');\n    const nextBtn = document.getElementById('next-btn');\n    const pageInfo = document.getElementById('page-info');\n    \n    if (totalUsers > 20) {\n        pagination.style.display = 'flex';\n        \n        prevBtn.disabled = !hasPrev;\n        nextBtn.disabled = !hasNext;\n        pageInfo.textContent = `Page ${page}`;\n        \n        currentPage = page;\n        hasNextPage = hasNext;\n    } else {\n        pagination.style.display = 'none';\n    }\n}\n\nfunction loadPreviousPage() {\n    if (currentPage > 1 && !isLoading) {\n        loadUsers(currentPage - 1, currentSearch);\n    }\n}\n\nfunction loadNextPage() {\n    if (hasNextPage && !isLoading) {\n        loadUsers(currentPage + 1, currentSearch);\n    }\n}\n\nfunction viewProfile(userId) {\n    // User profile page has been removed - redirect to profile page for now\n    window.location.href = `profile.html`;\n}\n\nasync function followUser(userId) {\n    if (!currentUser) {\n        promptLogin();\n        return;\n    }\n    \n    try {\n        const response = await fetch('/api/follow-requests', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                user_id: userId\n            })\n        });\n        \n        const data = await response.json();\n        \n        if (response.ok) {\n            showMessage('Follow request sent successfully!', 'success');\n            // You could update the button state here\n        } else {\n            showMessage(data.error || 'Failed to send follow request', 'error');\n        }\n    } catch (error) {\n        console.error('Error sending follow request:', error);\n        showMessage('Network error. Please try again.', 'error');\n    }\n}\n\nfunction promptLogin() {\n    showMessage('Please login to connect with users', 'info');\n    setTimeout(() => {\n        window.location.href = 'login.html';\n    }, 2000);\n}\n\nfunction showLoading() {\n    document.getElementById('loading-container').style.display = 'flex';\n    document.getElementById('users-grid').style.display = 'none';\n}\n\nfunction hideLoading() {\n    document.getElementById('loading-container').style.display = 'none';\n    document.getElementById('users-grid').style.display = 'grid';\n}\n\nfunction showEmptyState() {\n    document.getElementById('empty-container').style.display = 'flex';\n    document.getElementById('users-grid').style.display = 'none';\n    document.getElementById('pagination').style.display = 'none';\n}\n\nfunction hideEmptyState() {\n    document.getElementById('empty-container').style.display = 'none';\n    document.getElementById('users-grid').style.display = 'grid';\n}\n\nasync function handleLogout() {\n    try {\n        const response = await fetch('/api/logout', {\n            method: 'POST'\n        });\n        \n        if (response.ok) {\n            showMessage('Logged out successfully', 'success');\n            setTimeout(() => {\n                window.location.reload();\n            }, 1000);\n        }\n    } catch (error) {\n        console.error('Logout error:', error);\n        showMessage('Error logging out', 'error');\n    }\n}\n\n// Utility functions\nfunction escapeHtml(text) {\n    const div = document.createElement('div');\n    div.textContent = text;\n    return div.innerHTML;\n}\n\nfunction showMessage(message, type = 'info') {\n    // Disabled popup messages as requested by user\n    return;\n}\n\nfunction createMessageContainer() {\n    const container = document.createElement('div');\n    container.id = 'message-container';\n    container.className = 'message-container';\n    document.body.appendChild(container);\n    return container;\n}","size_bytes":12867},"attached_assets/content-1754670158981.md":{"content":"## Welcome Back\n\nSign in to your CollabFund account\n\nRemember me\n\nSign In\n\nDon't have an account? [Create one](https://62ada178-0a72-4937-bcd7-41901f1b0f55-00-319je1ozni43o.pike.replit.dev/register.html)","size_bytes":203},"attached_assets/content-1754670181645.md":{"content":"## Welcome Back\n\nSign in to your CollabFund account\n\nRemember me\n\nSign In\n\nDon't have an account? [Create one](https://62ada178-0a72-4937-bcd7-41901f1b0f55-00-319je1ozni43o.pike.replit.dev/register.html)","size_bytes":203},"static/donate.css":{"content":"/* Donate Page Specific Styles */\nbody {\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n  background-attachment: fixed;\n  min-height: 100vh;\n  color: white;\n}\n\n/* Override navbar for donate page */\n.navbar {\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%) !important;\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1) !important;\n  backdrop-filter: blur(20px);\n  border-bottom: 1px solid rgba(255, 255, 255, 0.1);\n}\n\n.donate-container {\n  min-height: calc(100vh - 80px);\n  padding-top: 80px;\n}\n\n/* Header Section */\n.donate-header {\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n  padding: 2rem;\n  text-align: center;\n  color: white;\n  position: relative;\n}\n\n.back-btn {\n  position: absolute;\n  left: 2rem;\n  top: 50%;\n  transform: translateY(-50%);\n  background: rgba(255, 255, 255, 0.2);\n  border: none;\n  color: white;\n  padding: 0.75rem 1rem;\n  border-radius: 8px;\n  cursor: pointer;\n  font-size: 0.9rem;\n  transition: all 0.3s ease;\n  backdrop-filter: blur(10px);\n}\n\n.back-btn:hover {\n  background: rgba(255, 255, 255, 0.3);\n  transform: translateY(-50%) translateX(-2px);\n}\n\n.header-content h1 {\n  font-size: 2.2rem;\n  margin-bottom: 0.5rem;\n  font-weight: 600;\n}\n\n.header-content h1 i {\n  margin-right: 0.5rem;\n  color: #ff6b6b;\n}\n\n.header-content p {\n  font-size: 1.1rem;\n  opacity: 0.9;\n}\n\n/* Project Info Section */\n.project-info-section {\n  padding: 2rem;\n  background: rgba(255, 255, 255, 0.05);\n  backdrop-filter: blur(10px);\n}\n\n.project-info-card {\n  max-width: 800px;\n  margin: 0 auto;\n  background: rgba(255, 255, 255, 0.95);\n  backdrop-filter: blur(20px);\n  border-radius: 20px;\n  padding: 2rem;\n  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);\n  border: 1px solid rgba(255, 255, 255, 0.2);\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\n}\n\n.project-details h2 {\n  font-size: 1.8rem;\n  margin-bottom: 1rem;\n  color: #2c3e50;\n}\n\n.project-meta {\n  display: flex;\n  gap: 2rem;\n  margin-bottom: 2rem;\n  flex-wrap: wrap;\n}\n\n.project-owner,\n.project-category {\n  display: flex;\n  align-items: center;\n  color: #666;\n  font-size: 1rem;\n}\n\n.project-owner i,\n.project-category i {\n  margin-right: 0.5rem;\n  color: #667eea;\n}\n\n.funding-progress {\n  margin-top: 2rem;\n}\n\n.funding-stats {\n  display: flex;\n  justify-content: space-around;\n  margin-bottom: 1rem;\n  text-align: center;\n}\n\n.funding-stats .stat .amount,\n.funding-stats .stat .percentage {\n  display: block;\n  font-size: 1.5rem;\n  font-weight: 600;\n  color: #2c3e50;\n}\n\n.funding-stats .stat .label {\n  font-size: 0.9rem;\n  color: #666;\n  text-transform: uppercase;\n}\n\n.progress-bar {\n  width: 100%;\n  height: 12px;\n  background: #e0e0e0;\n  border-radius: 6px;\n  overflow: hidden;\n}\n\n.progress-fill {\n  height: 100%;\n  background: linear-gradient(90deg, #667eea, #764ba2);\n  border-radius: 6px;\n  transition: width 0.3s ease;\n}\n\n/* Donation Form Section */\n.donation-form-section {\n  padding: 2rem;\n  background: rgba(255, 255, 255, 0.05);\n  backdrop-filter: blur(10px);\n}\n\n.donation-form-card {\n  max-width: 800px;\n  margin: 0 auto;\n  background: rgba(255, 255, 255, 0.95);\n  backdrop-filter: blur(20px);\n  border-radius: 20px;\n  padding: 2rem;\n  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);\n  border: 1px solid rgba(255, 255, 255, 0.2);\n}\n\n.donation-form-card h3 {\n  font-size: 1.5rem;\n  margin-bottom: 2rem;\n  color: #2c3e50;\n  display: flex;\n  align-items: center;\n}\n\n.donation-form-card h3 i {\n  margin-right: 0.5rem;\n  color: #667eea;\n}\n\n.donation-form-card h4 {\n  font-size: 1.2rem;\n  margin-bottom: 1rem;\n  color: #2c3e50;\n}\n\n/* Amount Selection */\n.amount-selection {\n  margin-bottom: 2rem;\n}\n\n.amount-buttons {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));\n  gap: 1rem;\n  margin-bottom: 1.5rem;\n}\n\n.amount-btn {\n  padding: 1rem;\n  border: 2px solid #e0e0e0;\n  background: white;\n  color: #2c3e50;\n  border-radius: 8px;\n  cursor: pointer;\n  font-size: 1.1rem;\n  font-weight: 500;\n  transition: all 0.3s ease;\n}\n\n.amount-btn:hover,\n.amount-btn.active {\n  border-color: #667eea;\n  background: #667eea;\n  color: white;\n  transform: translateY(-2px);\n  box-shadow: 0 4px 8px rgba(102, 126, 234, 0.3);\n}\n\n.custom-amount label {\n  display: block;\n  margin-bottom: 0.5rem;\n  color: #2c3e50;\n  font-weight: 500;\n}\n\n.amount-input-group {\n  position: relative;\n  max-width: 200px;\n}\n\n.currency-symbol {\n  position: absolute;\n  left: 12px;\n  top: 50%;\n  transform: translateY(-50%);\n  color: #666;\n  font-weight: 500;\n}\n\n#custom-amount-input {\n  width: 100%;\n  padding: 0.75rem 0.75rem 0.75rem 2rem;\n  border: 2px solid #e0e0e0;\n  border-radius: 8px;\n  font-size: 1rem;\n  transition: border-color 0.3s ease;\n}\n\n#custom-amount-input:focus {\n  outline: none;\n  border-color: #667eea;\n}\n\n/* Message */\n.donation-message {\n  margin-bottom: 2rem;\n}\n\n.donation-message label {\n  display: block;\n  margin-bottom: 0.5rem;\n  color: #2c3e50;\n  font-weight: 500;\n}\n\n#message-input {\n  width: 100%;\n  padding: 0.75rem;\n  border: 2px solid #e0e0e0;\n  border-radius: 8px;\n  font-size: 1rem;\n  font-family: inherit;\n  resize: vertical;\n  transition: border-color 0.3s ease;\n}\n\n#message-input:focus {\n  outline: none;\n  border-color: #667eea;\n}\n\n/* Payment Methods */\n.payment-methods {\n  margin-bottom: 2rem;\n}\n\n.payment-options {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n  gap: 1rem;\n  margin-bottom: 2rem;\n}\n\n.payment-option {\n  display: flex;\n  align-items: center;\n  padding: 1.5rem;\n  border: 2px solid #e0e0e0;\n  border-radius: 12px;\n  cursor: pointer;\n  transition: all 0.3s ease;\n}\n\n.payment-option:hover,\n.payment-option.active {\n  border-color: #667eea;\n  background: rgba(102, 126, 234, 0.05);\n}\n\n.payment-icon {\n  margin-right: 1rem;\n  font-size: 1.5rem;\n  color: #667eea;\n  width: 2rem;\n  text-align: center;\n}\n\n.payment-details h5 {\n  margin: 0 0 0.25rem 0;\n  color: #2c3e50;\n  font-size: 1rem;\n}\n\n.payment-details p {\n  margin: 0;\n  color: #666;\n  font-size: 0.9rem;\n}\n\n/* Payment Details */\n.payment-details-section {\n  margin-bottom: 2rem;\n}\n\n.payment-detail {\n  padding: 2rem;\n  background: #f8f9fa;\n  border-radius: 12px;\n  border: 1px solid #e0e0e0;\n  min-height: 450px;\n  max-width: 100%;\n  box-sizing: border-box;\n  display: flex;\n  flex-direction: column;\n}\n\n.payment-detail h4 {\n  margin-bottom: 1.5rem;\n  color: #2c3e50;\n  display: flex;\n  align-items: center;\n}\n\n.payment-detail h4 i {\n  margin-right: 0.5rem;\n  color: #667eea;\n}\n\n/* Payment Form */\n.payment-form {\n  margin-bottom: 2rem;\n  flex: 1;\n}\n\n.payment-form .form-group {\n  margin-bottom: 1.5rem;\n}\n\n.payment-form .form-row {\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  gap: 1rem;\n  margin-bottom: 1rem;\n}\n\n.payment-form label {\n  display: block;\n  margin-bottom: 0.5rem;\n  color: #2c3e50;\n  font-weight: 500;\n}\n\n.payment-form input {\n  width: 100%;\n  padding: 0.75rem;\n  border: 2px solid #e0e0e0;\n  border-radius: 8px;\n  font-size: 1rem;\n  transition: border-color 0.3s ease;\n  box-sizing: border-box;\n}\n\n.payment-form input:focus {\n  outline: none;\n  border-color: #667eea;\n}\n\n.payment-form input:required {\n  border-left: 4px solid #667eea;\n}\n\n.form-help {\n  display: block;\n  margin-top: 0.25rem;\n  font-size: 0.85rem;\n  color: #666;\n  font-style: italic;\n}\n\n/* Payment Instructions */\n.payment-instructions {\n  background: white;\n  padding: 1.5rem;\n  border-radius: 8px;\n  border: 1px solid #e0e0e0;\n  margin-top: auto;\n}\n\n.payment-instructions h5 {\n  margin-bottom: 1rem;\n  color: #2c3e50;\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n}\n\n.payment-instructions h5 i {\n  color: #667eea;\n}\n\n.payment-instructions ol {\n  margin: 0;\n  padding-left: 1.5rem;\n}\n\n.payment-instructions li {\n  margin-bottom: 0.5rem;\n  color: #555;\n  line-height: 1.5;\n}\n\n/* Bank Info */\n.bank-info .payment-form .form-row {\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  gap: 1rem;\n}\n\n/* Card Form */\n.card-form {\n  display: grid;\n  gap: 1rem;\n}\n\n.card-form .form-row {\n  display: grid;\n  grid-template-columns: 2fr 1fr;\n  gap: 1rem;\n}\n\n.card-form .form-group label {\n  display: block;\n  margin-bottom: 0.5rem;\n  color: #2c3e50;\n  font-weight: 500;\n}\n\n.card-form .form-group input {\n  width: 100%;\n  padding: 0.75rem;\n  border: 2px solid #e0e0e0;\n  border-radius: 8px;\n  font-size: 1rem;\n  transition: border-color 0.3s ease;\n  box-sizing: border-box;\n}\n\n.card-form .form-group input:focus {\n  outline: none;\n  border-color: #667eea;\n}\n\n/* Donation Summary */\n.donation-summary {\n  padding: 1.5rem;\n  background: #f8f9fa;\n  border-radius: 12px;\n  border: 1px solid #e0e0e0;\n  margin-bottom: 2rem;\n}\n\n.summary-row {\n  display: flex;\n  justify-content: space-between;\n  margin-bottom: 0.5rem;\n  color: #2c3e50;\n}\n\n.summary-row.total {\n  padding-top: 1rem;\n  border-top: 2px solid #e0e0e0;\n  font-weight: 600;\n  font-size: 1.1rem;\n}\n\n.summary-row .amount,\n.summary-row .fee,\n.summary-row .total-amount {\n  font-weight: 500;\n}\n\n.summary-row .total-amount {\n  color: #667eea;\n}\n\n/* Submit Section */\n.submit-section {\n  text-align: center;\n}\n\n.donate-btn {\n  width: 100%;\n  padding: 1rem 2rem;\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n  color: white;\n  border: none;\n  border-radius: 12px;\n  font-size: 1.2rem;\n  font-weight: 600;\n  cursor: pointer;\n  transition: all 0.3s ease;\n  margin-bottom: 1rem;\n}\n\n.donate-btn:hover:not(:disabled) {\n  transform: translateY(-2px);\n  box-shadow: 0 8px 25px rgba(102, 126, 234, 0.3);\n}\n\n.donate-btn:disabled {\n  background: #ccc;\n  cursor: not-allowed;\n  transform: none;\n  box-shadow: none;\n}\n\n.donate-btn i {\n  margin-right: 0.5rem;\n}\n\n.security-note {\n  color: #666;\n  font-size: 0.9rem;\n  margin: 0;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  gap: 0.5rem;\n}\n\n.security-note i {\n  color: #28a745;\n}\n\n/* Responsive Design */\n@media (max-width: 768px) {\n  .donate-header {\n    padding: 1.5rem 1rem;\n  }\n  \n  .back-btn {\n    position: static;\n    transform: none;\n    margin-bottom: 1rem;\n    align-self: flex-start;\n  }\n  \n  .header-content {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n  }\n  \n  .project-meta {\n    flex-direction: column;\n    gap: 0.5rem;\n  }\n  \n  .funding-stats {\n    flex-direction: column;\n    gap: 1rem;\n  }\n  \n  .amount-buttons {\n    grid-template-columns: repeat(2, 1fr);\n  }\n  \n  .payment-options {\n    grid-template-columns: 1fr;\n  }\n  \n  .payment-form .form-row,\n  .card-form .form-row {\n    grid-template-columns: 1fr;\n  }\n  \n  .payment-detail {\n    min-height: 350px;\n    padding: 1.5rem;\n  }\n  \n  .project-info-section,\n  .donation-form-section {\n    padding: 1rem;\n  }\n  \n  .project-info-card,\n  .donation-form-card {\n    padding: 1.5rem;\n  }\n}\n\n/* Message styles */\n.message-container {\n  position: fixed;\n  top: 100px;\n  right: 20px;\n  z-index: 1001;\n}\n\n.message {\n  background: white;\n  border: 1px solid #ddd;\n  border-radius: 8px;\n  padding: 1rem 1.5rem;\n  margin-bottom: 1rem;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n  max-width: 400px;\n  animation: slideInRight 0.3s ease;\n}\n\n.message.success {\n  border-left: 4px solid #28a745;\n}\n\n.message.error {\n  border-left: 4px solid #dc3545;\n}\n\n.message.info {\n  border-left: 4px solid #17a2b8;\n}\n\n@keyframes slideInRight {\n  from {\n    transform: translateX(100%);\n    opacity: 0;\n  }\n  to {\n    transform: translateX(0);\n    opacity: 1;\n  }\n}","size_bytes":11293},"static/js/donate.js":{"content":"// Donate page JavaScript functionality\n\nlet currentUser = null;\nlet currentProject = null;\nlet selectedAmount = 0;\nlet selectedPaymentMethod = 'upi';\n\ndocument.addEventListener('DOMContentLoaded', function() {\n    // Check authentication\n    checkAuthStatus();\n    \n    // Get project ID from URL\n    const urlParams = new URLSearchParams(window.location.search);\n    const projectId = urlParams.get('project');\n    \n    if (projectId) {\n        loadProject(projectId);\n    } else {\n        window.location.href = 'browse.html';\n    }\n    \n    // Setup event listeners\n    setupEventListeners();\n    \n    // Add real-time validation listeners\n    setupValidationListeners();\n});\n\nasync function checkAuthStatus() {\n    try {\n        const response = await fetch('/api/user');\n        if (response.ok) {\n            const data = await response.json();\n            currentUser = data.user;\n            updateNavbarForLoggedInUser();\n        }\n    } catch (error) {\n        console.log('User not authenticated');\n    }\n}\n\nfunction updateNavbarForLoggedInUser() {\n    const navAuth = document.getElementById('nav-auth');\n    const dashboardLink = document.getElementById('dashboard-link');\n    \n    if (navAuth && currentUser) {\n        navAuth.innerHTML = `\n            <span class=\"user-greeting\">Welcome, ${currentUser.username}!</span>\n            <button class=\"logout-btn\" onclick=\"handleLogout()\"><i class=\"fas fa-sign-out-alt\"></i> Logout</button>\n        `;\n    }\n    \n    if (dashboardLink) {\n        dashboardLink.style.display = 'inline-flex';\n    }\n}\n\nasync function loadProject(projectId) {\n    try {\n        const response = await fetch(`/api/projects/${projectId}`);\n        if (response.ok) {\n            const data = await response.json();\n            currentProject = data.project;\n            displayProjectInfo(currentProject);\n        } else {\n            showMessage('Project not found', 'error');\n            setTimeout(() => {\n                window.location.href = 'browse.html';\n            }, 2000);\n        }\n    } catch (error) {\n        console.error('Error loading project:', error);\n        showMessage('Error loading project', 'error');\n    }\n}\n\nfunction displayProjectInfo(project) {\n    document.getElementById('project-title').textContent = project.title;\n    document.getElementById('project-owner').innerHTML = `\n        <i class=\"fas fa-user\"></i> ${project.owner ? project.owner.full_name : 'Unknown'}\n    `;\n    document.getElementById('project-category').innerHTML = `\n        <i class=\"fas fa-tag\"></i> ${project.category}\n    `;\n    \n    const currentFunding = project.current_funding || 0;\n    const fundingGoal = project.funding_goal || 0;\n    const percentage = fundingGoal > 0 ? Math.round((currentFunding / fundingGoal) * 100) : 0;\n    \n    document.getElementById('current-funding').textContent = `$${currentFunding.toFixed(2)}`;\n    document.getElementById('funding-goal').textContent = `$${fundingGoal.toFixed(2)}`;\n    document.getElementById('funding-percentage').textContent = `${percentage}%`;\n    document.getElementById('progress-fill').style.width = `${Math.min(percentage, 100)}%`;\n}\n\nfunction setupEventListeners() {\n    // Amount buttons\n    document.querySelectorAll('.amount-btn').forEach(btn => {\n        btn.addEventListener('click', function() {\n            selectAmount(parseFloat(this.dataset.amount));\n            updateAmountButtons(this);\n        });\n    });\n    \n    // Custom amount input\n    const customAmountInput = document.getElementById('custom-amount-input');\n    customAmountInput.addEventListener('input', function() {\n        const amount = parseFloat(this.value) || 0;\n        if (amount > 0) {\n            selectAmount(amount);\n            updateAmountButtons(null);\n        }\n    });\n    \n    // Payment method selection\n    document.querySelectorAll('.payment-option').forEach(option => {\n        option.addEventListener('click', function() {\n            selectPaymentMethod(this.dataset.method);\n            updatePaymentMethods(this);\n        });\n    });\n    \n    // Process donation button\n    document.getElementById('process-donation').addEventListener('click', processDonation);\n    \n    // Card input formatting\n    setupCardInputFormatting();\n}\n\nfunction setupValidationListeners() {\n    // UPI form validation\n    const upiInputs = ['upi-id', 'upi-name', 'upi-phone'];\n    upiInputs.forEach(id => {\n        const input = document.getElementById(id);\n        if (input) {\n            input.addEventListener('input', updateDonationSummary);\n        }\n    });\n    \n    // Bank form validation\n    const bankInputs = ['bank-account-name', 'bank-account-number', 'bank-ifsc', 'bank-name', 'bank-phone'];\n    bankInputs.forEach(id => {\n        const input = document.getElementById(id);\n        if (input) {\n            input.addEventListener('input', updateDonationSummary);\n        }\n    });\n    \n    // Card form validation\n    const cardInputs = ['card-number', 'expiry', 'cvv', 'cardholder-name'];\n    cardInputs.forEach(id => {\n        const input = document.getElementById(id);\n        if (input) {\n            input.addEventListener('input', updateDonationSummary);\n        }\n    });\n    \n    // Phone number validation\n    const phoneInputs = document.querySelectorAll('input[type=\"tel\"]');\n    phoneInputs.forEach(input => {\n        input.addEventListener('input', function() {\n            this.value = this.value.replace(/\\D/g, '').slice(0, 10);\n        });\n    });\n    \n    // IFSC code formatting\n    const ifscInput = document.getElementById('bank-ifsc');\n    if (ifscInput) {\n        ifscInput.addEventListener('input', function() {\n            this.value = this.value.toUpperCase().replace(/[^A-Z0-9]/g, '').slice(0, 11);\n        });\n    }\n}\n\nfunction selectAmount(amount) {\n    selectedAmount = amount;\n    updateDonationSummary();\n    \n    // Clear custom input if amount button was clicked\n    if (event && event.target.classList.contains('amount-btn')) {\n        document.getElementById('custom-amount-input').value = '';\n    }\n}\n\nfunction updateAmountButtons(activeBtn) {\n    document.querySelectorAll('.amount-btn').forEach(btn => {\n        btn.classList.remove('active');\n    });\n    \n    if (activeBtn) {\n        activeBtn.classList.add('active');\n    }\n}\n\nfunction selectPaymentMethod(method) {\n    selectedPaymentMethod = method;\n    updatePaymentDetails();\n}\n\nfunction updatePaymentMethods(activeOption) {\n    document.querySelectorAll('.payment-option').forEach(option => {\n        option.classList.remove('active');\n    });\n    \n    activeOption.classList.add('active');\n}\n\nfunction updatePaymentDetails() {\n    // Hide all payment details\n    document.querySelectorAll('.payment-detail').forEach(detail => {\n        detail.style.display = 'none';\n    });\n    \n    // Show selected payment method details\n    const selectedDetail = document.getElementById(`${selectedPaymentMethod}-details`);\n    if (selectedDetail) {\n        selectedDetail.style.display = 'block';\n    }\n}\n\nfunction updateDonationSummary() {\n    const processingFee = selectedAmount * 0.029; // 2.9% processing fee\n    const total = selectedAmount + processingFee;\n    \n    document.getElementById('summary-amount').textContent = `$${selectedAmount.toFixed(2)}`;\n    document.getElementById('summary-fee').textContent = `$${processingFee.toFixed(2)}`;\n    document.getElementById('summary-total').textContent = `$${total.toFixed(2)}`;\n    \n    // Enable/disable donation button based on amount and payment method validation\n    const donateBtn = document.getElementById('process-donation');\n    donateBtn.disabled = selectedAmount <= 0 || !validatePaymentDetails();\n}\n\nfunction validatePaymentDetails() {\n    if (selectedPaymentMethod === 'upi') {\n        const upiId = document.getElementById('upi-id')?.value.trim();\n        const upiName = document.getElementById('upi-name')?.value.trim();\n        const upiPhone = document.getElementById('upi-phone')?.value.trim();\n        return upiId && upiName && upiPhone && upiPhone.length === 10;\n    } else if (selectedPaymentMethod === 'bank') {\n        const accountName = document.getElementById('bank-account-name')?.value.trim();\n        const accountNumber = document.getElementById('bank-account-number')?.value.trim();\n        const ifsc = document.getElementById('bank-ifsc')?.value.trim();\n        const bankName = document.getElementById('bank-name')?.value.trim();\n        const phone = document.getElementById('bank-phone')?.value.trim();\n        return accountName && accountNumber && ifsc && bankName && phone && phone.length === 10;\n    } else if (selectedPaymentMethod === 'card') {\n        const cardNumber = document.getElementById('card-number')?.value.trim();\n        const expiry = document.getElementById('expiry')?.value.trim();\n        const cvv = document.getElementById('cvv')?.value.trim();\n        const cardholderName = document.getElementById('cardholder-name')?.value.trim();\n        return cardNumber && expiry && cvv && cardholderName;\n    }\n    return false;\n}\n\nfunction setupCardInputFormatting() {\n    const cardNumber = document.getElementById('card-number');\n    const expiry = document.getElementById('expiry');\n    const cvv = document.getElementById('cvv');\n    \n    if (cardNumber) {\n        cardNumber.addEventListener('input', function() {\n            let value = this.value.replace(/\\s/g, '').replace(/[^0-9]/g, '');\n            let formattedValue = value.match(/.{1,4}/g)?.join(' ') || value;\n            this.value = formattedValue;\n        });\n    }\n    \n    if (expiry) {\n        expiry.addEventListener('input', function() {\n            let value = this.value.replace(/\\D/g, '');\n            if (value.length >= 2) {\n                value = value.substring(0, 2) + '/' + value.substring(2, 4);\n            }\n            this.value = value;\n        });\n    }\n    \n    if (cvv) {\n        cvv.addEventListener('input', function() {\n            this.value = this.value.replace(/\\D/g, '');\n        });\n    }\n}\n\nfunction copyToClipboard(text) {\n    navigator.clipboard.writeText(text).then(function() {\n        showMessage('Copied to clipboard!', 'success');\n    }).catch(function(error) {\n        console.error('Error copying to clipboard:', error);\n        showMessage('Failed to copy to clipboard', 'error');\n    });\n}\n\nasync function processDonation() {\n    if (!currentUser) {\n        showMessage('Please login to make a donation', 'error');\n        setTimeout(() => {\n            window.location.href = 'login.html';\n        }, 2000);\n        return;\n    }\n    \n    if (selectedAmount <= 0) {\n        showMessage('Please select a valid donation amount', 'error');\n        return;\n    }\n    \n    if (!currentProject) {\n        showMessage('Project information not available', 'error');\n        return;\n    }\n    \n    if (!validatePaymentDetails()) {\n        showMessage('Please fill in all required payment details', 'error');\n        return;\n    }\n    \n    const message = document.getElementById('message-input').value;\n    \n    // Collect payment details based on selected method\n    let paymentDetails = {};\n    if (selectedPaymentMethod === 'upi') {\n        paymentDetails = {\n            upi_id: document.getElementById('upi-id').value.trim(),\n            account_name: document.getElementById('upi-name').value.trim(),\n            phone: document.getElementById('upi-phone').value.trim()\n        };\n    } else if (selectedPaymentMethod === 'bank') {\n        paymentDetails = {\n            account_name: document.getElementById('bank-account-name').value.trim(),\n            account_number: document.getElementById('bank-account-number').value.trim(),\n            ifsc_code: document.getElementById('bank-ifsc').value.trim(),\n            bank_name: document.getElementById('bank-name').value.trim(),\n            branch_name: document.getElementById('bank-branch').value.trim(),\n            phone: document.getElementById('bank-phone').value.trim()\n        };\n    } else if (selectedPaymentMethod === 'card') {\n        paymentDetails = {\n            card_number: document.getElementById('card-number').value.replace(/\\s/g, ''),\n            expiry: document.getElementById('expiry').value,\n            cvv: document.getElementById('cvv').value,\n            cardholder_name: document.getElementById('cardholder-name').value.trim()\n        };\n    }\n    \n    try {\n        // Show loading state\n        const donateBtn = document.getElementById('process-donation');\n        const originalText = donateBtn.innerHTML;\n        donateBtn.innerHTML = '<i class=\"fas fa-spinner fa-spin\"></i> Processing...';\n        donateBtn.disabled = true;\n        \n        // This is detail collection only - no actual payment processing\n        // In a real implementation, this would save donation intent and contact details\n        \n        showMessage('Thank you! Your donation details have been recorded. The project owner will contact you to complete the donation process.', 'success');\n        setTimeout(() => {\n            window.location.href = `browse.html?project=${currentProject.id}`;\n        }, 3000);\n    } catch (error) {\n        console.error('Error processing donation:', error);\n        showMessage('Error processing donation. Please try again.', 'error');\n    } finally {\n        // Reset button state\n        const donateBtn = document.getElementById('process-donation');\n        donateBtn.innerHTML = '<i class=\"fas fa-heart\"></i> Submit Donation Details';\n        donateBtn.disabled = selectedAmount <= 0;\n    }\n}\n\nfunction showMessage(message, type) {\n    const container = document.getElementById('message-container');\n    const messageEl = document.createElement('div');\n    messageEl.className = `message ${type}`;\n    messageEl.textContent = message;\n    \n    container.appendChild(messageEl);\n    \n    setTimeout(() => {\n        messageEl.remove();\n    }, 5000);\n}\n\nasync function handleLogout() {\n    try {\n        const response = await fetch('/api/logout', { method: 'POST' });\n        if (response.ok) {\n            window.location.href = '/';\n        }\n    } catch (error) {\n        console.error('Logout error:', error);\n    }\n}\n\n// Initialize page\ndocument.addEventListener('DOMContentLoaded', function() {\n    updateDonationSummary();\n    updatePaymentDetails();\n});","size_bytes":14269}}}